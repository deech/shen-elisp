(defun shen.shen->kl (V7167) (let W7168 (shen.shen->kl-h V7167) (shen.record-and-evaluate W7168)))

(defun shen.record-and-evaluate (V7169) (cond ((and (cons? V7169) (and (= defun (hd V7169)) (and (cons? (tl V7169)) (and (cons? (tl (tl V7169))) (and (cons? (tl (tl (tl V7169)))) (= () (tl (tl (tl (tl V7169)))))))))) (let W7170 (if (shen.sysfunc? (hd (tl V7169))) (simple-error (shen.app (hd (tl V7169)) " is not a legitimate function name
" shen.a)) shen.skip) (let W7171 (shen.store-arity (hd (tl V7169)) (length (hd (tl (tl V7169))))) (let W7172 (shen.record-kl (hd (tl V7169)) V7169) (let W7173 (eval-kl V7169) (shen.fn-print (hd (tl V7169)))))))) (true V7169)))

(defun shen.shen->kl-h (V7174) (cond ((and (cons? V7174) (and (= define (hd V7174)) (cons? (tl V7174)))) (shen.shendef->kldef (hd (tl V7174)) (tl (tl V7174)))) ((and (cons? V7174) (and (= defun (hd V7174)) (and (cons? (tl V7174)) (and (cons? (tl (tl V7174))) (and (cons? (tl (tl (tl V7174)))) (= () (tl (tl (tl (tl V7174)))))))))) V7174) ((and (cons? V7174) (and (= type (hd V7174)) (and (cons? (tl V7174)) (and (cons? (tl (tl V7174))) (= () (tl (tl (tl V7174)))))))) (cons type (cons (hd (tl V7174)) (cons (shen.rcons_form (hd (tl (tl V7174)))) ())))) ((and (cons? V7174) (and (= input+ (hd V7174)) (and (cons? (tl V7174)) (and (cons? (tl (tl V7174))) (= () (tl (tl (tl V7174)))))))) (cons input+ (cons (shen.rcons_form (hd (tl V7174))) (tl (tl V7174))))) ((cons? V7174) (map (lambda Z7175 (shen.shen->kl-h Z7175)) V7174)) (true V7174)))

(defun shen.shendef->kldef (V7176 V7177) (compile (lambda Z7178 (shen.<define> Z7178)) (cons V7176 V7177)))

(defun shen.<define> (V7179) (let W7180 (let W7181 (shen.<name> V7179) (if (shen.parse-failure? W7181) (shen.parse-failure) (let W7182 (shen.<-out W7181) (let W7183 (shen.in-> W7181) (if (shen.hds=? W7183 {) (let W7184 (tail W7183) (let W7185 (shen.<signature> W7184) (if (shen.parse-failure? W7185) (shen.parse-failure) (let W7186 (shen.in-> W7185) (if (shen.hds=? W7186 }) (let W7187 (tail W7186) (let W7188 (shen.<rules> W7187) (if (shen.parse-failure? W7188) (shen.parse-failure) (let W7189 (shen.<-out W7188) (let W7190 (shen.in-> W7188) (shen.comb W7190 (shen.shendef->kldef-h W7182 W7189))))))) (shen.parse-failure)))))) (shen.parse-failure)))))) (if (shen.parse-failure? W7180) (let W7191 (let W7192 (shen.<name> V7179) (if (shen.parse-failure? W7192) (shen.parse-failure) (let W7193 (shen.<-out W7192) (let W7194 (shen.in-> W7192) (let W7195 (shen.<rules> W7194) (if (shen.parse-failure? W7195) (shen.parse-failure) (let W7196 (shen.<-out W7195) (let W7197 (shen.in-> W7195) (shen.comb W7197 (shen.shendef->kldef-h W7193 W7196)))))))))) (if (shen.parse-failure? W7191) (shen.parse-failure) W7191)) W7180)))

(defun shen.shendef->kldef-h (V7198 V7199) (let W7200 (map (lambda Z7201 (fst Z7201)) V7199) (let W7202 (shen.arity-chk V7198 W7200) (let W7203 (map (lambda Z7204 (shen.free-var-chk V7198 Z7204)) V7199) (let W7205 (shen.unprotect V7199) (let W7206 (shen.factorise-code (shen.compile-to-kl V7198 W7205 W7202)) W7206))))))

(defun shen.unprotect (V7207) (cond ((tuple? V7207) (@p (shen.unprotect (fst V7207)) (shen.unprotect (snd V7207)))) ((and (cons? V7207) (and (= protect (hd V7207)) (and (cons? (tl V7207)) (= () (tl (tl V7207)))))) (shen.unprotect (hd (tl V7207)))) ((cons? V7207) (map (lambda Z7208 (shen.unprotect Z7208)) V7207)) (true V7207)))

(defun shen.<name> (V7209) (let W7210 (if (cons? V7209) (let W7211 (head V7209) (let W7212 (tail V7209) (shen.comb W7212 (if (and (symbol? W7211) (not (variable? W7211))) W7211 (simple-error (shen.app W7211 " is not a legitimate function name.
" shen.a)))))) (shen.parse-failure)) (if (shen.parse-failure? W7210) (shen.parse-failure) W7210)))

(defun shen.<signature> (V7213) (let W7214 (if (cons? V7213) (let W7215 (head V7213) (let W7216 (tail V7213) (let W7217 (shen.<signature> W7216) (if (shen.parse-failure? W7217) (shen.parse-failure) (let W7218 (shen.<-out W7217) (let W7219 (shen.in-> W7217) (if (not (element? W7215 (cons { (cons } ())))) (shen.comb W7219 (cons W7215 W7218)) (shen.parse-failure)))))))) (shen.parse-failure)) (if (shen.parse-failure? W7214) (let W7220 (let W7221 (<e> V7213) (if (shen.parse-failure? W7221) (shen.parse-failure) (let W7222 (shen.in-> W7221) (shen.comb W7222 ())))) (if (shen.parse-failure? W7220) (shen.parse-failure) W7220)) W7214)))

(defun shen.<rules> (V7223) (let W7224 (let W7225 (shen.<rule> V7223) (if (shen.parse-failure? W7225) (shen.parse-failure) (let W7226 (shen.<-out W7225) (let W7227 (shen.in-> W7225) (let W7228 (shen.<rules> W7227) (if (shen.parse-failure? W7228) (shen.parse-failure) (let W7229 (shen.<-out W7228) (let W7230 (shen.in-> W7228) (shen.comb W7230 (cons (shen.linearise W7226) W7229)))))))))) (if (shen.parse-failure? W7224) (let W7231 (let W7232 (<!> V7223) (if (shen.parse-failure? W7232) (shen.parse-failure) (let W7233 (shen.<-out W7232) (let W7234 (shen.in-> W7232) (shen.comb W7234 (if (empty? W7233) () (simple-error (cn "Shen syntax error here:
 " (shen.app W7233 "
 ..." shen.r))))))))) (if (shen.parse-failure? W7231) (shen.parse-failure) W7231)) W7224)))

(defun shen.linearise (V7237) (cond ((tuple? V7237) (shen.linearise-h (fst V7237) (fst V7237) () (snd V7237))) (true (simple-error "implementation error in shen.linearise"))))

(defun shen.linearise-h (V7250 V7251 V7252 V7253) (cond ((= () V7250) (@p V7251 V7253)) ((and (cons? V7250) (cons? (hd V7250))) (shen.linearise-h (append (hd V7250) (tl V7250)) V7251 V7252 V7253)) ((and (cons? V7250) (variable? (hd V7250))) (if (element? (hd V7250) V7252) (let W7254 (gensym V) (shen.linearise-h (tl V7250) (shen.rep-X (hd V7250) W7254 V7251) V7252 (cons where (cons (cons = (cons W7254 (cons (hd V7250) ()))) (cons V7253 ()))))) (shen.linearise-h (tl V7250) V7251 (cons (hd V7250) V7252) V7253))) ((cons? V7250) (shen.linearise-h (tl V7250) V7251 V7252 V7253)) (true (simple-error "implementation error in shen.linearise-h"))))

(defun shen.<rule> (V7255) (let W7256 (let W7257 (shen.<patterns> V7255) (if (shen.parse-failure? W7257) (shen.parse-failure) (let W7258 (shen.<-out W7257) (let W7259 (shen.in-> W7257) (if (shen.hds=? W7259 ->) (let W7260 (tail W7259) (if (cons? W7260) (let W7261 (head W7260) (let W7262 (tail W7260) (if (shen.hds=? W7262 where) (let W7263 (tail W7262) (if (cons? W7263) (let W7264 (head W7263) (let W7265 (tail W7263) (shen.comb W7265 (@p W7258 (cons where (cons W7264 (cons W7261 ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W7256) (let W7266 (let W7267 (shen.<patterns> V7255) (if (shen.parse-failure? W7267) (shen.parse-failure) (let W7268 (shen.<-out W7267) (let W7269 (shen.in-> W7267) (if (shen.hds=? W7269 ->) (let W7270 (tail W7269) (if (cons? W7270) (let W7271 (head W7270) (let W7272 (tail W7270) (shen.comb W7272 (@p W7268 W7271)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W7266) (let W7273 (let W7274 (shen.<patterns> V7255) (if (shen.parse-failure? W7274) (shen.parse-failure) (let W7275 (shen.<-out W7274) (let W7276 (shen.in-> W7274) (if (shen.hds=? W7276 <-) (let W7277 (tail W7276) (if (cons? W7277) (let W7278 (head W7277) (let W7279 (tail W7277) (if (shen.hds=? W7279 where) (let W7280 (tail W7279) (if (cons? W7280) (let W7281 (head W7280) (let W7282 (tail W7280) (shen.comb W7282 (@p W7275 (cons where (cons W7281 (cons (cons shen.choicepoint! (cons W7278 ())) ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W7273) (let W7283 (let W7284 (shen.<patterns> V7255) (if (shen.parse-failure? W7284) (shen.parse-failure) (let W7285 (shen.<-out W7284) (let W7286 (shen.in-> W7284) (if (shen.hds=? W7286 <-) (let W7287 (tail W7286) (if (cons? W7287) (let W7288 (head W7287) (let W7289 (tail W7287) (shen.comb W7289 (@p W7285 (cons shen.choicepoint! (cons W7288 ())))))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W7283) (shen.parse-failure) W7283)) W7273)) W7266)) W7256)))

(defun shen.<patterns> (V7290) (let W7291 (let W7292 (shen.<pattern> V7290) (if (shen.parse-failure? W7292) (shen.parse-failure) (let W7293 (shen.<-out W7292) (let W7294 (shen.in-> W7292) (let W7295 (shen.<patterns> W7294) (if (shen.parse-failure? W7295) (shen.parse-failure) (let W7296 (shen.<-out W7295) (let W7297 (shen.in-> W7295) (shen.comb W7297 (cons W7293 W7296)))))))))) (if (shen.parse-failure? W7291) (let W7298 (let W7299 (<e> V7290) (if (shen.parse-failure? W7299) (shen.parse-failure) (let W7300 (shen.in-> W7299) (shen.comb W7300 ())))) (if (shen.parse-failure? W7298) (shen.parse-failure) W7298)) W7291)))

(defun shen.<pattern> (V7301) (let W7302 (if (shen.ccons? V7301) (let W7303 (head V7301) (let W7304 (tail V7301) (let W7305 (shen.<constructor> W7303) (if (shen.parse-failure? W7305) (shen.parse-failure) (let W7306 (shen.<-out W7305) (let W7307 (shen.in-> W7305) (let W7308 (shen.<pattern1> W7307) (if (shen.parse-failure? W7308) (shen.parse-failure) (let W7309 (shen.<-out W7308) (let W7310 (shen.in-> W7308) (let W7311 (shen.<pattern2> W7310) (if (shen.parse-failure? W7311) (shen.parse-failure) (let W7312 (shen.<-out W7311) (let W7313 (shen.in-> W7311) (let W7314 (<end> W7313) (if (shen.parse-failure? W7314) (shen.parse-failure) (let W7315 (shen.in-> W7314) (shen.comb W7304 (cons W7306 (cons W7309 (cons W7312 ()))))))))))))))))))))) (shen.parse-failure)) (if (shen.parse-failure? W7302) (let W7316 (if (shen.ccons? V7301) (let W7317 (head V7301) (let W7318 (tail V7301) (if (shen.hds=? W7317 vector) (let W7319 (tail W7317) (if (shen.hds=? W7319 0) (let W7320 (tail W7319) (let W7321 (<end> W7320) (if (shen.parse-failure? W7321) (shen.parse-failure) (let W7322 (shen.in-> W7321) (shen.comb W7318 (cons vector (cons 0 ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W7316) (let W7323 (if (cons? V7301) (let W7324 (head V7301) (let W7325 (tail V7301) (if (cons? W7324) (shen.comb W7325 (shen.constructor-error W7324)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W7323) (let W7326 (let W7327 (shen.<simple-pattern> V7301) (if (shen.parse-failure? W7327) (shen.parse-failure) (let W7328 (shen.<-out W7327) (let W7329 (shen.in-> W7327) (shen.comb W7329 W7328))))) (if (shen.parse-failure? W7326) (shen.parse-failure) W7326)) W7323)) W7316)) W7302)))

(defun shen.<constructor> (V7330) (let W7331 (if (cons? V7330) (let W7332 (head V7330) (let W7333 (tail V7330) (if (shen.constructor? W7332) (shen.comb W7333 W7332) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W7331) (shen.parse-failure) W7331)))

(defun shen.constructor? (V7334) (element? V7334 (cons cons (cons @p (cons @s (cons @v ()))))))

(defun shen.constructor-error (V7335) (simple-error (shen.app V7335 " is not a legitimate constructor
" shen.r)))

(defun shen.<simple-pattern> (V7336) (let W7337 (if (cons? V7336) (let W7338 (head V7336) (let W7339 (tail V7336) (if (= W7338 _) (shen.comb W7339 (gensym Y)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W7337) (let W7340 (if (cons? V7336) (let W7341 (head V7336) (let W7342 (tail V7336) (if (not (element? W7341 (cons -> (cons <- ())))) (shen.comb W7342 W7341) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W7340) (shen.parse-failure) W7340)) W7337)))

(defun shen.<pattern1> (V7343) (let W7344 (let W7345 (shen.<pattern> V7343) (if (shen.parse-failure? W7345) (shen.parse-failure) (let W7346 (shen.<-out W7345) (let W7347 (shen.in-> W7345) (shen.comb W7347 W7346))))) (if (shen.parse-failure? W7344) (shen.parse-failure) W7344)))

(defun shen.<pattern2> (V7348) (let W7349 (let W7350 (shen.<pattern> V7348) (if (shen.parse-failure? W7350) (shen.parse-failure) (let W7351 (shen.<-out W7350) (let W7352 (shen.in-> W7350) (shen.comb W7352 W7351))))) (if (shen.parse-failure? W7349) (shen.parse-failure) W7349)))

(defun shen.fn-print (V7353) (let W7354 (absvector 2) (let W7355 (address-> W7354 0 shen.printF) (let W7356 (address-> W7355 1 (@s "(" (@s "f" (@s "n" (@s " " (@s (str V7353) ")")))))) W7356))))

(defun shen.printF (V7357) (<-address V7357 1))

(defun shen.arity-chk (V7362 V7363) (cond ((and (cons? V7363) (= () (tl V7363))) (length (hd V7363))) ((and (cons? V7363) (and (cons? (tl V7363)) (= (length (hd V7363)) (length (hd (tl V7363)))))) (shen.arity-chk V7362 (tl V7363))) (true (simple-error (cn "arity error in " (shen.app V7362 "
" shen.a))))))

(defun shen.free-var-chk (V7364 V7365) (cond ((tuple? V7365) (shen.free-variable-error-message V7364 (shen.find-free-vars (shen.extract-vars (fst V7365)) (snd V7365)))) (true (simple-error "partial function shen.free-var-chk"))))

(defun shen.free-variable-error-message (V7366 V7367) (if (empty? V7367) shen.skip (do (pr (cn "free variables in " (shen.app V7366 ":" shen.a)) (stoutput)) (do (map (lambda Z7368 (pr (cn " " (shen.app Z7368 "" shen.a)) (stoutput))) V7367) (do (nl 1) (abort))))))

(defun shen.extract-vars (V7371) (cond ((variable? V7371) (cons V7371 ())) ((cons? V7371) (union (shen.extract-vars (hd V7371)) (shen.extract-vars (tl V7371)))) (true ())))

(defun shen.find-free-vars (V7376 V7377) (cond ((and (cons? V7377) (and (= protect (hd V7377)) (and (cons? (tl V7377)) (= () (tl (tl V7377)))))) ()) ((and (cons? V7377) (and (= let (hd V7377)) (and (cons? (tl V7377)) (and (cons? (tl (tl V7377))) (and (cons? (tl (tl (tl V7377)))) (= () (tl (tl (tl (tl V7377)))))))))) (union (shen.find-free-vars V7376 (hd (tl (tl V7377)))) (shen.find-free-vars (cons (hd (tl V7377)) V7376) (hd (tl (tl (tl V7377))))))) ((and (cons? V7377) (and (= lambda (hd V7377)) (and (cons? (tl V7377)) (and (cons? (tl (tl V7377))) (= () (tl (tl (tl V7377)))))))) (shen.find-free-vars (cons (hd (tl V7377)) V7376) (hd (tl (tl V7377))))) ((cons? V7377) (union (shen.find-free-vars V7376 (hd V7377)) (shen.find-free-vars V7376 (tl V7377)))) ((shen.free-variable? V7377 V7376) (cons V7377 ())) (true ())))

(defun shen.free-variable? (V7378 V7379) (and (variable? V7378) (not (element? V7378 V7379))))

(defun shen.record-kl (V7380 V7381) (put V7380 shen.source V7381 (value *property-vector*)))

(defun shen.compile-to-kl (V7382 V7383 V7384) (let W7385 (shen.parameters V7384) (let W7386 (shen.scan-body V7382 (shen.kl-body V7383 W7385)) (let W7387 (cons defun (cons V7382 (cons W7385 (cons (shen.cond-form W7386) ())))) W7387))))

(defun shen.parameters (V7388) (cond ((= 0 V7388) ()) (true (cons (gensym V) (shen.parameters (- V7388 1))))))

(defun shen.cond-form (V7391) (cond ((and (cons? V7391) (and (cons? (hd V7391)) (and (= true (hd (hd V7391))) (and (cons? (tl (hd V7391))) (= () (tl (tl (hd V7391)))))))) (hd (tl (hd V7391)))) (true (cons cond V7391))))

(defun shen.scan-body (V7400 V7401) (cond ((= () V7401) (cons (cons true (cons (cons shen.f-error (cons V7400 ())) ())) ())) ((and (cons? V7401) (shen.choicepoint? (hd V7401))) (shen.choicepoint V7400 (gensym Freeze) (gensym Result) (hd V7401) (tl V7401))) ((and (cons? V7401) (and (cons? (hd V7401)) (and (= true (hd (hd V7401))) (and (cons? (tl (hd V7401))) (= () (tl (tl (hd V7401)))))))) (cons (hd V7401) ())) ((cons? V7401) (cons (hd V7401) (shen.scan-body V7400 (tl V7401)))) (true (simple-error "implementation error in shen.scan-body"))))

(defun shen.choicepoint? (V7408) (cond ((and (cons? V7408) (and (cons? (tl V7408)) (and (cons? (hd (tl V7408))) (and (= shen.choicepoint! (hd (hd (tl V7408)))) (and (cons? (tl (hd (tl V7408)))) (and (= () (tl (tl (hd (tl V7408))))) (= () (tl (tl V7408))))))))) true) (true false)))

(defun shen.choicepoint (V7424 V7425 V7426 V7427 V7428) (cond ((and (cons? V7427) (and (cons? (tl V7427)) (and (cons? (hd (tl V7427))) (and (cons? (tl (hd (tl V7427)))) (and (cons? (hd (tl (hd (tl V7427))))) (and (= fail-if (hd (hd (tl (hd (tl V7427)))))) (and (cons? (tl (hd (tl (hd (tl V7427)))))) (and (cons? (tl (tl (hd (tl (hd (tl V7427))))))) (and (= () (tl (tl (tl (hd (tl (hd (tl V7427)))))))) (and (= () (tl (tl (hd (tl V7427))))) (and (= () (tl (tl V7427))) (= V7424 (hd (tl (hd (tl (hd (tl V7427)))))))))))))))))) (cons (cons true (cons (cons let (cons V7425 (cons (cons freeze (cons (cons cond (shen.scan-body (hd (tl (hd (tl (hd (tl V7427)))))) V7428)) ())) (cons (cons if (cons (hd V7427) (cons (cons let (cons V7426 (cons (hd (tl (tl (hd (tl (hd (tl V7427))))))) (cons (cons if (cons (cons (hd (tl (hd (tl (hd (tl V7427)))))) (cons V7426 ())) (cons (cons thaw (cons V7425 ())) (cons V7426 ())))) ())))) (cons (cons thaw (cons V7425 ())) ())))) ())))) ())) ())) ((and (cons? V7427) (and (cons? (tl V7427)) (and (cons? (hd (tl V7427))) (and (cons? (tl (hd (tl V7427)))) (and (= () (tl (tl (hd (tl V7427))))) (= () (tl (tl V7427)))))))) (cons (cons true (cons (cons let (cons V7425 (cons (cons freeze (cons (cons cond (shen.scan-body V7424 V7428)) ())) (cons (cons if (cons (hd V7427) (cons (cons let (cons V7426 (cons (hd (tl (hd (tl V7427)))) (cons (cons if (cons (cons = (cons V7426 (cons (cons fail ()) ()))) (cons (cons thaw (cons V7425 ())) (cons V7426 ())))) ())))) (cons (cons thaw (cons V7425 ())) ())))) ())))) ())) ())) (true (simple-error "implementation error in shen.choicepoint"))))

(defun shen.rep-X (V7430 V7431 V7432) (cond ((= V7430 V7432) V7431) ((cons? V7432) (let W7433 (shen.rep-X V7430 V7431 (hd V7432)) (if (= W7433 (hd V7432)) (cons (hd V7432) (shen.rep-X V7430 V7431 (tl V7432))) (cons W7433 (tl V7432))))) (true V7432)))

(defun shen.kl-body (V7434 V7435) (map (lambda Z7436 (shen.triple-stack () (fst Z7436) V7435 (shen.alpha-convert (snd Z7436)))) V7434))

(defun shen.alpha-convert (V7437) (cond ((and (cons? V7437) (and (= lambda (hd V7437)) (and (cons? (tl V7437)) (and (cons? (tl (tl V7437))) (= () (tl (tl (tl V7437)))))))) (let W7438 (gensym Z) (let W7439 (cons lambda (cons W7438 (cons (shen.beta (hd (tl V7437)) W7438 (hd (tl (tl V7437)))) ()))) (map (lambda Z7440 (shen.alpha-convert Z7440)) W7439)))) ((and (cons? V7437) (and (= let (hd V7437)) (and (cons? (tl V7437)) (and (cons? (tl (tl V7437))) (and (cons? (tl (tl (tl V7437)))) (= () (tl (tl (tl (tl V7437)))))))))) (let W7441 (gensym W) (let W7442 (cons let (cons W7441 (cons (hd (tl (tl V7437))) (cons (shen.beta (hd (tl V7437)) W7441 (hd (tl (tl (tl V7437))))) ())))) (map (lambda Z7443 (shen.alpha-convert Z7443)) W7442)))) ((cons? V7437) (map (lambda Z7444 (shen.alpha-convert Z7444)) V7437)) (true V7437)))

(defun shen.triple-stack (V7453 V7454 V7455 V7456) (cond ((and (= () V7454) (and (= () V7455) (and (cons? V7456) (and (= where (hd V7456)) (and (cons? (tl V7456)) (and (cons? (tl (tl V7456))) (= () (tl (tl (tl V7456)))))))))) (shen.triple-stack (cons (hd (tl V7456)) V7453) () () (hd (tl (tl V7456))))) ((and (= () V7454) (= () V7455)) (cons (shen.rectify-test (reverse V7453)) (cons V7456 ()))) ((and (cons? V7454) (and (cons? V7455) (variable? (hd V7454)))) (shen.triple-stack V7453 (tl V7454) (tl V7455) (shen.beta (hd V7454) (hd V7455) V7456))) ((and (cons? V7454) (and (cons? (hd V7454)) (and (cons? (tl (hd V7454))) (and (cons? (tl (tl (hd V7454)))) (and (= () (tl (tl (tl (hd V7454))))) (cons? V7455)))))) (shen.triple-stack (cons (cons (shen.op-test (hd (hd V7454))) (cons (hd V7455) ())) V7453) (cons (hd (tl (hd V7454))) (cons (hd (tl (tl (hd V7454)))) (tl V7454))) (cons (cons (shen.op1 (hd (hd V7454))) (cons (hd V7455) ())) (cons (cons (shen.op2 (hd (hd V7454))) (cons (hd V7455) ())) (tl V7455))) (shen.beta (hd V7454) (hd V7455) V7456))) ((and (cons? V7454) (cons? V7455)) (shen.triple-stack (cons (cons = (cons (hd V7454) (cons (hd V7455) ()))) V7453) (tl V7454) (tl V7455) V7456)) (true (simple-error "implementation error in shen.triple-stack"))))

(defun shen.rectify-test (V7459) (cond ((= () V7459) true) ((and (cons? V7459) (= () (tl V7459))) (hd V7459)) ((and (cons? V7459) (cons? (tl V7459))) (cons and (cons (hd V7459) (cons (shen.rectify-test (tl V7459)) ())))) (true (simple-error "implementation error in shen.rectify-test"))))

(defun shen.beta (V7469 V7470 V7471) (cond ((= V7469 V7471) V7470) ((and (cons? V7471) (and (= lambda (hd V7471)) (and (cons? (tl V7471)) (and (cons? (tl (tl V7471))) (and (= () (tl (tl (tl V7471)))) (= V7469 (hd (tl V7471)))))))) V7471) ((and (cons? V7471) (and (= let (hd V7471)) (and (cons? (tl V7471)) (and (cons? (tl (tl V7471))) (and (cons? (tl (tl (tl V7471)))) (and (= () (tl (tl (tl (tl V7471))))) (= V7469 (hd (tl V7471))))))))) (cons let (cons (hd (tl V7471)) (cons (shen.beta (hd (tl V7471)) V7470 (hd (tl (tl V7471)))) (tl (tl (tl V7471))))))) ((cons? V7471) (map (lambda Z7472 (shen.beta V7469 V7470 Z7472)) V7471)) (true V7471)))

(defun shen.op1 (V7475) (cond ((= cons V7475) hd) ((= @s V7475) hdstr) ((= @p V7475) fst) ((= @v V7475) hdv) (true (simple-error "implementation error in shen.op1"))))

(defun shen.op2 (V7478) (cond ((= cons V7478) tl) ((= @s V7478) tlstr) ((= @p V7478) snd) ((= @v V7478) tlv) (true (simple-error "implementation error in shen.op2"))))

(defun shen.op-test (V7481) (cond ((= cons V7481) cons?) ((= @s V7481) shen.+string?) ((= @p V7481) tuple?) ((= @v V7481) shen.+vector?) (true (simple-error "implementation error in shen.op-test"))))

(defun shen.+string? (V7482) (cond ((= "" V7482) false) (true (string? V7482))))

(defun shen.+vector? (V7483) (cond ((= V7483 (vector 0)) false) (true (vector? V7483))))

(defun factorise (V7486) (cond ((= + V7486) (set shen.*factorise?* true)) ((= - V7486) (set shen.*factorise?* false)) (true (simple-error "factorise expects a + or a -
"))))

(defun shen.factorise-code (V7487) (cond ((and (cons? V7487) (and (= defun (hd V7487)) (and (cons? (tl V7487)) (and (cons? (tl (tl V7487))) (and (cons? (tl (tl (tl V7487)))) (and (cons? (hd (tl (tl (tl V7487))))) (and (= cond (hd (hd (tl (tl (tl V7487)))))) (and (= () (tl (tl (tl (tl V7487))))) (value shen.*factorise?*))))))))) (cons defun (cons (hd (tl V7487)) (cons (hd (tl (tl V7487))) (cons (shen.vertical (hd (tl (tl V7487))) (tl (hd (tl (tl (tl V7487))))) (cons shen.f-error (cons (hd (tl V7487)) ()))) ()))))) (true V7487)))

(defun shen.vertical (V7500 V7501 V7502) (cond ((and (cons? V7501) (and (cons? (hd V7501)) (and (= true (hd (hd V7501))) (and (cons? (tl (hd V7501))) (= () (tl (tl (hd V7501)))))))) (hd (tl (hd V7501)))) ((= () V7501) V7502) ((and (cons? V7501) (and (cons? (hd V7501)) (and (cons? (hd (hd V7501))) (and (= and (hd (hd (hd V7501)))) (and (cons? (tl (hd (hd V7501)))) (and (cons? (tl (tl (hd (hd V7501))))) (and (= () (tl (tl (tl (hd (hd V7501)))))) (and (cons? (tl (hd V7501))) (= () (tl (tl (hd V7501)))))))))))) (let W7503 (shen.split-cases (hd (tl (hd (hd V7501)))) V7501 ()) (shen.branch (hd (tl (hd (hd V7501)))) V7500 W7503 V7502))) ((and (cons? V7501) (and (cons? (hd V7501)) (and (cons? (tl (hd V7501))) (= () (tl (tl (hd V7501))))))) (cons if (cons (hd (hd V7501)) (cons (hd (tl (hd V7501))) (cons (shen.vertical V7500 (tl V7501) V7502) ()))))) (true (simple-error "implementation error in shen.vertical"))))

(defun shen.split-cases (V7508 V7509 V7510) (cond ((and (cons? V7509) (and (cons? (hd V7509)) (and (cons? (hd (hd V7509))) (and (= and (hd (hd (hd V7509)))) (and (cons? (tl (hd (hd V7509)))) (and (cons? (tl (tl (hd (hd V7509))))) (and (= () (tl (tl (tl (hd (hd V7509)))))) (and (cons? (tl (hd V7509))) (and (= () (tl (tl (hd V7509)))) (= V7508 (hd (tl (hd (hd V7509)))))))))))))) (shen.split-cases (hd (tl (hd (hd V7509)))) (tl V7509) (cons (cons (hd (tl (tl (hd (hd V7509))))) (tl (hd V7509))) V7510))) ((and (cons? V7509) (and (cons? (hd V7509)) (and (cons? (tl (hd V7509))) (and (= () (tl (tl (hd V7509)))) (= V7508 (hd (hd V7509))))))) (shen.split-cases (hd (hd V7509)) (tl V7509) (cons (cons true (tl (hd V7509))) V7510))) (true (cons (reverse V7510) (cons V7509 ())))))

(defun shen.branch (V7511 V7512 V7513 V7514) (cond ((and (cons? V7513) (and (cons? (tl V7513)) (= () (tl (tl V7513))))) (let W7515 (shen.else V7512 (hd (tl V7513)) V7514) (let W7516 (shen.then V7511 V7512 (hd V7513) W7515) (cons if (cons V7511 (cons W7516 (cons W7515 ()))))))) (true (simple-error "partial function shen.branch"))))

(defun shen.else (V7517 V7518 V7519) (let W7520 (shen.vertical V7517 V7518 V7519) (if (shen.inline? W7520) W7520 (shen.procedure-call V7517 W7520))))

(defun shen.procedure-call (V7521 V7522) (let W7523 (gensym shen.else) (let W7524 (shen.remove-if-unused V7521 V7522) (let W7525 (cons defun (cons W7523 (cons W7524 (cons V7522 ())))) (let W7526 (eval-kl W7525) (let W7527 (shen.record-kl W7523 W7525) (cons W7523 W7524)))))))

(defun shen.remove-if-unused (V7534 V7535) (cond ((= () V7534) ()) ((cons? V7534) (if (shen.occurs? (hd V7534) V7535) (cons (hd V7534) (shen.remove-if-unused (tl V7534) V7535)) (shen.remove-if-unused (tl V7534) V7535))) (true (simple-error "implementation error in shen.remove-if-unused"))))

(defun shen.then (V7536 V7537 V7538 V7539) (shen.horizontal (shen.selectors V7536 V7538) V7537 V7538 V7539))

(defun shen.horizontal (V7548 V7549 V7550 V7551) (cond ((= () V7548) (shen.vertical V7549 V7550 V7551)) ((cons? V7548) (let W7552 (gensym V) (cons let (cons W7552 (cons (hd V7548) (cons (shen.horizontal (tl V7548) (cons W7552 V7549) (subst W7552 (hd V7548) V7550) V7551) ())))))) (true (simple-error "implementation error in shen.horizontal"))))

(defun shen.selectors (V7557 V7558) (cond ((and (cons? V7557) (and (cons? (tl V7557)) (and (= () (tl (tl V7557))) (shen.constructor? (shen.op (hd V7557)))))) (let W7559 (shen.op (hd V7557)) (let W7560 (cons (shen.op1 W7559) (tl V7557)) (let W7561 (cons (shen.op2 W7559) (tl V7557)) (let W7562 (shen.rpted? W7560 V7558) (let W7563 (shen.rpted? W7561 V7558) (if (and W7562 W7563) (cons W7560 (cons W7561 ())) (if W7562 (cons W7560 ()) (if W7563 (cons W7561 ()) ()))))))))) (true ())))

(defun shen.rpted? (V7564 V7565) (> (occurrences V7564 V7565) 1))

(defun shen.inline? (V7566) (cond ((cons? V7566) (and (atom? (hd V7566)) (shen.inline? (tl V7566)))) (true (atom? V7566))))

(defun shen.op (V7569) (cond ((= cons? V7569) cons) ((= shen.+string? V7569) @s) ((= shen.+vector? V7569) @v) ((= tuple? V7569) @p) (true shen.skip)))

