(defun shen.typecheck (V11357 V11358) (let W11359 (shen.extract-vars V11358) (let W11360 (shen.rectify-type V11358) (let W11361 (shen.curry V11357) (((((lambda Z11362 (lambda Z11363 (lambda Z11364 (lambda Z11365 (let W11366 (shen.newpv Z11362) (shen.gc Z11362 (do (shen.incinfs) (shen.insert-prolog-variables (receive (shen.deref W11359 Z11362)) (receive (shen.deref W11360 Z11362)) W11366 Z11362 Z11363 Z11364 (freeze (shen.toplevel-forms (receive (shen.deref W11361 Z11362)) W11366 Z11362 Z11363 Z11364 (freeze (return W11366 Z11362 Z11363 Z11364 Z11365)))))))))))) (shen.reset-prolog-vector)) (@v true (@v 0 (vector 0)))) 0) (freeze true))))))

(defun shen.insert-prolog-variables (V11367 V11368 V11369 V11370 V11371 V11372 V11373) (let W11374 (if (shen.unlocked? V11371) (let W11375 (shen.lazyderef V11367 V11370) (if (= W11375 ()) (do (shen.incinfs) (is! V11368 V11369 V11370 V11371 V11372 V11373)) false)) false) (if (= W11374 false) (if (shen.unlocked? V11371) (let W11376 (shen.lazyderef V11367 V11370) (if (cons? W11376) (let W11377 (hd W11376) (let W11378 (tl W11376) (let W11379 (shen.newpv V11370) (shen.gc V11370 (do (shen.incinfs) (shen.insert-prolog-variables W11378 (subst (shen.deref W11379 V11370) W11377 V11368) V11369 V11370 V11371 V11372 V11373)))))) false)) false) W11374)))

(defun shen.toplevel-forms (V11380 V11381 V11382 V11383 V11384 V11385) (let W11386 (+ V11384 1) (let W11387 (if (shen.unlocked? V11383) (let W11388 (shen.lazyderef V11380 V11382) (if (cons? W11388) (let W11389 (shen.lazyderef (hd W11388) V11382) (if (= W11389 define) (let W11390 (shen.lazyderef (tl W11388) V11382) (if (cons? W11390) (let W11391 (hd W11390) (let W11392 (tl W11390) (do (shen.incinfs) (when (shen.type-theory-enabled?) V11382 V11383 W11386 (freeze (shen.cut V11382 V11383 W11386 (freeze (shen.signal-def (value shen.*spy*) W11391 V11382 V11383 W11386 (freeze (shen.t* (cons define (cons W11391 W11392)) V11381 V11382 V11383 W11386 V11385)))))))))) false)) false)) false)) false) (if (= W11387 false) (let W11393 (if (shen.unlocked? V11383) (do (shen.incinfs) (shen.system-S (cons V11380 (cons (intern ":") (cons V11381 ()))) () V11382 V11383 W11386 V11385)) false) (if (= W11393 false) (shen.unlock V11383 W11386) W11393)) W11387))))

(defun shen.signal-def (V11394 V11395 V11396 V11397 V11398 V11399) (let W11400 (if (shen.unlocked? V11397) (let W11401 (shen.lazyderef V11394 V11396) (if (= W11401 false) (do (shen.incinfs) (thaw V11399)) false)) false) (if (= W11400 false) (if (shen.unlocked? V11397) (let W11402 (shen.lazyderef V11394 V11396) (if (= W11402 true) (let W11403 (shen.newpv V11396) (shen.gc V11396 (do (shen.incinfs) (is W11403 (pr (cn "
typechecking (fn " (shen.app (shen.deref V11395 V11396) ")
" shen.a)) (stoutput)) V11396 V11397 V11398 V11399)))) false)) false) W11400)))

(defun shen.rectify-type (V11404) (shen.demodulate (shen.curry-type V11404)))

(defun shen.demodulate (V11405) (trap-error (let W11406 (shen.walk (lambda Z11407 (shen.demod Z11407)) V11405) (if (= W11406 V11405) V11405 (shen.demodulate W11406))) (lambda Z11408 V11405)))

(defun shen.curry-type (V11409) (cond ((and (cons? V11409) (and (cons? (tl V11409)) (and (= --> (hd (tl V11409))) (and (cons? (tl (tl V11409))) (and (cons? (tl (tl (tl V11409)))) (= --> (hd (tl (tl (tl V11409)))))))))) (shen.curry-type (cons (hd V11409) (cons --> (cons (tl (tl V11409)) ()))))) ((and (cons? V11409) (and (cons? (hd V11409)) (and (= list (hd (hd V11409))) (and (cons? (tl (hd V11409))) (and (= () (tl (tl (hd V11409)))) (and (cons? (tl V11409)) (and (= ==> (hd (tl V11409))) (and (cons? (tl (tl V11409))) (= () (tl (tl (tl V11409)))))))))))) (shen.curry-type (cons (hd V11409) (cons --> (cons (cons str (cons (hd V11409) (tl (tl V11409)))) ()))))) ((and (cons? V11409) (and (cons? (tl V11409)) (and (= * (hd (tl V11409))) (and (cons? (tl (tl V11409))) (and (cons? (tl (tl (tl V11409)))) (= * (hd (tl (tl (tl V11409)))))))))) (shen.curry-type (cons (hd V11409) (cons * (cons (tl (tl V11409)) ()))))) ((cons? V11409) (map (lambda Z11410 (shen.curry-type Z11410)) V11409)) (true V11409)))

(defun shen.curry (V11411) (cond ((and (cons? V11411) (and (= define (hd V11411)) (cons? (tl V11411)))) V11411) ((and (cons? V11411) (and (= type (hd V11411)) (and (cons? (tl V11411)) (and (cons? (tl (tl V11411))) (= () (tl (tl (tl V11411)))))))) (cons type (cons (shen.curry (hd (tl V11411))) (tl (tl V11411))))) ((and (cons? V11411) (and (= input+ (hd V11411)) (and (cons? (tl V11411)) (and (cons? (tl (tl V11411))) (= () (tl (tl (tl V11411)))))))) (cons input+ (cons (hd (tl V11411)) (cons (shen.curry (hd (tl (tl V11411)))) ())))) ((and (cons? V11411) (shen.special? (hd V11411))) (cons (hd V11411) (map (lambda Z11412 (shen.curry Z11412)) (tl V11411)))) ((and (cons? V11411) (shen.extraspecial? (hd V11411))) V11411) ((and (cons? V11411) (and (cons? (tl V11411)) (cons? (tl (tl V11411))))) (shen.curry (cons (cons (hd V11411) (cons (hd (tl V11411)) ())) (tl (tl V11411))))) ((and (cons? V11411) (and (cons? (tl V11411)) (= () (tl (tl V11411))))) (cons (shen.curry (hd V11411)) (cons (shen.curry (hd (tl V11411))) ()))) (true V11411)))

(defun shen.special? (V11413) (element? V11413 (value shen.*special*)))

(defun shen.extraspecial? (V11414) (element? V11414 (value shen.*extraspecial*)))

(defun shen.system-S (V11415 V11416 V11417 V11418 V11419 V11420) (let W11421 (+ V11419 1) (let W11422 (if (shen.unlocked? V11418) (do (shen.incinfs) (when (shen.maxinfexceeded?) V11417 V11418 W11421 V11420)) false) (if (= W11422 false) (let W11423 (if (shen.unlocked? V11418) (let W11424 (shen.lazyderef V11415 V11417) (if (cons? W11424) (let W11425 (hd W11424) (let W11426 (shen.lazyderef (tl W11424) V11417) (if (cons? W11426) (let W11427 (hd W11426) (let W11428 (shen.lazyderef (tl W11426) V11417) (if (cons? W11428) (let W11429 (hd W11428) (let W11430 (shen.lazyderef (tl W11428) V11417) (if (= W11430 ()) (do (shen.incinfs) (when (= (shen.deref W11427 V11417) (intern ":")) V11417 V11418 W11421 (freeze (when (shen.type-theory-enabled?) V11417 V11418 W11421 (freeze (shen.cut V11417 V11418 W11421 (freeze (shen.system-S-h W11425 W11429 V11416 V11417 V11418 W11421 V11420)))))))) false))) false))) false))) false)) false) (if (= W11423 false) (let W11431 (if (shen.unlocked? V11418) (do (shen.incinfs) (when (value shen.*spy*) V11417 V11418 W11421 (freeze (shen.show V11415 V11416 V11417 V11418 W11421 V11420)))) false) (if (= W11431 false) (let W11432 (if (shen.unlocked? V11418) (do (shen.incinfs) (shen.search-user-datatypes V11415 V11416 (value shen.*datatypes*) V11417 V11418 W11421 V11420)) false) (if (= W11432 false) (shen.unlock V11418 W11421) W11432)) W11431)) W11423)) W11422))))

(defun shen.show (V11439 V11440 V11441 V11442 V11443 V11444) (do (shen.line) (do (shen.show-p (shen.deref V11439 V11441)) (do (nl 2) (do (shen.show-assumptions (shen.deref V11440 V11441) 1) (do (shen.pause-for-user) false))))))

(defun shen.line () (let W11445 (inferences) (pr (cn "____________________________________________________________ " (shen.app W11445 (cn " inference" (shen.app (if (= 1 W11445) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))

(defun shen.show-p (V11446) (cond ((and (cons? V11446) (and (cons? (tl V11446)) (and (cons? (tl (tl V11446))) (and (= () (tl (tl (tl V11446)))) (= (hd (tl V11446)) (intern ":")))))) (do (shen.prterm (hd V11446)) (do (pr " : " (stoutput)) (pr (shen.app (hd (tl (tl V11446))) "" shen.r) (stoutput))))) (true (shen.prterm V11446))))

(defun shen.prterm (V11447) (cond ((and (cons? V11447) (and (= cons (hd V11447)) (and (cons? (tl V11447)) (and (cons? (tl (tl V11447))) (= () (tl (tl (tl V11447)))))))) (do (pr "[" (stoutput)) (do (shen.prterm (hd (tl V11447))) (do (shen.prtl (hd (tl (tl V11447)))) (pr "]" (stoutput)))))) ((cons? V11447) (do (pr "(" (stoutput)) (do (shen.prterm (hd V11447)) (do (map (lambda Z11448 (do (pr " " (stoutput)) (shen.prterm Z11448))) (tl V11447)) (pr ")" (stoutput)))))) (true (print V11447))))

(defun shen.prtl (V11449) (cond ((= () V11449) "") ((and (cons? V11449) (and (= cons (hd V11449)) (and (cons? (tl V11449)) (and (cons? (tl (tl V11449))) (= () (tl (tl (tl V11449)))))))) (do (pr " " (stoutput)) (do (shen.prterm (hd (tl V11449))) (shen.prtl (hd (tl (tl V11449))))))) (true (do (pr " | " (stoutput)) (shen.prterm V11449)))))

(defun shen.show-assumptions (V11456 V11457) (cond ((= () V11456) (pr "
> " (stoutput))) ((cons? V11456) (do (pr (shen.app V11457 ". " shen.a) (stoutput)) (do (shen.show-p (hd V11456)) (do (nl 1) (shen.show-assumptions (tl V11456) (+ V11457 1)))))) (true (simple-error "implementation error in shen.show-assumptions"))))

(defun shen.pause-for-user () (let W11458 (read-byte (stinput)) (if (= W11458 94) (simple-error "input aborted
") (nl 1))))

(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))

(defun shen.maxinfexceeded? () (if (> (inferences) (value shen.*maxinferences*)) (simple-error "maximum inferences exceeded") false))

(defun shen.system-S-h (V11459 V11460 V11461 V11462 V11463 V11464 V11465) (let W11466 (+ V11464 1) (let W11467 (if (shen.unlocked? V11463) (do (shen.incinfs) (when (value shen.*spy*) V11462 V11463 W11466 (freeze (shen.show (cons V11459 (cons (intern ":") (cons V11460 ()))) V11461 V11462 V11463 W11466 V11465)))) false) (if (= W11467 false) (let W11468 (if (shen.unlocked? V11463) (do (shen.incinfs) (when (not (cons? (shen.lazyderef V11459 V11462))) V11462 V11463 W11466 (freeze (shen.primitive V11459 V11460 V11462 V11463 W11466 V11465)))) false) (if (= W11468 false) (let W11469 (if (shen.unlocked? V11463) (do (shen.incinfs) (shen.by-hypothesis V11459 V11460 V11461 V11462 V11463 W11466 V11465)) false) (if (= W11469 false) (let W11470 (if (shen.unlocked? V11463) (let W11471 (shen.lazyderef V11459 V11462) (if (cons? W11471) (let W11472 (hd W11471) (let W11473 (shen.lazyderef (tl W11471) V11462) (if (= W11473 ()) (do (shen.incinfs) (shen.lookupsig W11472 (cons --> (cons V11460 ())) V11462 V11463 W11466 V11465)) false))) false)) false) (if (= W11470 false) (let W11474 (if (shen.unlocked? V11463) (let W11475 (shen.lazyderef V11459 V11462) (if (cons? W11475) (let W11476 (shen.lazyderef (hd W11475) V11462) (if (= W11476 fn) (let W11477 (shen.lazyderef (tl W11475) V11462) (if (cons? W11477) (let W11478 (hd W11477) (let W11479 (shen.lazyderef (tl W11477) V11462) (if (= W11479 ()) (do (shen.incinfs) (shen.lookupsig W11478 V11460 V11462 V11463 W11466 V11465)) false))) false)) false)) false)) false) (if (= W11474 false) (let W11480 (if (shen.unlocked? V11463) (let W11481 (shen.lazyderef V11459 V11462) (if (cons? W11481) (let W11482 (hd W11481) (let W11483 (shen.lazyderef (tl W11481) V11462) (if (cons? W11483) (let W11484 (hd W11483) (let W11485 (shen.lazyderef (tl W11483) V11462) (if (= W11485 ()) (let W11486 (shen.newpv V11462) (shen.gc V11462 (do (shen.incinfs) (when (not (cons? (shen.lazyderef W11482 V11462))) V11462 V11463 W11466 (freeze (shen.lookupsig W11482 (cons W11486 (cons --> (cons V11460 ()))) V11462 V11463 W11466 (freeze (shen.system-S-h W11484 W11486 V11461 V11462 V11463 W11466 V11465)))))))) false))) false))) false)) false) (if (= W11480 false) (let W11487 (if (shen.unlocked? V11463) (let W11488 (shen.lazyderef V11459 V11462) (if (cons? W11488) (let W11489 (hd W11488) (let W11490 (shen.lazyderef (tl W11488) V11462) (if (cons? W11490) (let W11491 (hd W11490) (let W11492 (shen.lazyderef (tl W11490) V11462) (if (= W11492 ()) (let W11493 (shen.newpv V11462) (shen.gc V11462 (do (shen.incinfs) (shen.system-S-h W11489 (cons W11493 (cons --> (cons V11460 ()))) V11461 V11462 V11463 W11466 (freeze (shen.system-S-h W11491 W11493 V11461 V11462 V11463 W11466 V11465)))))) false))) false))) false)) false) (if (= W11487 false) (let W11494 (if (shen.unlocked? V11463) (let W11495 (shen.lazyderef V11459 V11462) (if (cons? W11495) (let W11496 (shen.lazyderef (hd W11495) V11462) (if (= W11496 cons) (let W11497 (shen.lazyderef (tl W11495) V11462) (if (cons? W11497) (let W11498 (hd W11497) (let W11499 (shen.lazyderef (tl W11497) V11462) (if (cons? W11499) (let W11500 (hd W11499) (let W11501 (shen.lazyderef (tl W11499) V11462) (if (= W11501 ()) (let W11502 (shen.lazyderef V11460 V11462) (let W11503 (lambda Z11504 (do (shen.incinfs) (shen.system-S-h W11498 Z11504 V11461 V11462 V11463 W11466 (freeze (shen.system-S-h W11500 (cons list (cons Z11504 ())) V11461 V11462 V11463 W11466 V11465))))) (if (cons? W11502) (let W11505 (shen.lazyderef (hd W11502) V11462) (let W11506 (freeze (let W11507 (shen.lazyderef (tl W11502) V11462) (let W11508 (lambda Z11509 (W11503 Z11509)) (if (cons? W11507) (let W11510 (hd W11507) (let W11511 (shen.lazyderef (tl W11507) V11462) (let W11512 (freeze (W11508 W11510)) (if (= W11511 ()) (thaw W11512) (if (shen.pvar? W11511) (shen.bind! W11511 () V11462 W11512) false))))) (if (shen.pvar? W11507) (let W11513 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11507 (cons W11513 ()) V11462 (freeze (W11508 W11513))))) false))))) (if (= W11505 list) (thaw W11506) (if (shen.pvar? W11505) (shen.bind! W11505 list V11462 W11506) false)))) (if (shen.pvar? W11502) (let W11514 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11502 (cons list (cons W11514 ())) V11462 (freeze (W11503 W11514))))) false)))) false))) false))) false)) false)) false)) false) (if (= W11494 false) (let W11515 (if (shen.unlocked? V11463) (let W11516 (shen.lazyderef V11459 V11462) (if (cons? W11516) (let W11517 (shen.lazyderef (hd W11516) V11462) (if (= W11517 @p) (let W11518 (shen.lazyderef (tl W11516) V11462) (if (cons? W11518) (let W11519 (hd W11518) (let W11520 (shen.lazyderef (tl W11518) V11462) (if (cons? W11520) (let W11521 (hd W11520) (let W11522 (shen.lazyderef (tl W11520) V11462) (if (= W11522 ()) (let W11523 (shen.lazyderef V11460 V11462) (let W11524 (lambda Z11525 (lambda Z11526 (do (shen.incinfs) (shen.system-S-h W11519 Z11525 V11461 V11462 V11463 W11466 (freeze (shen.system-S-h W11521 Z11526 V11461 V11462 V11463 W11466 V11465)))))) (if (cons? W11523) (let W11527 (hd W11523) (let W11528 (shen.lazyderef (tl W11523) V11462) (let W11529 (lambda Z11530 ((W11524 W11527) Z11530)) (if (cons? W11528) (let W11531 (shen.lazyderef (hd W11528) V11462) (let W11532 (freeze (let W11533 (shen.lazyderef (tl W11528) V11462) (let W11534 (lambda Z11535 (W11529 Z11535)) (if (cons? W11533) (let W11536 (hd W11533) (let W11537 (shen.lazyderef (tl W11533) V11462) (let W11538 (freeze (W11534 W11536)) (if (= W11537 ()) (thaw W11538) (if (shen.pvar? W11537) (shen.bind! W11537 () V11462 W11538) false))))) (if (shen.pvar? W11533) (let W11539 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11533 (cons W11539 ()) V11462 (freeze (W11534 W11539))))) false))))) (if (= W11531 *) (thaw W11532) (if (shen.pvar? W11531) (shen.bind! W11531 * V11462 W11532) false)))) (if (shen.pvar? W11528) (let W11540 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11528 (cons * (cons W11540 ())) V11462 (freeze (W11529 W11540))))) false))))) (if (shen.pvar? W11523) (let W11541 (shen.newpv V11462) (shen.gc V11462 (let W11542 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11523 (cons W11541 (cons * (cons W11542 ()))) V11462 (freeze ((W11524 W11541) W11542))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W11515 false) (let W11543 (if (shen.unlocked? V11463) (let W11544 (shen.lazyderef V11459 V11462) (if (cons? W11544) (let W11545 (shen.lazyderef (hd W11544) V11462) (if (= W11545 @v) (let W11546 (shen.lazyderef (tl W11544) V11462) (if (cons? W11546) (let W11547 (hd W11546) (let W11548 (shen.lazyderef (tl W11546) V11462) (if (cons? W11548) (let W11549 (hd W11548) (let W11550 (shen.lazyderef (tl W11548) V11462) (if (= W11550 ()) (let W11551 (shen.lazyderef V11460 V11462) (let W11552 (lambda Z11553 (do (shen.incinfs) (shen.system-S-h W11547 Z11553 V11461 V11462 V11463 W11466 (freeze (shen.system-S-h W11549 (cons vector (cons Z11553 ())) V11461 V11462 V11463 W11466 V11465))))) (if (cons? W11551) (let W11554 (shen.lazyderef (hd W11551) V11462) (let W11555 (freeze (let W11556 (shen.lazyderef (tl W11551) V11462) (let W11557 (lambda Z11558 (W11552 Z11558)) (if (cons? W11556) (let W11559 (hd W11556) (let W11560 (shen.lazyderef (tl W11556) V11462) (let W11561 (freeze (W11557 W11559)) (if (= W11560 ()) (thaw W11561) (if (shen.pvar? W11560) (shen.bind! W11560 () V11462 W11561) false))))) (if (shen.pvar? W11556) (let W11562 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11556 (cons W11562 ()) V11462 (freeze (W11557 W11562))))) false))))) (if (= W11554 vector) (thaw W11555) (if (shen.pvar? W11554) (shen.bind! W11554 vector V11462 W11555) false)))) (if (shen.pvar? W11551) (let W11563 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11551 (cons vector (cons W11563 ())) V11462 (freeze (W11552 W11563))))) false)))) false))) false))) false)) false)) false)) false) (if (= W11543 false) (let W11564 (if (shen.unlocked? V11463) (let W11565 (shen.lazyderef V11459 V11462) (if (cons? W11565) (let W11566 (shen.lazyderef (hd W11565) V11462) (if (= W11566 @s) (let W11567 (shen.lazyderef (tl W11565) V11462) (if (cons? W11567) (let W11568 (hd W11567) (let W11569 (shen.lazyderef (tl W11567) V11462) (if (cons? W11569) (let W11570 (hd W11569) (let W11571 (shen.lazyderef (tl W11569) V11462) (if (= W11571 ()) (let W11572 (shen.lazyderef V11460 V11462) (let W11573 (freeze (do (shen.incinfs) (shen.system-S-h W11568 string V11461 V11462 V11463 W11466 (freeze (shen.system-S-h W11570 string V11461 V11462 V11463 W11466 V11465))))) (if (= W11572 string) (thaw W11573) (if (shen.pvar? W11572) (shen.bind! W11572 string V11462 W11573) false)))) false))) false))) false)) false)) false)) false) (if (= W11564 false) (let W11574 (if (shen.unlocked? V11463) (let W11575 (shen.lazyderef V11459 V11462) (if (cons? W11575) (let W11576 (shen.lazyderef (hd W11575) V11462) (if (= W11576 lambda) (let W11577 (shen.lazyderef (tl W11575) V11462) (if (cons? W11577) (let W11578 (hd W11577) (let W11579 (shen.lazyderef (tl W11577) V11462) (if (cons? W11579) (let W11580 (hd W11579) (let W11581 (shen.lazyderef (tl W11579) V11462) (if (= W11581 ()) (let W11582 (shen.lazyderef V11460 V11462) (let W11583 (lambda Z11584 (lambda Z11585 (let W11586 (shen.newpv V11462) (shen.gc V11462 (let W11587 (shen.newpv V11462) (shen.gc V11462 (do (shen.incinfs) (bind W11587 (shen.freshterm (shen.lazyderef W11578 V11462)) V11462 V11463 W11466 (freeze (bind W11586 (shen.beta (shen.lazyderef W11578 V11462) (shen.deref W11587 V11462) (shen.deref W11580 V11462)) V11462 V11463 W11466 (freeze (shen.system-S-h W11586 Z11585 (cons (cons W11587 (cons (intern ":") (cons Z11584 ()))) V11461) V11462 V11463 W11466 V11465)))))))))))) (if (cons? W11582) (let W11588 (hd W11582) (let W11589 (shen.lazyderef (tl W11582) V11462) (let W11590 (lambda Z11591 ((W11583 W11588) Z11591)) (if (cons? W11589) (let W11592 (shen.lazyderef (hd W11589) V11462) (let W11593 (freeze (let W11594 (shen.lazyderef (tl W11589) V11462) (let W11595 (lambda Z11596 (W11590 Z11596)) (if (cons? W11594) (let W11597 (hd W11594) (let W11598 (shen.lazyderef (tl W11594) V11462) (let W11599 (freeze (W11595 W11597)) (if (= W11598 ()) (thaw W11599) (if (shen.pvar? W11598) (shen.bind! W11598 () V11462 W11599) false))))) (if (shen.pvar? W11594) (let W11600 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11594 (cons W11600 ()) V11462 (freeze (W11595 W11600))))) false))))) (if (= W11592 -->) (thaw W11593) (if (shen.pvar? W11592) (shen.bind! W11592 --> V11462 W11593) false)))) (if (shen.pvar? W11589) (let W11601 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11589 (cons --> (cons W11601 ())) V11462 (freeze (W11590 W11601))))) false))))) (if (shen.pvar? W11582) (let W11602 (shen.newpv V11462) (shen.gc V11462 (let W11603 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11582 (cons W11602 (cons --> (cons W11603 ()))) V11462 (freeze ((W11583 W11602) W11603))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W11574 false) (let W11604 (if (shen.unlocked? V11463) (let W11605 (shen.lazyderef V11459 V11462) (if (cons? W11605) (let W11606 (shen.lazyderef (hd W11605) V11462) (if (= W11606 let) (let W11607 (shen.lazyderef (tl W11605) V11462) (if (cons? W11607) (let W11608 (hd W11607) (let W11609 (shen.lazyderef (tl W11607) V11462) (if (cons? W11609) (let W11610 (hd W11609) (let W11611 (shen.lazyderef (tl W11609) V11462) (if (cons? W11611) (let W11612 (hd W11611) (let W11613 (shen.lazyderef (tl W11611) V11462) (if (= W11613 ()) (let W11614 (shen.newpv V11462) (shen.gc V11462 (let W11615 (shen.newpv V11462) (shen.gc V11462 (let W11616 (shen.newpv V11462) (shen.gc V11462 (do (shen.incinfs) (shen.system-S-h W11610 W11616 V11461 V11462 V11463 W11466 (freeze (bind W11615 (shen.freshterm (shen.lazyderef W11608 V11462)) V11462 V11463 W11466 (freeze (bind W11614 (shen.beta (shen.lazyderef W11608 V11462) (shen.lazyderef W11615 V11462) (shen.lazyderef W11612 V11462)) V11462 V11463 W11466 (freeze (shen.system-S-h W11614 V11460 (cons (cons W11615 (cons (intern ":") (cons W11616 ()))) V11461) V11462 V11463 W11466 V11465)))))))))))))) false))) false))) false))) false)) false)) false)) false) (if (= W11604 false) (let W11617 (if (shen.unlocked? V11463) (let W11618 (shen.lazyderef V11459 V11462) (if (cons? W11618) (let W11619 (shen.lazyderef (hd W11618) V11462) (if (= W11619 open) (let W11620 (shen.lazyderef (tl W11618) V11462) (if (cons? W11620) (let W11621 (hd W11620) (let W11622 (shen.lazyderef (tl W11620) V11462) (if (cons? W11622) (let W11623 (hd W11622) (let W11624 (shen.lazyderef (tl W11622) V11462) (if (= W11624 ()) (let W11625 (shen.lazyderef V11460 V11462) (let W11626 (lambda Z11627 (do (shen.incinfs) (is! W11623 Z11627 V11462 V11463 W11466 (freeze (when (element? (shen.lazyderef Z11627 V11462) (cons in (cons out ()))) V11462 V11463 W11466 (freeze (shen.system-S-h W11621 string V11461 V11462 V11463 W11466 V11465))))))) (if (cons? W11625) (let W11628 (shen.lazyderef (hd W11625) V11462) (let W11629 (freeze (let W11630 (shen.lazyderef (tl W11625) V11462) (let W11631 (lambda Z11632 (W11626 Z11632)) (if (cons? W11630) (let W11633 (hd W11630) (let W11634 (shen.lazyderef (tl W11630) V11462) (let W11635 (freeze (W11631 W11633)) (if (= W11634 ()) (thaw W11635) (if (shen.pvar? W11634) (shen.bind! W11634 () V11462 W11635) false))))) (if (shen.pvar? W11630) (let W11636 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11630 (cons W11636 ()) V11462 (freeze (W11631 W11636))))) false))))) (if (= W11628 stream) (thaw W11629) (if (shen.pvar? W11628) (shen.bind! W11628 stream V11462 W11629) false)))) (if (shen.pvar? W11625) (let W11637 (shen.newpv V11462) (shen.gc V11462 (shen.bind! W11625 (cons stream (cons W11637 ())) V11462 (freeze (W11626 W11637))))) false)))) false))) false))) false)) false)) false)) false) (if (= W11617 false) (let W11638 (if (shen.unlocked? V11463) (let W11639 (shen.lazyderef V11459 V11462) (if (cons? W11639) (let W11640 (shen.lazyderef (hd W11639) V11462) (if (= W11640 type) (let W11641 (shen.lazyderef (tl W11639) V11462) (if (cons? W11641) (let W11642 (hd W11641) (let W11643 (shen.lazyderef (tl W11641) V11462) (if (cons? W11643) (let W11644 (hd W11643) (let W11645 (shen.lazyderef (tl W11643) V11462) (if (= W11645 ()) (do (shen.incinfs) (shen.cut V11462 V11463 W11466 (freeze (is! (shen.rectify-type (shen.deref W11644 V11462)) V11460 V11462 V11463 W11466 (freeze (shen.system-S-h W11642 V11460 V11461 V11462 V11463 W11466 V11465)))))) false))) false))) false)) false)) false)) false) (if (= W11638 false) (let W11646 (if (shen.unlocked? V11463) (let W11647 (shen.lazyderef V11459 V11462) (if (cons? W11647) (let W11648 (shen.lazyderef (hd W11647) V11462) (if (= W11648 input+) (let W11649 (shen.lazyderef (tl W11647) V11462) (if (cons? W11649) (let W11650 (hd W11649) (let W11651 (shen.lazyderef (tl W11649) V11462) (if (cons? W11651) (let W11652 (hd W11651) (let W11653 (shen.lazyderef (tl W11651) V11462) (if (= W11653 ()) (do (shen.incinfs) (is! V11460 (shen.rectify-type (shen.deref W11650 V11462)) V11462 V11463 W11466 (freeze (shen.system-S-h W11652 (cons stream (cons in ())) V11461 V11462 V11463 W11466 V11465)))) false))) false))) false)) false)) false)) false) (if (= W11646 false) (let W11654 (if (shen.unlocked? V11463) (let W11655 (shen.lazyderef V11459 V11462) (if (cons? W11655) (let W11656 (shen.lazyderef (hd W11655) V11462) (if (= W11656 set) (let W11657 (shen.lazyderef (tl W11655) V11462) (if (cons? W11657) (let W11658 (hd W11657) (let W11659 (shen.lazyderef (tl W11657) V11462) (if (cons? W11659) (let W11660 (hd W11659) (let W11661 (shen.lazyderef (tl W11659) V11462) (if (= W11661 ()) (do (shen.incinfs) (shen.system-S-h W11658 symbol V11461 V11462 V11463 W11466 (freeze (shen.system-S-h (cons value (cons W11658 ())) V11460 V11461 V11462 V11463 W11466 (freeze (shen.system-S-h W11660 V11460 V11461 V11462 V11463 W11466 V11465)))))) false))) false))) false)) false)) false)) false) (if (= W11654 false) (let W11662 (if (shen.unlocked? V11463) (let W11663 (shen.newpv V11462) (shen.gc V11462 (do (shen.incinfs) (shen.l-rules V11461 W11663 false V11462 V11463 W11466 (freeze (shen.cut V11462 V11463 W11466 (freeze (shen.system-S-h V11459 V11460 W11663 V11462 V11463 W11466 V11465)))))))) false) (if (= W11662 false) (let W11664 (if (shen.unlocked? V11463) (do (shen.incinfs) (shen.search-user-datatypes (cons V11459 (cons (intern ":") (cons V11460 ()))) V11461 (value shen.*datatypes*) V11462 V11463 W11466 V11465)) false) (if (= W11664 false) (shen.unlock V11463 W11466) W11664)) W11662)) W11654)) W11646)) W11638)) W11617)) W11604)) W11574)) W11564)) W11543)) W11515)) W11494)) W11487)) W11480)) W11474)) W11470)) W11469)) W11468)) W11467))))

(defun shen.primitive (V11665 V11666 V11667 V11668 V11669 V11670) (let W11671 (if (shen.unlocked? V11668) (let W11672 (shen.lazyderef V11666 V11667) (let W11673 (freeze (do (shen.incinfs) (when (number? (shen.lazyderef V11665 V11667)) V11667 V11668 V11669 V11670))) (if (= W11672 number) (thaw W11673) (if (shen.pvar? W11672) (shen.bind! W11672 number V11667 W11673) false)))) false) (if (= W11671 false) (let W11674 (if (shen.unlocked? V11668) (let W11675 (shen.lazyderef V11666 V11667) (let W11676 (freeze (do (shen.incinfs) (when (boolean? (shen.lazyderef V11665 V11667)) V11667 V11668 V11669 V11670))) (if (= W11675 boolean) (thaw W11676) (if (shen.pvar? W11675) (shen.bind! W11675 boolean V11667 W11676) false)))) false) (if (= W11674 false) (let W11677 (if (shen.unlocked? V11668) (let W11678 (shen.lazyderef V11666 V11667) (let W11679 (freeze (do (shen.incinfs) (when (string? (shen.lazyderef V11665 V11667)) V11667 V11668 V11669 V11670))) (if (= W11678 string) (thaw W11679) (if (shen.pvar? W11678) (shen.bind! W11678 string V11667 W11679) false)))) false) (if (= W11677 false) (let W11680 (if (shen.unlocked? V11668) (let W11681 (shen.lazyderef V11666 V11667) (let W11682 (freeze (do (shen.incinfs) (when (symbol? (shen.lazyderef V11665 V11667)) V11667 V11668 V11669 V11670))) (if (= W11681 symbol) (thaw W11682) (if (shen.pvar? W11681) (shen.bind! W11681 symbol V11667 W11682) false)))) false) (if (= W11680 false) (if (shen.unlocked? V11668) (let W11683 (shen.lazyderef V11665 V11667) (if (= W11683 ()) (let W11684 (shen.lazyderef V11666 V11667) (let W11685 (lambda Z11686 (do (shen.incinfs) (thaw V11670))) (if (cons? W11684) (let W11687 (shen.lazyderef (hd W11684) V11667) (let W11688 (freeze (let W11689 (shen.lazyderef (tl W11684) V11667) (let W11690 (lambda Z11691 (W11685 Z11691)) (if (cons? W11689) (let W11692 (hd W11689) (let W11693 (shen.lazyderef (tl W11689) V11667) (let W11694 (freeze (W11690 W11692)) (if (= W11693 ()) (thaw W11694) (if (shen.pvar? W11693) (shen.bind! W11693 () V11667 W11694) false))))) (if (shen.pvar? W11689) (let W11695 (shen.newpv V11667) (shen.gc V11667 (shen.bind! W11689 (cons W11695 ()) V11667 (freeze (W11690 W11695))))) false))))) (if (= W11687 list) (thaw W11688) (if (shen.pvar? W11687) (shen.bind! W11687 list V11667 W11688) false)))) (if (shen.pvar? W11684) (let W11696 (shen.newpv V11667) (shen.gc V11667 (shen.bind! W11684 (cons list (cons W11696 ())) V11667 (freeze (W11685 W11696))))) false)))) false)) false) W11680)) W11677)) W11674)) W11671)))

(defun shen.by-hypothesis (V11697 V11698 V11699 V11700 V11701 V11702 V11703) (let W11704 (if (shen.unlocked? V11701) (let W11705 (shen.lazyderef V11699 V11700) (if (cons? W11705) (let W11706 (shen.lazyderef (hd W11705) V11700) (if (cons? W11706) (let W11707 (hd W11706) (let W11708 (shen.lazyderef (tl W11706) V11700) (if (cons? W11708) (let W11709 (hd W11708) (let W11710 (shen.lazyderef (tl W11708) V11700) (if (cons? W11710) (let W11711 (hd W11710) (let W11712 (shen.lazyderef (tl W11710) V11700) (if (= W11712 ()) (do (shen.incinfs) (when (= (shen.deref W11709 V11700) (intern ":")) V11700 V11701 V11702 (freeze (when (= (shen.deref V11697 V11700) (shen.deref W11707 V11700)) V11700 V11701 V11702 (freeze (is! V11698 W11711 V11700 V11701 V11702 V11703)))))) false))) false))) false))) false)) false)) false) (if (= W11704 false) (if (shen.unlocked? V11701) (let W11713 (shen.lazyderef V11699 V11700) (if (cons? W11713) (let W11714 (tl W11713) (do (shen.incinfs) (shen.by-hypothesis V11697 V11698 W11714 V11700 V11701 V11702 V11703))) false)) false) W11704)))

(defun shen.lookupsig (V11715 V11716 V11717 V11718 V11719 V11720) (if (shen.unlocked? V11718) (do (shen.incinfs) (shen.sigf (assoc V11715 (value shen.*sigf*)) V11716 V11717 V11718 V11719 V11720)) false))

(defun shen.sigf (V11735 V11736 V11737 V11738 V11739 V11740) (cond ((cons? V11735) ((((((tl V11735) V11736) V11737) V11738) V11739) V11740)) (true false)))

(defun shen.freshterm (V11741) (let W11742 (absvector 3) (let W11743 (address-> W11742 0 shen.print-freshterm) (let W11744 (address-> W11743 1 V11741) (let W11745 (address-> W11744 2 (set shen.*gensym* (+ 1 (value shen.*gensym*)))) W11745)))))

(defun shen.print-freshterm (V11746) (cn "&&" (str (<-address V11746 1))))

(defun shen.search-user-datatypes (V11747 V11748 V11749 V11750 V11751 V11752 V11753) (let W11754 (if (shen.unlocked? V11751) (let W11755 (shen.lazyderef V11749 V11750) (if (cons? W11755) (let W11756 (shen.lazyderef (hd W11755) V11750) (if (cons? W11756) (let W11757 (tl W11756) (do (shen.incinfs) (call (((shen.deref W11757 V11750) (shen.deref V11747 V11750)) (shen.deref V11748 V11750)) V11750 V11751 V11752 V11753))) false)) false)) false) (if (= W11754 false) (if (shen.unlocked? V11751) (let W11758 (shen.lazyderef V11749 V11750) (if (cons? W11758) (let W11759 (tl W11758) (do (shen.incinfs) (shen.search-user-datatypes V11747 V11748 W11759 V11750 V11751 V11752 V11753))) false)) false) W11754)))

(defun shen.l-rules (V11760 V11761 V11762 V11763 V11764 V11765 V11766) (let W11767 (+ V11765 1) (let W11768 (if (shen.unlocked? V11764) (let W11769 (shen.lazyderef V11760 V11763) (if (= W11769 ()) (let W11770 (shen.lazyderef V11762 V11763) (if (= W11770 true) (do (shen.incinfs) (shen.cut V11763 V11764 W11767 (freeze (bind V11761 () V11763 V11764 W11767 V11766)))) false)) false)) false) (if (= W11768 false) (let W11771 (if (shen.unlocked? V11764) (let W11772 (shen.lazyderef V11760 V11763) (if (cons? W11772) (let W11773 (shen.lazyderef (hd W11772) V11763) (if (cons? W11773) (let W11774 (shen.lazyderef (hd W11773) V11763) (if (cons? W11774) (let W11775 (shen.lazyderef (hd W11774) V11763) (if (= W11775 cons) (let W11776 (shen.lazyderef (tl W11774) V11763) (if (cons? W11776) (let W11777 (hd W11776) (let W11778 (shen.lazyderef (tl W11776) V11763) (if (cons? W11778) (let W11779 (hd W11778) (let W11780 (shen.lazyderef (tl W11778) V11763) (if (= W11780 ()) (let W11781 (shen.lazyderef (tl W11773) V11763) (if (cons? W11781) (let W11782 (hd W11781) (let W11783 (shen.lazyderef (tl W11781) V11763) (if (cons? W11783) (let W11784 (shen.lazyderef (hd W11783) V11763) (if (cons? W11784) (let W11785 (shen.lazyderef (hd W11784) V11763) (if (= W11785 list) (let W11786 (shen.lazyderef (tl W11784) V11763) (if (cons? W11786) (let W11787 (hd W11786) (let W11788 (shen.lazyderef (tl W11786) V11763) (if (= W11788 ()) (let W11789 (shen.lazyderef (tl W11783) V11763) (if (= W11789 ()) (let W11790 (tl W11772) (do (shen.incinfs) (when (= (shen.deref W11782 V11763) (intern ":")) V11763 V11764 W11767 (freeze (shen.cut V11763 V11764 W11767 (freeze (shen.l-rules (cons (cons W11777 (cons W11782 (cons W11787 ()))) (cons (cons W11779 (cons W11782 (cons (cons list (cons W11787 ())) ()))) W11790)) V11761 true V11763 V11764 W11767 V11766))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W11771 false) (let W11791 (if (shen.unlocked? V11764) (let W11792 (shen.lazyderef V11760 V11763) (if (cons? W11792) (let W11793 (shen.lazyderef (hd W11792) V11763) (if (cons? W11793) (let W11794 (shen.lazyderef (hd W11793) V11763) (if (cons? W11794) (let W11795 (shen.lazyderef (hd W11794) V11763) (if (= W11795 @p) (let W11796 (shen.lazyderef (tl W11794) V11763) (if (cons? W11796) (let W11797 (hd W11796) (let W11798 (shen.lazyderef (tl W11796) V11763) (if (cons? W11798) (let W11799 (hd W11798) (let W11800 (shen.lazyderef (tl W11798) V11763) (if (= W11800 ()) (let W11801 (shen.lazyderef (tl W11793) V11763) (if (cons? W11801) (let W11802 (hd W11801) (let W11803 (shen.lazyderef (tl W11801) V11763) (if (cons? W11803) (let W11804 (shen.lazyderef (hd W11803) V11763) (if (cons? W11804) (let W11805 (hd W11804) (let W11806 (shen.lazyderef (tl W11804) V11763) (if (cons? W11806) (let W11807 (shen.lazyderef (hd W11806) V11763) (if (= W11807 *) (let W11808 (shen.lazyderef (tl W11806) V11763) (if (cons? W11808) (let W11809 (hd W11808) (let W11810 (shen.lazyderef (tl W11808) V11763) (if (= W11810 ()) (let W11811 (shen.lazyderef (tl W11803) V11763) (if (= W11811 ()) (let W11812 (tl W11792) (do (shen.incinfs) (when (= (shen.deref W11802 V11763) (intern ":")) V11763 V11764 W11767 (freeze (shen.cut V11763 V11764 W11767 (freeze (shen.l-rules (cons (cons W11797 (cons W11802 (cons W11805 ()))) (cons (cons W11799 (cons W11802 (cons W11809 ()))) W11812)) V11761 true V11763 V11764 W11767 V11766))))))) false)) false))) false)) false)) false))) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W11791 false) (let W11813 (if (shen.unlocked? V11764) (let W11814 (shen.lazyderef V11760 V11763) (if (cons? W11814) (let W11815 (shen.lazyderef (hd W11814) V11763) (if (cons? W11815) (let W11816 (shen.lazyderef (hd W11815) V11763) (if (cons? W11816) (let W11817 (shen.lazyderef (hd W11816) V11763) (if (= W11817 @s) (let W11818 (shen.lazyderef (tl W11816) V11763) (if (cons? W11818) (let W11819 (hd W11818) (let W11820 (shen.lazyderef (tl W11818) V11763) (if (cons? W11820) (let W11821 (hd W11820) (let W11822 (shen.lazyderef (tl W11820) V11763) (if (= W11822 ()) (let W11823 (shen.lazyderef (tl W11815) V11763) (if (cons? W11823) (let W11824 (hd W11823) (let W11825 (shen.lazyderef (tl W11823) V11763) (if (cons? W11825) (let W11826 (shen.lazyderef (hd W11825) V11763) (if (= W11826 string) (let W11827 (shen.lazyderef (tl W11825) V11763) (if (= W11827 ()) (let W11828 (tl W11814) (do (shen.incinfs) (when (= (shen.deref W11824 V11763) (intern ":")) V11763 V11764 W11767 (freeze (shen.cut V11763 V11764 W11767 (freeze (shen.l-rules (cons (cons W11819 (cons W11824 (cons string ()))) (cons (cons W11821 (cons W11824 (cons string ()))) W11828)) V11761 true V11763 V11764 W11767 V11766))))))) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W11813 false) (let W11829 (if (shen.unlocked? V11764) (let W11830 (shen.lazyderef V11760 V11763) (if (cons? W11830) (let W11831 (shen.lazyderef (hd W11830) V11763) (if (cons? W11831) (let W11832 (shen.lazyderef (hd W11831) V11763) (if (cons? W11832) (let W11833 (shen.lazyderef (hd W11832) V11763) (if (= W11833 @v) (let W11834 (shen.lazyderef (tl W11832) V11763) (if (cons? W11834) (let W11835 (hd W11834) (let W11836 (shen.lazyderef (tl W11834) V11763) (if (cons? W11836) (let W11837 (hd W11836) (let W11838 (shen.lazyderef (tl W11836) V11763) (if (= W11838 ()) (let W11839 (shen.lazyderef (tl W11831) V11763) (if (cons? W11839) (let W11840 (hd W11839) (let W11841 (shen.lazyderef (tl W11839) V11763) (if (cons? W11841) (let W11842 (shen.lazyderef (hd W11841) V11763) (if (cons? W11842) (let W11843 (shen.lazyderef (hd W11842) V11763) (if (= W11843 vector) (let W11844 (shen.lazyderef (tl W11842) V11763) (if (cons? W11844) (let W11845 (hd W11844) (let W11846 (shen.lazyderef (tl W11844) V11763) (if (= W11846 ()) (let W11847 (shen.lazyderef (tl W11841) V11763) (if (= W11847 ()) (let W11848 (tl W11830) (do (shen.incinfs) (when (= (shen.deref W11840 V11763) (intern ":")) V11763 V11764 W11767 (freeze (shen.cut V11763 V11764 W11767 (freeze (shen.l-rules (cons (cons W11835 (cons W11840 (cons W11845 ()))) (cons (cons W11837 (cons W11840 (cons (cons vector (cons W11845 ())) ()))) W11848)) V11761 true V11763 V11764 W11767 V11766))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W11829 false) (let W11849 (if (shen.unlocked? V11764) (let W11850 (shen.lazyderef V11760 V11763) (if (cons? W11850) (let W11851 (hd W11850) (let W11852 (tl W11850) (let W11853 (shen.lazyderef V11761 V11763) (let W11854 (lambda Z11855 (lambda Z11856 (do (shen.incinfs) (bind Z11855 W11851 V11763 V11764 W11767 (freeze (shen.l-rules W11852 Z11856 V11762 V11763 V11764 W11767 V11766)))))) (if (cons? W11853) (let W11857 (hd W11853) (let W11858 (tl W11853) ((W11854 W11857) W11858))) (if (shen.pvar? W11853) (let W11859 (shen.newpv V11763) (shen.gc V11763 (let W11860 (shen.newpv V11763) (shen.gc V11763 (shen.bind! W11853 (cons W11859 W11860) V11763 (freeze ((W11854 W11859) W11860))))))) false)))))) false)) false) (if (= W11849 false) (shen.unlock V11764 W11767) W11849)) W11829)) W11813)) W11791)) W11771)) W11768))))

(defun shen.t* (V11861 V11862 V11863 V11864 V11865 V11866) (let W11867 (+ V11865 1) (let W11868 (if (shen.unlocked? V11864) (let W11869 (shen.lazyderef V11861 V11863) (if (cons? W11869) (let W11870 (shen.lazyderef (hd W11869) V11863) (if (= W11870 define) (let W11871 (shen.lazyderef (tl W11869) V11863) (if (cons? W11871) (let W11872 (hd W11871) (let W11873 (tl W11871) (let W11874 (shen.newpv V11863) (shen.gc V11863 (let W11875 (shen.newpv V11863) (shen.gc V11863 (let W11876 (shen.newpv V11863) (shen.gc V11863 (let W11877 (shen.newpv V11863) (shen.gc V11863 (do (shen.incinfs) (shen.cut V11863 V11864 W11867 (freeze (bind W11874 (shen.sigxrules (cons W11872 W11873)) V11863 V11864 W11867 (freeze (bind W11877 (fst (shen.lazyderef W11874 V11863)) V11863 V11864 W11867 (freeze (bind W11875 (snd (shen.lazyderef W11874 V11863)) V11863 V11864 W11867 (freeze (bind W11876 (shen.freshen-sig (shen.deref W11877 V11863)) V11863 V11864 W11867 (freeze (shen.t*-rules W11872 W11875 W11876 1 V11863 V11864 W11867 (freeze (is W11877 V11862 V11863 V11864 W11867 V11866)))))))))))))))))))))))) false)) false)) false)) false) (if (= W11868 false) (shen.unlock V11864 W11867) W11868))))

(defun shen.sigxrules (V11878) (compile (lambda Z11879 (shen.<sig*rules> Z11879)) V11878))

(defun shen.<sig*rules> (V11880) (let W11881 (if (cons? V11880) (let W11882 (tail V11880) (if (shen.hds=? W11882 {) (let W11883 (tail W11882) (let W11884 (shen.<signature> W11883) (if (shen.parse-failure? W11884) (shen.parse-failure) (let W11885 (shen.<-out W11884) (let W11886 (shen.in-> W11884) (if (shen.hds=? W11886 }) (let W11887 (tail W11886) (let W11888 (shen.<rules*> W11887) (if (shen.parse-failure? W11888) (shen.parse-failure) (let W11889 (shen.<-out W11888) (let W11890 (shen.in-> W11888) (shen.comb W11890 (let W11891 (shen.rectify-type W11885) (@p W11891 W11889)))))))) (shen.parse-failure))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W11881) (shen.parse-failure) W11881)))

(defun shen.freshen-sig (V11892) (let W11893 (shen.extract-vars V11892) (let W11894 (map (lambda Z11895 (cons Z11895 (shen.freshterm (concat & Z11895)))) W11893) (shen.freshen-type W11894 V11892))))

(defun shen.freshen-type (V11896 V11897) (cond ((= () V11896) V11897) ((and (cons? V11896) (cons? (hd V11896))) (shen.freshen-type (tl V11896) (subst (tl (hd V11896)) (hd (hd V11896)) V11897))) (true (simple-error "partial function shen.freshen-type"))))

(defun shen.<rules*> (V11898) (let W11899 (let W11900 (shen.<rule*> V11898) (if (shen.parse-failure? W11900) (shen.parse-failure) (let W11901 (shen.<-out W11900) (let W11902 (shen.in-> W11900) (let W11903 (shen.<rules*> W11902) (if (shen.parse-failure? W11903) (shen.parse-failure) (let W11904 (shen.<-out W11903) (let W11905 (shen.in-> W11903) (shen.comb W11905 (cons W11901 W11904)))))))))) (if (shen.parse-failure? W11899) (let W11906 (let W11907 (shen.<rule*> V11898) (if (shen.parse-failure? W11907) (shen.parse-failure) (let W11908 (shen.<-out W11907) (let W11909 (shen.in-> W11907) (shen.comb W11909 (cons W11908 ())))))) (if (shen.parse-failure? W11906) (shen.parse-failure) W11906)) W11899)))

(defun shen.<rule*> (V11910) (let W11911 (let W11912 (shen.<patterns> V11910) (if (shen.parse-failure? W11912) (shen.parse-failure) (let W11913 (shen.<-out W11912) (let W11914 (shen.in-> W11912) (if (shen.hds=? W11914 ->) (let W11915 (tail W11914) (if (cons? W11915) (let W11916 (head W11915) (let W11917 (tail W11915) (if (shen.hds=? W11917 where) (let W11918 (tail W11917) (if (cons? W11918) (let W11919 (head W11918) (let W11920 (tail W11918) (shen.comb W11920 (@p W11913 (cons where (cons W11919 (cons W11916 ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W11911) (let W11921 (let W11922 (shen.<patterns> V11910) (if (shen.parse-failure? W11922) (shen.parse-failure) (let W11923 (shen.<-out W11922) (let W11924 (shen.in-> W11922) (if (shen.hds=? W11924 <-) (let W11925 (tail W11924) (if (cons? W11925) (let W11926 (head W11925) (let W11927 (tail W11925) (if (shen.hds=? W11927 where) (let W11928 (tail W11927) (if (cons? W11928) (let W11929 (head W11928) (let W11930 (tail W11928) (shen.comb W11930 (@p W11923 (shen.correct (cons where (cons W11929 (cons W11926 ())))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W11921) (let W11931 (let W11932 (shen.<patterns> V11910) (if (shen.parse-failure? W11932) (shen.parse-failure) (let W11933 (shen.<-out W11932) (let W11934 (shen.in-> W11932) (if (shen.hds=? W11934 <-) (let W11935 (tail W11934) (if (cons? W11935) (let W11936 (head W11935) (let W11937 (tail W11935) (shen.comb W11937 (@p W11933 (shen.correct W11936))))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W11931) (let W11938 (let W11939 (shen.<patterns> V11910) (if (shen.parse-failure? W11939) (shen.parse-failure) (let W11940 (shen.<-out W11939) (let W11941 (shen.in-> W11939) (if (shen.hds=? W11941 ->) (let W11942 (tail W11941) (if (cons? W11942) (let W11943 (head W11942) (let W11944 (tail W11942) (shen.comb W11944 (@p W11940 W11943)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W11938) (shen.parse-failure) W11938)) W11931)) W11921)) W11911)))

(defun shen.correct (V11945) (cond ((and (cons? V11945) (and (= where (hd V11945)) (and (cons? (tl V11945)) (and (cons? (tl (tl V11945))) (and (cons? (hd (tl (tl V11945)))) (and (= fail-if (hd (hd (tl (tl V11945))))) (and (cons? (tl (hd (tl (tl V11945))))) (and (cons? (tl (tl (hd (tl (tl V11945)))))) (and (= () (tl (tl (tl (hd (tl (tl V11945))))))) (= () (tl (tl (tl V11945))))))))))))) (cons where (cons (cons and (cons (hd (tl V11945)) (cons (cons not (cons (tl (hd (tl (tl V11945)))) ())) ()))) (tl (tl (hd (tl (tl V11945)))))))) ((and (cons? V11945) (and (= where (hd V11945)) (and (cons? (tl V11945)) (and (cons? (tl (tl V11945))) (= () (tl (tl (tl V11945)))))))) (cons where (cons (cons and (cons (hd (tl V11945)) (cons (cons not (cons (cons = (cons (hd (tl (tl V11945))) (cons (cons fail ()) ()))) ())) ()))) (tl (tl V11945))))) ((and (cons? V11945) (and (= fail-if (hd V11945)) (and (cons? (tl V11945)) (and (cons? (tl (tl V11945))) (= () (tl (tl (tl V11945)))))))) (cons where (cons (cons not (cons (tl V11945) ())) (tl (tl V11945))))) (true (cons where (cons (cons not (cons (cons = (cons V11945 (cons (cons fail ()) ()))) ())) (cons V11945 ()))))))

(defun shen.t*-rules (V11946 V11947 V11948 V11949 V11950 V11951 V11952 V11953) (let W11954 (+ V11952 1) (let W11955 (if (shen.unlocked? V11951) (let W11956 (shen.lazyderef V11947 V11950) (if (= W11956 ()) (do (shen.incinfs) (thaw V11953)) false)) false) (if (= W11955 false) (let W11957 (if (shen.unlocked? V11951) (let W11958 (shen.lazyderef V11947 V11950) (if (cons? W11958) (let W11959 (hd W11958) (let W11960 (tl W11958) (let W11961 (shen.newpv V11950) (shen.gc V11950 (do (shen.incinfs) (bind W11961 (shen.freshen-rule (shen.deref W11959 V11950)) V11950 V11951 W11954 (freeze (shen.t*-rule V11946 V11949 (fst (shen.lazyderef W11961 V11950)) (snd (shen.lazyderef W11961 V11950)) V11948 V11950 V11951 W11954 (freeze (shen.cut V11950 V11951 W11954 (freeze (shen.t*-rules V11946 W11960 V11948 (+ V11949 1) V11950 V11951 W11954 V11953)))))))))))) false)) false) (if (= W11957 false) (shen.unlock V11951 W11954) W11957)) W11955))))

(defun shen.freshen-rule (V11962) (cond ((tuple? V11962) (let W11963 (shen.extract-vars (fst V11962)) (let W11964 (map (lambda Z11965 (cons Z11965 (shen.freshterm Z11965))) W11963) (@p (shen.freshen W11964 (fst V11962)) (shen.freshen W11964 (snd V11962)))))) (true (simple-error "partial function shen.freshen-rule"))))

(defun shen.freshen (V11966 V11967) (cond ((= () V11966) V11967) ((and (cons? V11966) (cons? (hd V11966))) (shen.freshen (tl V11966) (shen.beta (hd (hd V11966)) (tl (hd V11966)) V11967))) (true (simple-error "partial function shen.freshen"))))

(defun shen.t*-rule (V11968 V11969 V11970 V11971 V11972 V11973 V11974 V11975 V11976) (let W11977 (if (shen.unlocked? V11974) (do (shen.incinfs) (shen.t*-rule-h V11970 V11971 V11972 V11973 V11974 V11975 V11976)) false) (if (= W11977 false) (if (shen.unlocked? V11974) (let W11978 (shen.newpv V11973) (shen.gc V11973 (do (shen.incinfs) (bind W11978 (simple-error (cn "type error in rule " (shen.app V11969 (cn " of " (shen.app V11968 "
" shen.a)) shen.a))) V11973 V11974 V11975 V11976)))) false) W11977)))

(defun shen.t*-rule-h (V11979 V11980 V11981 V11982 V11983 V11984 V11985) (let W11986 (+ V11984 1) (let W11987 (if (shen.unlocked? V11983) (let W11988 (shen.lazyderef V11979 V11982) (if (= W11988 ()) (let W11989 (shen.lazyderef V11981 V11982) (if (cons? W11989) (let W11990 (shen.lazyderef (hd W11989) V11982) (if (= W11990 -->) (let W11991 (shen.lazyderef (tl W11989) V11982) (if (cons? W11991) (let W11992 (hd W11991) (let W11993 (shen.lazyderef (tl W11991) V11982) (if (= W11993 ()) (do (shen.incinfs) (shen.cut V11982 V11983 W11986 (freeze (shen.t*-correct V11980 W11992 () V11982 V11983 W11986 V11985)))) false))) false)) false)) false)) false)) false) (if (= W11987 false) (let W11994 (if (shen.unlocked? V11983) (let W11995 (shen.newpv V11982) (shen.gc V11982 (let W11996 (shen.newpv V11982) (shen.gc V11982 (let W11997 (shen.newpv V11982) (shen.gc V11982 (do (shen.incinfs) (shen.p-hyps (shen.freshterms V11979) W11995 V11982 V11983 W11986 (freeze (shen.t*-integrity V11979 V11981 W11995 W11996 V11982 V11983 W11986 (freeze (shen.cut V11982 V11983 W11986 (freeze (shen.myassume V11979 V11981 W11997 V11982 V11983 W11986 (freeze (shen.t*-correct V11980 W11996 W11997 V11982 V11983 W11986 V11985)))))))))))))))) false) (if (= W11994 false) (shen.unlock V11983 W11986) W11994)) W11987))))

(defun shen.myassume (V11998 V11999 V12000 V12001 V12002 V12003 V12004) (let W12005 (if (shen.unlocked? V12002) (let W12006 (shen.lazyderef V11998 V12001) (if (= W12006 ()) (let W12007 (shen.lazyderef V12000 V12001) (let W12008 (freeze (do (shen.incinfs) (thaw V12004))) (if (= W12007 ()) (thaw W12008) (if (shen.pvar? W12007) (shen.bind! W12007 () V12001 W12008) false)))) false)) false) (if (= W12005 false) (if (shen.unlocked? V12002) (let W12009 (shen.lazyderef V11998 V12001) (if (cons? W12009) (let W12010 (hd W12009) (let W12011 (tl W12009) (let W12012 (shen.lazyderef V11999 V12001) (if (cons? W12012) (let W12013 (hd W12012) (let W12014 (shen.lazyderef (tl W12012) V12001) (if (cons? W12014) (let W12015 (shen.lazyderef (hd W12014) V12001) (if (= W12015 -->) (let W12016 (shen.lazyderef (tl W12014) V12001) (if (cons? W12016) (let W12017 (hd W12016) (let W12018 (shen.lazyderef (tl W12016) V12001) (if (= W12018 ()) (let W12019 (shen.lazyderef V12000 V12001) (let W12020 (lambda Z12021 (lambda Z12022 (lambda Z12023 (lambda Z12024 (do (shen.incinfs) (is! W12013 Z12023 V12001 V12002 V12003 (freeze (is! W12010 Z12021 V12001 V12002 V12003 (freeze (bind Z12022 (intern ":") V12001 V12002 V12003 (freeze (shen.myassume W12011 W12017 Z12024 V12001 V12002 V12003 V12004)))))))))))) (if (cons? W12019) (let W12025 (shen.lazyderef (hd W12019) V12001) (let W12026 (lambda Z12027 (lambda Z12028 (lambda Z12029 (let W12030 (tl W12019) ((((W12020 Z12027) Z12028) Z12029) W12030))))) (if (cons? W12025) (let W12031 (hd W12025) (let W12032 (shen.lazyderef (tl W12025) V12001) (let W12033 (lambda Z12034 (lambda Z12035 (((W12026 W12031) Z12034) Z12035))) (if (cons? W12032) (let W12036 (hd W12032) (let W12037 (shen.lazyderef (tl W12032) V12001) (let W12038 (lambda Z12039 ((W12033 W12036) Z12039)) (if (cons? W12037) (let W12040 (hd W12037) (let W12041 (shen.lazyderef (tl W12037) V12001) (let W12042 (freeze (W12038 W12040)) (if (= W12041 ()) (thaw W12042) (if (shen.pvar? W12041) (shen.bind! W12041 () V12001 W12042) false))))) (if (shen.pvar? W12037) (let W12043 (shen.newpv V12001) (shen.gc V12001 (shen.bind! W12037 (cons W12043 ()) V12001 (freeze (W12038 W12043))))) false))))) (if (shen.pvar? W12032) (let W12044 (shen.newpv V12001) (shen.gc V12001 (let W12045 (shen.newpv V12001) (shen.gc V12001 (shen.bind! W12032 (cons W12044 (cons W12045 ())) V12001 (freeze ((W12033 W12044) W12045))))))) false))))) (if (shen.pvar? W12025) (let W12046 (shen.newpv V12001) (shen.gc V12001 (let W12047 (shen.newpv V12001) (shen.gc V12001 (let W12048 (shen.newpv V12001) (shen.gc V12001 (shen.bind! W12025 (cons W12046 (cons W12047 (cons W12048 ()))) V12001 (freeze (((W12026 W12046) W12047) W12048))))))))) false)))) (if (shen.pvar? W12019) (let W12049 (shen.newpv V12001) (shen.gc V12001 (let W12050 (shen.newpv V12001) (shen.gc V12001 (let W12051 (shen.newpv V12001) (shen.gc V12001 (let W12052 (shen.newpv V12001) (shen.gc V12001 (shen.bind! W12019 (cons (cons W12049 (cons W12050 (cons W12051 ()))) W12052) V12001 (freeze ((((W12020 W12049) W12050) W12051) W12052))))))))))) false)))) false))) false)) false)) false))) false)))) false)) false) W12005)))

(defun shen.freshterms (V12055) (cond ((= () V12055) ()) ((and (cons? V12055) (cons? (hd V12055))) (shen.freshterms (append (hd V12055) (tl V12055)))) ((and (cons? V12055) (shen.freshterm? (hd V12055))) (adjoin (hd V12055) (shen.freshterms (tl V12055)))) ((cons? V12055) (shen.freshterms (tl V12055))) (true (simple-error "partial function shen.freshterms"))))

(defun shen.p-hyps (V12056 V12057 V12058 V12059 V12060 V12061) (let W12062 (if (shen.unlocked? V12059) (let W12063 (shen.lazyderef V12056 V12058) (if (= W12063 ()) (let W12064 (shen.lazyderef V12057 V12058) (let W12065 (freeze (do (shen.incinfs) (thaw V12061))) (if (= W12064 ()) (thaw W12065) (if (shen.pvar? W12064) (shen.bind! W12064 () V12058 W12065) false)))) false)) false) (if (= W12062 false) (if (shen.unlocked? V12059) (let W12066 (shen.lazyderef V12056 V12058) (if (cons? W12066) (let W12067 (hd W12066) (let W12068 (tl W12066) (let W12069 (shen.lazyderef V12057 V12058) (let W12070 (lambda Z12071 (lambda Z12072 (lambda Z12073 (lambda Z12074 (do (shen.incinfs) (bind Z12071 W12067 V12058 V12059 V12060 (freeze (bind Z12072 (intern ":") V12058 V12059 V12060 (freeze (shen.p-hyps W12068 Z12074 V12058 V12059 V12060 V12061)))))))))) (if (cons? W12069) (let W12075 (shen.lazyderef (hd W12069) V12058) (let W12076 (lambda Z12077 (lambda Z12078 (lambda Z12079 (let W12080 (tl W12069) ((((W12070 Z12077) Z12078) Z12079) W12080))))) (if (cons? W12075) (let W12081 (hd W12075) (let W12082 (shen.lazyderef (tl W12075) V12058) (let W12083 (lambda Z12084 (lambda Z12085 (((W12076 W12081) Z12084) Z12085))) (if (cons? W12082) (let W12086 (hd W12082) (let W12087 (shen.lazyderef (tl W12082) V12058) (let W12088 (lambda Z12089 ((W12083 W12086) Z12089)) (if (cons? W12087) (let W12090 (hd W12087) (let W12091 (shen.lazyderef (tl W12087) V12058) (let W12092 (freeze (W12088 W12090)) (if (= W12091 ()) (thaw W12092) (if (shen.pvar? W12091) (shen.bind! W12091 () V12058 W12092) false))))) (if (shen.pvar? W12087) (let W12093 (shen.newpv V12058) (shen.gc V12058 (shen.bind! W12087 (cons W12093 ()) V12058 (freeze (W12088 W12093))))) false))))) (if (shen.pvar? W12082) (let W12094 (shen.newpv V12058) (shen.gc V12058 (let W12095 (shen.newpv V12058) (shen.gc V12058 (shen.bind! W12082 (cons W12094 (cons W12095 ())) V12058 (freeze ((W12083 W12094) W12095))))))) false))))) (if (shen.pvar? W12075) (let W12096 (shen.newpv V12058) (shen.gc V12058 (let W12097 (shen.newpv V12058) (shen.gc V12058 (let W12098 (shen.newpv V12058) (shen.gc V12058 (shen.bind! W12075 (cons W12096 (cons W12097 (cons W12098 ()))) V12058 (freeze (((W12076 W12096) W12097) W12098))))))))) false)))) (if (shen.pvar? W12069) (let W12099 (shen.newpv V12058) (shen.gc V12058 (let W12100 (shen.newpv V12058) (shen.gc V12058 (let W12101 (shen.newpv V12058) (shen.gc V12058 (let W12102 (shen.newpv V12058) (shen.gc V12058 (shen.bind! W12069 (cons (cons W12099 (cons W12100 (cons W12101 ()))) W12102) V12058 (freeze ((((W12070 W12099) W12100) W12101) W12102))))))))))) false)))))) false)) false) W12062)))

(defun shen.t*-correct (V12103 V12104 V12105 V12106 V12107 V12108 V12109) (let W12110 (+ V12108 1) (let W12111 (if (shen.unlocked? V12107) (let W12112 (shen.lazyderef V12103 V12106) (if (cons? W12112) (let W12113 (shen.lazyderef (hd W12112) V12106) (if (= W12113 where) (let W12114 (shen.lazyderef (tl W12112) V12106) (if (cons? W12114) (let W12115 (hd W12114) (let W12116 (shen.lazyderef (tl W12114) V12106) (if (cons? W12116) (let W12117 (hd W12116) (let W12118 (shen.lazyderef (tl W12116) V12106) (if (= W12118 ()) (let W12119 (shen.newpv V12106) (shen.gc V12106 (do (shen.incinfs) (shen.cut V12106 V12107 W12110 (freeze (bind W12119 (shen.curry W12115) V12106 V12107 W12110 (freeze (shen.system-S-h W12119 boolean V12105 V12106 V12107 W12110 (freeze (shen.cut V12106 V12107 W12110 (freeze (shen.t*-correct W12117 V12104 (cons (cons W12119 (cons (intern ":") (cons verified ()))) V12105) V12106 V12107 W12110 V12109)))))))))))) false))) false))) false)) false)) false)) false) (if (= W12111 false) (let W12120 (if (shen.unlocked? V12107) (do (shen.incinfs) (shen.system-S-h (shen.curry V12103) V12104 V12105 V12106 V12107 W12110 V12109)) false) (if (= W12120 false) (shen.unlock V12107 W12110) W12120)) W12111))))

(defun shen.t*-integrity (V12121 V12122 V12123 V12124 V12125 V12126 V12127 V12128) (let W12129 (if (shen.unlocked? V12126) (let W12130 (shen.lazyderef V12121 V12125) (if (= W12130 ()) (do (shen.incinfs) (is! V12122 V12124 V12125 V12126 V12127 V12128)) false)) false) (if (= W12129 false) (if (shen.unlocked? V12126) (let W12131 (shen.lazyderef V12121 V12125) (if (cons? W12131) (let W12132 (hd W12131) (let W12133 (tl W12131) (let W12134 (shen.lazyderef V12122 V12125) (if (cons? W12134) (let W12135 (hd W12134) (let W12136 (shen.lazyderef (tl W12134) V12125) (if (cons? W12136) (let W12137 (shen.lazyderef (hd W12136) V12125) (if (= W12137 -->) (let W12138 (shen.lazyderef (tl W12136) V12125) (if (cons? W12138) (let W12139 (hd W12138) (let W12140 (shen.lazyderef (tl W12138) V12125) (if (= W12140 ()) (do (shen.incinfs) (shen.system-S-h W12132 W12135 V12123 V12125 V12126 V12127 (freeze (shen.t*-integrity W12133 W12139 V12123 V12124 V12125 V12126 V12127 V12128)))) false))) false)) false)) false))) false)))) false)) false) W12129)))

(defun shen.freshterm? (V12141) (and (absvector? V12141) (and (not (string? V12141)) (= (<-address V12141 0) shen.print-freshterm))))

