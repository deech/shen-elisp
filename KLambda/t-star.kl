(defun shen.typecheck (V4887 V4888) (let W4889 (shen.extract-vars V4888) (let W4890 (shen.rectify-type V4888) (let W4891 (shen.curry V4887) (((((lambda Z4892 (lambda Z4893 (lambda Z4894 (lambda Z4895 (let W4896 (shen.newpv Z4892) (shen.gc Z4892 (do (shen.incinfs) (shen.insert-prolog-variables (receive (shen.deref W4889 Z4892)) (receive (shen.deref W4890 Z4892)) W4896 Z4892 Z4893 Z4894 (freeze (shen.toplevel-forms (receive (shen.deref W4891 Z4892)) W4896 Z4892 Z4893 Z4894 (freeze (return W4896 Z4892 Z4893 Z4894 Z4895)))))))))))) (shen.prolog-vector)) (@v true (@v 0 (vector 0)))) 0) (freeze true))))))

(defun shen.insert-prolog-variables (V4897 V4898 V4899 V4900 V4901 V4902 V4903) (let W4904 (if (shen.unlocked? V4901) (let W4905 (shen.lazyderef V4897 V4900) (if (= W4905 ()) (do (shen.incinfs) (is! V4898 V4899 V4900 V4901 V4902 V4903)) false)) false) (if (= W4904 false) (if (shen.unlocked? V4901) (let W4906 (shen.lazyderef V4897 V4900) (if (cons? W4906) (let W4907 (hd W4906) (let W4908 (tl W4906) (let W4909 (shen.newpv V4900) (shen.gc V4900 (do (shen.incinfs) (shen.insert-prolog-variables W4908 (subst (shen.deref W4909 V4900) W4907 V4898) V4899 V4900 V4901 V4902 V4903)))))) false)) false) W4904)))

(defun shen.toplevel-forms (V4910 V4911 V4912 V4913 V4914 V4915) (let W4916 (+ V4914 1) (let W4917 (if (shen.unlocked? V4913) (let W4918 (shen.lazyderef V4910 V4912) (if (cons? W4918) (let W4919 (shen.lazyderef (hd W4918) V4912) (if (= W4919 define) (let W4920 (shen.lazyderef (tl W4918) V4912) (if (cons? W4920) (let W4921 (hd W4920) (let W4922 (tl W4920) (do (shen.incinfs) (when (shen.type-theory-enabled?) V4912 V4913 W4916 (freeze (shen.cut V4912 V4913 W4916 (freeze (shen.signal-def (value shen.*spy*) W4921 V4912 V4913 W4916 (freeze (shen.t* (cons define (cons W4921 W4922)) V4911 V4912 V4913 W4916 V4915)))))))))) false)) false)) false)) false) (if (= W4917 false) (let W4923 (if (shen.unlocked? V4913) (do (shen.incinfs) (shen.system-S (cons V4910 (cons (intern ":") (cons V4911 ()))) () V4912 V4913 W4916 V4915)) false) (if (= W4923 false) (shen.unlock V4913 W4916) W4923)) W4917))))

(defun shen.signal-def (V4924 V4925 V4926 V4927 V4928 V4929) (let W4930 (if (shen.unlocked? V4927) (let W4931 (shen.lazyderef V4924 V4926) (if (= W4931 false) (do (shen.incinfs) (thaw V4929)) false)) false) (if (= W4930 false) (if (shen.unlocked? V4927) (let W4932 (shen.lazyderef V4924 V4926) (if (= W4932 true) (let W4933 (shen.newpv V4926) (shen.gc V4926 (do (shen.incinfs) (is W4933 (pr (cn "
typechecking (fn " (shen.app (shen.deref V4925 V4926) ")
" shen.a)) (stoutput)) V4926 V4927 V4928 V4929)))) false)) false) W4930)))

(defun shen.rectify-type (V4934) (shen.demodulate (shen.curry-type V4934)))

(defun shen.demodulate (V4935) (trap-error (let W4936 (shen.walk (lambda Z4937 (shen.demod Z4937)) V4935) (if (= W4936 V4935) V4935 (shen.demodulate W4936))) (lambda Z4938 V4935)))

(defun shen.curry-type (V4939) (cond ((and (cons? V4939) (and (cons? (tl V4939)) (and (= --> (hd (tl V4939))) (and (cons? (tl (tl V4939))) (and (cons? (tl (tl (tl V4939)))) (= --> (hd (tl (tl (tl V4939)))))))))) (shen.curry-type (cons (hd V4939) (cons --> (cons (tl (tl V4939)) ()))))) ((and (cons? V4939) (and (cons? (hd V4939)) (and (= list (hd (hd V4939))) (and (cons? (tl (hd V4939))) (and (= () (tl (tl (hd V4939)))) (and (cons? (tl V4939)) (and (= ==> (hd (tl V4939))) (and (cons? (tl (tl V4939))) (= () (tl (tl (tl V4939)))))))))))) (shen.curry-type (cons (hd V4939) (cons --> (cons (cons str (cons (hd V4939) (tl (tl V4939)))) ()))))) ((and (cons? V4939) (and (cons? (tl V4939)) (and (= * (hd (tl V4939))) (and (cons? (tl (tl V4939))) (and (cons? (tl (tl (tl V4939)))) (= * (hd (tl (tl (tl V4939)))))))))) (shen.curry-type (cons (hd V4939) (cons * (cons (tl (tl V4939)) ()))))) ((cons? V4939) (map (lambda Z4940 (shen.curry-type Z4940)) V4939)) (true V4939)))

(defun shen.curry (V4941) (cond ((and (cons? V4941) (and (= define (hd V4941)) (cons? (tl V4941)))) V4941) ((and (cons? V4941) (and (= type (hd V4941)) (and (cons? (tl V4941)) (and (cons? (tl (tl V4941))) (= () (tl (tl (tl V4941)))))))) (cons type (cons (shen.curry (hd (tl V4941))) (tl (tl V4941))))) ((and (cons? V4941) (and (= input+ (hd V4941)) (and (cons? (tl V4941)) (and (cons? (tl (tl V4941))) (= () (tl (tl (tl V4941)))))))) (cons input+ (cons (hd (tl V4941)) (cons (shen.curry (hd (tl (tl V4941)))) ())))) ((and (cons? V4941) (shen.special? (hd V4941))) (cons (hd V4941) (map (lambda Z4942 (shen.curry Z4942)) (tl V4941)))) ((and (cons? V4941) (shen.extraspecial? (hd V4941))) V4941) ((and (cons? V4941) (and (cons? (tl V4941)) (cons? (tl (tl V4941))))) (shen.curry (cons (cons (hd V4941) (cons (hd (tl V4941)) ())) (tl (tl V4941))))) ((and (cons? V4941) (and (cons? (tl V4941)) (= () (tl (tl V4941))))) (cons (shen.curry (hd V4941)) (cons (shen.curry (hd (tl V4941))) ()))) (true V4941)))

(defun shen.special? (V4943) (element? V4943 (value shen.*special*)))

(defun shen.extraspecial? (V4944) (element? V4944 (value shen.*extraspecial*)))

(defun shen.system-S (V4945 V4946 V4947 V4948 V4949 V4950) (let W4951 (+ V4949 1) (let W4952 (if (shen.unlocked? V4948) (do (shen.incinfs) (when (shen.maxinfexceeded?) V4947 V4948 W4951 V4950)) false) (if (= W4952 false) (let W4953 (if (shen.unlocked? V4948) (let W4954 (shen.lazyderef V4945 V4947) (if (cons? W4954) (let W4955 (hd W4954) (let W4956 (shen.lazyderef (tl W4954) V4947) (if (cons? W4956) (let W4957 (hd W4956) (let W4958 (shen.lazyderef (tl W4956) V4947) (if (cons? W4958) (let W4959 (hd W4958) (let W4960 (shen.lazyderef (tl W4958) V4947) (if (= W4960 ()) (do (shen.incinfs) (when (= (shen.deref W4957 V4947) (intern ":")) V4947 V4948 W4951 (freeze (when (shen.type-theory-enabled?) V4947 V4948 W4951 (freeze (shen.cut V4947 V4948 W4951 (freeze (shen.system-S-h W4955 W4959 V4946 V4947 V4948 W4951 V4950)))))))) false))) false))) false))) false)) false) (if (= W4953 false) (let W4961 (if (shen.unlocked? V4948) (do (shen.incinfs) (when (value shen.*spy*) V4947 V4948 W4951 (freeze (shen.show V4945 V4946 V4947 V4948 W4951 V4950)))) false) (if (= W4961 false) (let W4962 (if (shen.unlocked? V4948) (do (shen.incinfs) (shen.search-user-datatypes V4945 V4946 (value shen.*datatypes*) V4947 V4948 W4951 V4950)) false) (if (= W4962 false) (shen.unlock V4948 W4951) W4962)) W4961)) W4953)) W4952))))

(defun shen.show (V4969 V4970 V4971 V4972 V4973 V4974) (do (shen.line) (do (shen.show-p (shen.deref V4969 V4971)) (do (nl 2) (do (shen.show-assumptions (shen.deref V4970 V4971) 1) (do (shen.pause-for-user) false))))))

(defun shen.line () (let W4975 (inferences) (pr (cn "____________________________________________________________ " (shen.app W4975 (cn " inference" (shen.app (if (= 1 W4975) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))

(defun shen.show-p (V4976) (cond ((and (cons? V4976) (and (cons? (tl V4976)) (and (cons? (tl (tl V4976))) (and (= () (tl (tl (tl V4976)))) (= (hd (tl V4976)) (intern ":")))))) (do (shen.prterm (hd V4976)) (do (pr " : " (stoutput)) (pr (shen.app (hd (tl (tl V4976))) "" shen.r) (stoutput))))) (true (shen.prterm V4976))))

(defun shen.prterm (V4977) (cond ((and (cons? V4977) (and (= cons (hd V4977)) (and (cons? (tl V4977)) (and (cons? (tl (tl V4977))) (= () (tl (tl (tl V4977)))))))) (do (pr "[" (stoutput)) (do (shen.prterm (hd (tl V4977))) (do (shen.prtl (hd (tl (tl V4977)))) (pr "]" (stoutput)))))) ((cons? V4977) (do (pr "(" (stoutput)) (do (shen.prterm (hd V4977)) (do (map (lambda Z4978 (do (pr " " (stoutput)) (shen.prterm Z4978))) (tl V4977)) (pr ")" (stoutput)))))) (true (print V4977))))

(defun shen.prtl (V4979) (cond ((= () V4979) "") ((and (cons? V4979) (and (= cons (hd V4979)) (and (cons? (tl V4979)) (and (cons? (tl (tl V4979))) (= () (tl (tl (tl V4979)))))))) (do (pr " " (stoutput)) (do (shen.prterm (hd (tl V4979))) (shen.prtl (hd (tl (tl V4979))))))) (true (do (pr " | " (stoutput)) (shen.prterm V4979)))))

(defun shen.show-assumptions (V4986 V4987) (cond ((= () V4986) (pr "
> " (stoutput))) ((cons? V4986) (do (pr (shen.app V4987 ". " shen.a) (stoutput)) (do (shen.show-p (hd V4986)) (do (nl 1) (shen.show-assumptions (tl V4986) (+ V4987 1)))))) (true (simple-error "implementation error in shen.show-assumptions"))))

(defun shen.pause-for-user () (let W4988 (read-byte (stinput)) (if (= W4988 94) (simple-error "input aborted
") (nl 1))))

(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))

(defun shen.maxinfexceeded? () (if (> (inferences) (value shen.*maxinferences*)) (simple-error "maximum inferences exceeded") false))

(defun shen.system-S-h (V4989 V4990 V4991 V4992 V4993 V4994 V4995) (let W4996 (+ V4994 1) (let W4997 (if (shen.unlocked? V4993) (do (shen.incinfs) (when (value shen.*spy*) V4992 V4993 W4996 (freeze (shen.show (cons V4989 (cons (intern ":") (cons V4990 ()))) V4991 V4992 V4993 W4996 V4995)))) false) (if (= W4997 false) (let W4998 (if (shen.unlocked? V4993) (do (shen.incinfs) (when (not (cons? (shen.lazyderef V4989 V4992))) V4992 V4993 W4996 (freeze (shen.primitive V4989 V4990 V4992 V4993 W4996 V4995)))) false) (if (= W4998 false) (let W4999 (if (shen.unlocked? V4993) (do (shen.incinfs) (shen.by-hypothesis V4989 V4990 V4991 V4992 V4993 W4996 V4995)) false) (if (= W4999 false) (let W5000 (if (shen.unlocked? V4993) (let W5001 (shen.lazyderef V4989 V4992) (if (cons? W5001) (let W5002 (hd W5001) (let W5003 (shen.lazyderef (tl W5001) V4992) (if (= W5003 ()) (do (shen.incinfs) (shen.lookupsig W5002 (cons --> (cons V4990 ())) V4992 V4993 W4996 V4995)) false))) false)) false) (if (= W5000 false) (let W5004 (if (shen.unlocked? V4993) (let W5005 (shen.lazyderef V4989 V4992) (if (cons? W5005) (let W5006 (shen.lazyderef (hd W5005) V4992) (if (= W5006 fn) (let W5007 (shen.lazyderef (tl W5005) V4992) (if (cons? W5007) (let W5008 (hd W5007) (let W5009 (shen.lazyderef (tl W5007) V4992) (if (= W5009 ()) (do (shen.incinfs) (shen.lookupsig W5008 V4990 V4992 V4993 W4996 V4995)) false))) false)) false)) false)) false) (if (= W5004 false) (let W5010 (if (shen.unlocked? V4993) (let W5011 (shen.lazyderef V4989 V4992) (if (cons? W5011) (let W5012 (hd W5011) (let W5013 (shen.lazyderef (tl W5011) V4992) (if (cons? W5013) (let W5014 (hd W5013) (let W5015 (shen.lazyderef (tl W5013) V4992) (if (= W5015 ()) (let W5016 (shen.newpv V4992) (shen.gc V4992 (do (shen.incinfs) (when (not (cons? (shen.lazyderef W5012 V4992))) V4992 V4993 W4996 (freeze (shen.lookupsig W5012 (cons W5016 (cons --> (cons V4990 ()))) V4992 V4993 W4996 (freeze (shen.system-S-h W5014 W5016 V4991 V4992 V4993 W4996 V4995)))))))) false))) false))) false)) false) (if (= W5010 false) (let W5017 (if (shen.unlocked? V4993) (let W5018 (shen.lazyderef V4989 V4992) (if (cons? W5018) (let W5019 (hd W5018) (let W5020 (shen.lazyderef (tl W5018) V4992) (if (cons? W5020) (let W5021 (hd W5020) (let W5022 (shen.lazyderef (tl W5020) V4992) (if (= W5022 ()) (let W5023 (shen.newpv V4992) (shen.gc V4992 (do (shen.incinfs) (shen.system-S-h W5019 (cons W5023 (cons --> (cons V4990 ()))) V4991 V4992 V4993 W4996 (freeze (shen.system-S-h W5021 W5023 V4991 V4992 V4993 W4996 V4995)))))) false))) false))) false)) false) (if (= W5017 false) (let W5024 (if (shen.unlocked? V4993) (let W5025 (shen.lazyderef V4989 V4992) (if (cons? W5025) (let W5026 (shen.lazyderef (hd W5025) V4992) (if (= W5026 cons) (let W5027 (shen.lazyderef (tl W5025) V4992) (if (cons? W5027) (let W5028 (hd W5027) (let W5029 (shen.lazyderef (tl W5027) V4992) (if (cons? W5029) (let W5030 (hd W5029) (let W5031 (shen.lazyderef (tl W5029) V4992) (if (= W5031 ()) (let W5032 (shen.lazyderef V4990 V4992) (let W5033 (lambda Z5034 (do (shen.incinfs) (shen.system-S-h W5028 Z5034 V4991 V4992 V4993 W4996 (freeze (shen.system-S-h W5030 (cons list (cons Z5034 ())) V4991 V4992 V4993 W4996 V4995))))) (if (cons? W5032) (let W5035 (shen.lazyderef (hd W5032) V4992) (let W5036 (freeze (let W5037 (shen.lazyderef (tl W5032) V4992) (let W5038 (lambda Z5039 (W5033 Z5039)) (if (cons? W5037) (let W5040 (hd W5037) (let W5041 (shen.lazyderef (tl W5037) V4992) (let W5042 (freeze (W5038 W5040)) (if (= W5041 ()) (thaw W5042) (if (shen.pvar? W5041) (shen.bind! W5041 () V4992 W5042) false))))) (if (shen.pvar? W5037) (let W5043 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5037 (cons W5043 ()) V4992 (freeze (W5038 W5043))))) false))))) (if (= W5035 list) (thaw W5036) (if (shen.pvar? W5035) (shen.bind! W5035 list V4992 W5036) false)))) (if (shen.pvar? W5032) (let W5044 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5032 (cons list (cons W5044 ())) V4992 (freeze (W5033 W5044))))) false)))) false))) false))) false)) false)) false)) false) (if (= W5024 false) (let W5045 (if (shen.unlocked? V4993) (let W5046 (shen.lazyderef V4989 V4992) (if (cons? W5046) (let W5047 (shen.lazyderef (hd W5046) V4992) (if (= W5047 @p) (let W5048 (shen.lazyderef (tl W5046) V4992) (if (cons? W5048) (let W5049 (hd W5048) (let W5050 (shen.lazyderef (tl W5048) V4992) (if (cons? W5050) (let W5051 (hd W5050) (let W5052 (shen.lazyderef (tl W5050) V4992) (if (= W5052 ()) (let W5053 (shen.lazyderef V4990 V4992) (let W5054 (lambda Z5055 (lambda Z5056 (do (shen.incinfs) (shen.system-S-h W5049 Z5055 V4991 V4992 V4993 W4996 (freeze (shen.system-S-h W5051 Z5056 V4991 V4992 V4993 W4996 V4995)))))) (if (cons? W5053) (let W5057 (hd W5053) (let W5058 (shen.lazyderef (tl W5053) V4992) (let W5059 (lambda Z5060 ((W5054 W5057) Z5060)) (if (cons? W5058) (let W5061 (shen.lazyderef (hd W5058) V4992) (let W5062 (freeze (let W5063 (shen.lazyderef (tl W5058) V4992) (let W5064 (lambda Z5065 (W5059 Z5065)) (if (cons? W5063) (let W5066 (hd W5063) (let W5067 (shen.lazyderef (tl W5063) V4992) (let W5068 (freeze (W5064 W5066)) (if (= W5067 ()) (thaw W5068) (if (shen.pvar? W5067) (shen.bind! W5067 () V4992 W5068) false))))) (if (shen.pvar? W5063) (let W5069 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5063 (cons W5069 ()) V4992 (freeze (W5064 W5069))))) false))))) (if (= W5061 *) (thaw W5062) (if (shen.pvar? W5061) (shen.bind! W5061 * V4992 W5062) false)))) (if (shen.pvar? W5058) (let W5070 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5058 (cons * (cons W5070 ())) V4992 (freeze (W5059 W5070))))) false))))) (if (shen.pvar? W5053) (let W5071 (shen.newpv V4992) (shen.gc V4992 (let W5072 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5053 (cons W5071 (cons * (cons W5072 ()))) V4992 (freeze ((W5054 W5071) W5072))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W5045 false) (let W5073 (if (shen.unlocked? V4993) (let W5074 (shen.lazyderef V4989 V4992) (if (cons? W5074) (let W5075 (shen.lazyderef (hd W5074) V4992) (if (= W5075 @v) (let W5076 (shen.lazyderef (tl W5074) V4992) (if (cons? W5076) (let W5077 (hd W5076) (let W5078 (shen.lazyderef (tl W5076) V4992) (if (cons? W5078) (let W5079 (hd W5078) (let W5080 (shen.lazyderef (tl W5078) V4992) (if (= W5080 ()) (let W5081 (shen.lazyderef V4990 V4992) (let W5082 (lambda Z5083 (do (shen.incinfs) (shen.system-S-h W5077 Z5083 V4991 V4992 V4993 W4996 (freeze (shen.system-S-h W5079 (cons vector (cons Z5083 ())) V4991 V4992 V4993 W4996 V4995))))) (if (cons? W5081) (let W5084 (shen.lazyderef (hd W5081) V4992) (let W5085 (freeze (let W5086 (shen.lazyderef (tl W5081) V4992) (let W5087 (lambda Z5088 (W5082 Z5088)) (if (cons? W5086) (let W5089 (hd W5086) (let W5090 (shen.lazyderef (tl W5086) V4992) (let W5091 (freeze (W5087 W5089)) (if (= W5090 ()) (thaw W5091) (if (shen.pvar? W5090) (shen.bind! W5090 () V4992 W5091) false))))) (if (shen.pvar? W5086) (let W5092 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5086 (cons W5092 ()) V4992 (freeze (W5087 W5092))))) false))))) (if (= W5084 vector) (thaw W5085) (if (shen.pvar? W5084) (shen.bind! W5084 vector V4992 W5085) false)))) (if (shen.pvar? W5081) (let W5093 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5081 (cons vector (cons W5093 ())) V4992 (freeze (W5082 W5093))))) false)))) false))) false))) false)) false)) false)) false) (if (= W5073 false) (let W5094 (if (shen.unlocked? V4993) (let W5095 (shen.lazyderef V4989 V4992) (if (cons? W5095) (let W5096 (shen.lazyderef (hd W5095) V4992) (if (= W5096 @s) (let W5097 (shen.lazyderef (tl W5095) V4992) (if (cons? W5097) (let W5098 (hd W5097) (let W5099 (shen.lazyderef (tl W5097) V4992) (if (cons? W5099) (let W5100 (hd W5099) (let W5101 (shen.lazyderef (tl W5099) V4992) (if (= W5101 ()) (let W5102 (shen.lazyderef V4990 V4992) (let W5103 (freeze (do (shen.incinfs) (shen.system-S-h W5098 string V4991 V4992 V4993 W4996 (freeze (shen.system-S-h W5100 string V4991 V4992 V4993 W4996 V4995))))) (if (= W5102 string) (thaw W5103) (if (shen.pvar? W5102) (shen.bind! W5102 string V4992 W5103) false)))) false))) false))) false)) false)) false)) false) (if (= W5094 false) (let W5104 (if (shen.unlocked? V4993) (let W5105 (shen.lazyderef V4989 V4992) (if (cons? W5105) (let W5106 (shen.lazyderef (hd W5105) V4992) (if (= W5106 lambda) (let W5107 (shen.lazyderef (tl W5105) V4992) (if (cons? W5107) (let W5108 (hd W5107) (let W5109 (shen.lazyderef (tl W5107) V4992) (if (cons? W5109) (let W5110 (hd W5109) (let W5111 (shen.lazyderef (tl W5109) V4992) (if (= W5111 ()) (let W5112 (shen.lazyderef V4990 V4992) (let W5113 (lambda Z5114 (lambda Z5115 (let W5116 (shen.newpv V4992) (shen.gc V4992 (let W5117 (shen.newpv V4992) (shen.gc V4992 (do (shen.incinfs) (bind W5117 (shen.freshterm (shen.lazyderef W5108 V4992)) V4992 V4993 W4996 (freeze (bind W5116 (shen.beta (shen.lazyderef W5108 V4992) (shen.deref W5117 V4992) (shen.deref W5110 V4992)) V4992 V4993 W4996 (freeze (shen.system-S-h W5116 Z5115 (cons (cons W5117 (cons (intern ":") (cons Z5114 ()))) V4991) V4992 V4993 W4996 V4995)))))))))))) (if (cons? W5112) (let W5118 (hd W5112) (let W5119 (shen.lazyderef (tl W5112) V4992) (let W5120 (lambda Z5121 ((W5113 W5118) Z5121)) (if (cons? W5119) (let W5122 (shen.lazyderef (hd W5119) V4992) (let W5123 (freeze (let W5124 (shen.lazyderef (tl W5119) V4992) (let W5125 (lambda Z5126 (W5120 Z5126)) (if (cons? W5124) (let W5127 (hd W5124) (let W5128 (shen.lazyderef (tl W5124) V4992) (let W5129 (freeze (W5125 W5127)) (if (= W5128 ()) (thaw W5129) (if (shen.pvar? W5128) (shen.bind! W5128 () V4992 W5129) false))))) (if (shen.pvar? W5124) (let W5130 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5124 (cons W5130 ()) V4992 (freeze (W5125 W5130))))) false))))) (if (= W5122 -->) (thaw W5123) (if (shen.pvar? W5122) (shen.bind! W5122 --> V4992 W5123) false)))) (if (shen.pvar? W5119) (let W5131 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5119 (cons --> (cons W5131 ())) V4992 (freeze (W5120 W5131))))) false))))) (if (shen.pvar? W5112) (let W5132 (shen.newpv V4992) (shen.gc V4992 (let W5133 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5112 (cons W5132 (cons --> (cons W5133 ()))) V4992 (freeze ((W5113 W5132) W5133))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W5104 false) (let W5134 (if (shen.unlocked? V4993) (let W5135 (shen.lazyderef V4989 V4992) (if (cons? W5135) (let W5136 (shen.lazyderef (hd W5135) V4992) (if (= W5136 let) (let W5137 (shen.lazyderef (tl W5135) V4992) (if (cons? W5137) (let W5138 (hd W5137) (let W5139 (shen.lazyderef (tl W5137) V4992) (if (cons? W5139) (let W5140 (hd W5139) (let W5141 (shen.lazyderef (tl W5139) V4992) (if (cons? W5141) (let W5142 (hd W5141) (let W5143 (shen.lazyderef (tl W5141) V4992) (if (= W5143 ()) (let W5144 (shen.newpv V4992) (shen.gc V4992 (let W5145 (shen.newpv V4992) (shen.gc V4992 (let W5146 (shen.newpv V4992) (shen.gc V4992 (do (shen.incinfs) (shen.system-S-h W5140 W5146 V4991 V4992 V4993 W4996 (freeze (bind W5145 (shen.freshterm (shen.lazyderef W5138 V4992)) V4992 V4993 W4996 (freeze (bind W5144 (shen.beta (shen.lazyderef W5138 V4992) (shen.lazyderef W5145 V4992) (shen.lazyderef W5142 V4992)) V4992 V4993 W4996 (freeze (shen.system-S-h W5144 V4990 (cons (cons W5145 (cons (intern ":") (cons W5146 ()))) V4991) V4992 V4993 W4996 V4995)))))))))))))) false))) false))) false))) false)) false)) false)) false) (if (= W5134 false) (let W5147 (if (shen.unlocked? V4993) (let W5148 (shen.lazyderef V4989 V4992) (if (cons? W5148) (let W5149 (shen.lazyderef (hd W5148) V4992) (if (= W5149 open) (let W5150 (shen.lazyderef (tl W5148) V4992) (if (cons? W5150) (let W5151 (hd W5150) (let W5152 (shen.lazyderef (tl W5150) V4992) (if (cons? W5152) (let W5153 (hd W5152) (let W5154 (shen.lazyderef (tl W5152) V4992) (if (= W5154 ()) (let W5155 (shen.lazyderef V4990 V4992) (let W5156 (lambda Z5157 (do (shen.incinfs) (is! W5153 Z5157 V4992 V4993 W4996 (freeze (when (element? (shen.lazyderef Z5157 V4992) (cons in (cons out ()))) V4992 V4993 W4996 (freeze (shen.system-S-h W5151 string V4991 V4992 V4993 W4996 V4995))))))) (if (cons? W5155) (let W5158 (shen.lazyderef (hd W5155) V4992) (let W5159 (freeze (let W5160 (shen.lazyderef (tl W5155) V4992) (let W5161 (lambda Z5162 (W5156 Z5162)) (if (cons? W5160) (let W5163 (hd W5160) (let W5164 (shen.lazyderef (tl W5160) V4992) (let W5165 (freeze (W5161 W5163)) (if (= W5164 ()) (thaw W5165) (if (shen.pvar? W5164) (shen.bind! W5164 () V4992 W5165) false))))) (if (shen.pvar? W5160) (let W5166 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5160 (cons W5166 ()) V4992 (freeze (W5161 W5166))))) false))))) (if (= W5158 stream) (thaw W5159) (if (shen.pvar? W5158) (shen.bind! W5158 stream V4992 W5159) false)))) (if (shen.pvar? W5155) (let W5167 (shen.newpv V4992) (shen.gc V4992 (shen.bind! W5155 (cons stream (cons W5167 ())) V4992 (freeze (W5156 W5167))))) false)))) false))) false))) false)) false)) false)) false) (if (= W5147 false) (let W5168 (if (shen.unlocked? V4993) (let W5169 (shen.lazyderef V4989 V4992) (if (cons? W5169) (let W5170 (shen.lazyderef (hd W5169) V4992) (if (= W5170 type) (let W5171 (shen.lazyderef (tl W5169) V4992) (if (cons? W5171) (let W5172 (hd W5171) (let W5173 (shen.lazyderef (tl W5171) V4992) (if (cons? W5173) (let W5174 (hd W5173) (let W5175 (shen.lazyderef (tl W5173) V4992) (if (= W5175 ()) (do (shen.incinfs) (shen.cut V4992 V4993 W4996 (freeze (is! (shen.rectify-type (shen.deref W5174 V4992)) V4990 V4992 V4993 W4996 (freeze (shen.system-S-h W5172 V4990 V4991 V4992 V4993 W4996 V4995)))))) false))) false))) false)) false)) false)) false) (if (= W5168 false) (let W5176 (if (shen.unlocked? V4993) (let W5177 (shen.lazyderef V4989 V4992) (if (cons? W5177) (let W5178 (shen.lazyderef (hd W5177) V4992) (if (= W5178 input+) (let W5179 (shen.lazyderef (tl W5177) V4992) (if (cons? W5179) (let W5180 (hd W5179) (let W5181 (shen.lazyderef (tl W5179) V4992) (if (cons? W5181) (let W5182 (hd W5181) (let W5183 (shen.lazyderef (tl W5181) V4992) (if (= W5183 ()) (do (shen.incinfs) (is! V4990 (shen.rectify-type (shen.deref W5180 V4992)) V4992 V4993 W4996 (freeze (shen.system-S-h W5182 (cons stream (cons in ())) V4991 V4992 V4993 W4996 V4995)))) false))) false))) false)) false)) false)) false) (if (= W5176 false) (let W5184 (if (shen.unlocked? V4993) (let W5185 (shen.lazyderef V4989 V4992) (if (cons? W5185) (let W5186 (shen.lazyderef (hd W5185) V4992) (if (= W5186 set) (let W5187 (shen.lazyderef (tl W5185) V4992) (if (cons? W5187) (let W5188 (hd W5187) (let W5189 (shen.lazyderef (tl W5187) V4992) (if (cons? W5189) (let W5190 (hd W5189) (let W5191 (shen.lazyderef (tl W5189) V4992) (if (= W5191 ()) (do (shen.incinfs) (shen.system-S-h W5188 symbol V4991 V4992 V4993 W4996 (freeze (shen.system-S-h (cons value (cons W5188 ())) V4990 V4991 V4992 V4993 W4996 (freeze (shen.system-S-h W5190 V4990 V4991 V4992 V4993 W4996 V4995)))))) false))) false))) false)) false)) false)) false) (if (= W5184 false) (let W5192 (if (shen.unlocked? V4993) (let W5193 (shen.newpv V4992) (shen.gc V4992 (do (shen.incinfs) (shen.l-rules V4991 W5193 false V4992 V4993 W4996 (freeze (shen.cut V4992 V4993 W4996 (freeze (shen.system-S-h V4989 V4990 W5193 V4992 V4993 W4996 V4995)))))))) false) (if (= W5192 false) (let W5194 (if (shen.unlocked? V4993) (do (shen.incinfs) (shen.search-user-datatypes (cons V4989 (cons (intern ":") (cons V4990 ()))) V4991 (value shen.*datatypes*) V4992 V4993 W4996 V4995)) false) (if (= W5194 false) (shen.unlock V4993 W4996) W5194)) W5192)) W5184)) W5176)) W5168)) W5147)) W5134)) W5104)) W5094)) W5073)) W5045)) W5024)) W5017)) W5010)) W5004)) W5000)) W4999)) W4998)) W4997))))

(defun shen.primitive (V5195 V5196 V5197 V5198 V5199 V5200) (let W5201 (if (shen.unlocked? V5198) (let W5202 (shen.lazyderef V5196 V5197) (let W5203 (freeze (do (shen.incinfs) (when (number? (shen.lazyderef V5195 V5197)) V5197 V5198 V5199 V5200))) (if (= W5202 number) (thaw W5203) (if (shen.pvar? W5202) (shen.bind! W5202 number V5197 W5203) false)))) false) (if (= W5201 false) (let W5204 (if (shen.unlocked? V5198) (let W5205 (shen.lazyderef V5196 V5197) (let W5206 (freeze (do (shen.incinfs) (when (boolean? (shen.lazyderef V5195 V5197)) V5197 V5198 V5199 V5200))) (if (= W5205 boolean) (thaw W5206) (if (shen.pvar? W5205) (shen.bind! W5205 boolean V5197 W5206) false)))) false) (if (= W5204 false) (let W5207 (if (shen.unlocked? V5198) (let W5208 (shen.lazyderef V5196 V5197) (let W5209 (freeze (do (shen.incinfs) (when (string? (shen.lazyderef V5195 V5197)) V5197 V5198 V5199 V5200))) (if (= W5208 string) (thaw W5209) (if (shen.pvar? W5208) (shen.bind! W5208 string V5197 W5209) false)))) false) (if (= W5207 false) (let W5210 (if (shen.unlocked? V5198) (let W5211 (shen.lazyderef V5196 V5197) (let W5212 (freeze (do (shen.incinfs) (when (symbol? (shen.lazyderef V5195 V5197)) V5197 V5198 V5199 V5200))) (if (= W5211 symbol) (thaw W5212) (if (shen.pvar? W5211) (shen.bind! W5211 symbol V5197 W5212) false)))) false) (if (= W5210 false) (if (shen.unlocked? V5198) (let W5213 (shen.lazyderef V5195 V5197) (if (= W5213 ()) (let W5214 (shen.lazyderef V5196 V5197) (let W5215 (lambda Z5216 (do (shen.incinfs) (thaw V5200))) (if (cons? W5214) (let W5217 (shen.lazyderef (hd W5214) V5197) (let W5218 (freeze (let W5219 (shen.lazyderef (tl W5214) V5197) (let W5220 (lambda Z5221 (W5215 Z5221)) (if (cons? W5219) (let W5222 (hd W5219) (let W5223 (shen.lazyderef (tl W5219) V5197) (let W5224 (freeze (W5220 W5222)) (if (= W5223 ()) (thaw W5224) (if (shen.pvar? W5223) (shen.bind! W5223 () V5197 W5224) false))))) (if (shen.pvar? W5219) (let W5225 (shen.newpv V5197) (shen.gc V5197 (shen.bind! W5219 (cons W5225 ()) V5197 (freeze (W5220 W5225))))) false))))) (if (= W5217 list) (thaw W5218) (if (shen.pvar? W5217) (shen.bind! W5217 list V5197 W5218) false)))) (if (shen.pvar? W5214) (let W5226 (shen.newpv V5197) (shen.gc V5197 (shen.bind! W5214 (cons list (cons W5226 ())) V5197 (freeze (W5215 W5226))))) false)))) false)) false) W5210)) W5207)) W5204)) W5201)))

(defun shen.by-hypothesis (V5227 V5228 V5229 V5230 V5231 V5232 V5233) (let W5234 (if (shen.unlocked? V5231) (let W5235 (shen.lazyderef V5229 V5230) (if (cons? W5235) (let W5236 (shen.lazyderef (hd W5235) V5230) (if (cons? W5236) (let W5237 (hd W5236) (let W5238 (shen.lazyderef (tl W5236) V5230) (if (cons? W5238) (let W5239 (hd W5238) (let W5240 (shen.lazyderef (tl W5238) V5230) (if (cons? W5240) (let W5241 (hd W5240) (let W5242 (shen.lazyderef (tl W5240) V5230) (if (= W5242 ()) (do (shen.incinfs) (when (= (shen.deref W5239 V5230) (intern ":")) V5230 V5231 V5232 (freeze (when (= (shen.deref V5227 V5230) (shen.deref W5237 V5230)) V5230 V5231 V5232 (freeze (is! V5228 W5241 V5230 V5231 V5232 V5233)))))) false))) false))) false))) false)) false)) false) (if (= W5234 false) (if (shen.unlocked? V5231) (let W5243 (shen.lazyderef V5229 V5230) (if (cons? W5243) (let W5244 (tl W5243) (do (shen.incinfs) (shen.by-hypothesis V5227 V5228 W5244 V5230 V5231 V5232 V5233))) false)) false) W5234)))

(defun shen.lookupsig (V5245 V5246 V5247 V5248 V5249 V5250) (if (shen.unlocked? V5248) (do (shen.incinfs) (shen.sigf (assoc V5245 (value shen.*sigf*)) V5246 V5247 V5248 V5249 V5250)) false))

(defun shen.sigf (V5265 V5266 V5267 V5268 V5269 V5270) (cond ((cons? V5265) ((((((tl V5265) V5266) V5267) V5268) V5269) V5270)) (true false)))

(defun shen.freshterm (V5271) (let W5272 (absvector 3) (let W5273 (address-> W5272 0 shen.print-freshterm) (let W5274 (address-> W5273 1 V5271) (let W5275 (address-> W5274 2 (set shen.*gensym* (+ 1 (value shen.*gensym*)))) W5275)))))

(defun shen.print-freshterm (V5276) (cn "&&" (str (<-address V5276 1))))

(defun shen.search-user-datatypes (V5277 V5278 V5279 V5280 V5281 V5282 V5283) (let W5284 (if (shen.unlocked? V5281) (let W5285 (shen.lazyderef V5279 V5280) (if (cons? W5285) (let W5286 (shen.lazyderef (hd W5285) V5280) (if (cons? W5286) (let W5287 (tl W5286) (do (shen.incinfs) (call (((shen.deref W5287 V5280) (shen.deref V5277 V5280)) (shen.deref V5278 V5280)) V5280 V5281 V5282 V5283))) false)) false)) false) (if (= W5284 false) (if (shen.unlocked? V5281) (let W5288 (shen.lazyderef V5279 V5280) (if (cons? W5288) (let W5289 (tl W5288) (do (shen.incinfs) (shen.search-user-datatypes V5277 V5278 W5289 V5280 V5281 V5282 V5283))) false)) false) W5284)))

(defun shen.l-rules (V5290 V5291 V5292 V5293 V5294 V5295 V5296) (let W5297 (+ V5295 1) (let W5298 (if (shen.unlocked? V5294) (let W5299 (shen.lazyderef V5290 V5293) (if (= W5299 ()) (let W5300 (shen.lazyderef V5292 V5293) (if (= W5300 true) (do (shen.incinfs) (shen.cut V5293 V5294 W5297 (freeze (bind V5291 () V5293 V5294 W5297 V5296)))) false)) false)) false) (if (= W5298 false) (let W5301 (if (shen.unlocked? V5294) (let W5302 (shen.lazyderef V5290 V5293) (if (cons? W5302) (let W5303 (shen.lazyderef (hd W5302) V5293) (if (cons? W5303) (let W5304 (shen.lazyderef (hd W5303) V5293) (if (cons? W5304) (let W5305 (shen.lazyderef (hd W5304) V5293) (if (= W5305 cons) (let W5306 (shen.lazyderef (tl W5304) V5293) (if (cons? W5306) (let W5307 (hd W5306) (let W5308 (shen.lazyderef (tl W5306) V5293) (if (cons? W5308) (let W5309 (hd W5308) (let W5310 (shen.lazyderef (tl W5308) V5293) (if (= W5310 ()) (let W5311 (shen.lazyderef (tl W5303) V5293) (if (cons? W5311) (let W5312 (hd W5311) (let W5313 (shen.lazyderef (tl W5311) V5293) (if (cons? W5313) (let W5314 (shen.lazyderef (hd W5313) V5293) (if (cons? W5314) (let W5315 (shen.lazyderef (hd W5314) V5293) (if (= W5315 list) (let W5316 (shen.lazyderef (tl W5314) V5293) (if (cons? W5316) (let W5317 (hd W5316) (let W5318 (shen.lazyderef (tl W5316) V5293) (if (= W5318 ()) (let W5319 (shen.lazyderef (tl W5313) V5293) (if (= W5319 ()) (let W5320 (tl W5302) (do (shen.incinfs) (when (= (shen.deref W5312 V5293) (intern ":")) V5293 V5294 W5297 (freeze (shen.cut V5293 V5294 W5297 (freeze (shen.l-rules (cons (cons W5307 (cons W5312 (cons W5317 ()))) (cons (cons W5309 (cons W5312 (cons (cons list (cons W5317 ())) ()))) W5320)) V5291 true V5293 V5294 W5297 V5296))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W5301 false) (let W5321 (if (shen.unlocked? V5294) (let W5322 (shen.lazyderef V5290 V5293) (if (cons? W5322) (let W5323 (shen.lazyderef (hd W5322) V5293) (if (cons? W5323) (let W5324 (shen.lazyderef (hd W5323) V5293) (if (cons? W5324) (let W5325 (shen.lazyderef (hd W5324) V5293) (if (= W5325 @p) (let W5326 (shen.lazyderef (tl W5324) V5293) (if (cons? W5326) (let W5327 (hd W5326) (let W5328 (shen.lazyderef (tl W5326) V5293) (if (cons? W5328) (let W5329 (hd W5328) (let W5330 (shen.lazyderef (tl W5328) V5293) (if (= W5330 ()) (let W5331 (shen.lazyderef (tl W5323) V5293) (if (cons? W5331) (let W5332 (hd W5331) (let W5333 (shen.lazyderef (tl W5331) V5293) (if (cons? W5333) (let W5334 (shen.lazyderef (hd W5333) V5293) (if (cons? W5334) (let W5335 (hd W5334) (let W5336 (shen.lazyderef (tl W5334) V5293) (if (cons? W5336) (let W5337 (shen.lazyderef (hd W5336) V5293) (if (= W5337 *) (let W5338 (shen.lazyderef (tl W5336) V5293) (if (cons? W5338) (let W5339 (hd W5338) (let W5340 (shen.lazyderef (tl W5338) V5293) (if (= W5340 ()) (let W5341 (shen.lazyderef (tl W5333) V5293) (if (= W5341 ()) (let W5342 (tl W5322) (do (shen.incinfs) (when (= (shen.deref W5332 V5293) (intern ":")) V5293 V5294 W5297 (freeze (shen.cut V5293 V5294 W5297 (freeze (shen.l-rules (cons (cons W5327 (cons W5332 (cons W5335 ()))) (cons (cons W5329 (cons W5332 (cons W5339 ()))) W5342)) V5291 true V5293 V5294 W5297 V5296))))))) false)) false))) false)) false)) false))) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W5321 false) (let W5343 (if (shen.unlocked? V5294) (let W5344 (shen.lazyderef V5290 V5293) (if (cons? W5344) (let W5345 (shen.lazyderef (hd W5344) V5293) (if (cons? W5345) (let W5346 (shen.lazyderef (hd W5345) V5293) (if (cons? W5346) (let W5347 (shen.lazyderef (hd W5346) V5293) (if (= W5347 @s) (let W5348 (shen.lazyderef (tl W5346) V5293) (if (cons? W5348) (let W5349 (hd W5348) (let W5350 (shen.lazyderef (tl W5348) V5293) (if (cons? W5350) (let W5351 (hd W5350) (let W5352 (shen.lazyderef (tl W5350) V5293) (if (= W5352 ()) (let W5353 (shen.lazyderef (tl W5345) V5293) (if (cons? W5353) (let W5354 (hd W5353) (let W5355 (shen.lazyderef (tl W5353) V5293) (if (cons? W5355) (let W5356 (shen.lazyderef (hd W5355) V5293) (if (= W5356 string) (let W5357 (shen.lazyderef (tl W5355) V5293) (if (= W5357 ()) (let W5358 (tl W5344) (do (shen.incinfs) (when (= (shen.deref W5354 V5293) (intern ":")) V5293 V5294 W5297 (freeze (shen.cut V5293 V5294 W5297 (freeze (shen.l-rules (cons (cons W5349 (cons W5354 (cons string ()))) (cons (cons W5351 (cons W5354 (cons string ()))) W5358)) V5291 true V5293 V5294 W5297 V5296))))))) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W5343 false) (let W5359 (if (shen.unlocked? V5294) (let W5360 (shen.lazyderef V5290 V5293) (if (cons? W5360) (let W5361 (shen.lazyderef (hd W5360) V5293) (if (cons? W5361) (let W5362 (shen.lazyderef (hd W5361) V5293) (if (cons? W5362) (let W5363 (shen.lazyderef (hd W5362) V5293) (if (= W5363 @v) (let W5364 (shen.lazyderef (tl W5362) V5293) (if (cons? W5364) (let W5365 (hd W5364) (let W5366 (shen.lazyderef (tl W5364) V5293) (if (cons? W5366) (let W5367 (hd W5366) (let W5368 (shen.lazyderef (tl W5366) V5293) (if (= W5368 ()) (let W5369 (shen.lazyderef (tl W5361) V5293) (if (cons? W5369) (let W5370 (hd W5369) (let W5371 (shen.lazyderef (tl W5369) V5293) (if (cons? W5371) (let W5372 (shen.lazyderef (hd W5371) V5293) (if (cons? W5372) (let W5373 (shen.lazyderef (hd W5372) V5293) (if (= W5373 vector) (let W5374 (shen.lazyderef (tl W5372) V5293) (if (cons? W5374) (let W5375 (hd W5374) (let W5376 (shen.lazyderef (tl W5374) V5293) (if (= W5376 ()) (let W5377 (shen.lazyderef (tl W5371) V5293) (if (= W5377 ()) (let W5378 (tl W5360) (do (shen.incinfs) (when (= (shen.deref W5370 V5293) (intern ":")) V5293 V5294 W5297 (freeze (shen.cut V5293 V5294 W5297 (freeze (shen.l-rules (cons (cons W5365 (cons W5370 (cons W5375 ()))) (cons (cons W5367 (cons W5370 (cons (cons vector (cons W5375 ())) ()))) W5378)) V5291 true V5293 V5294 W5297 V5296))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W5359 false) (let W5379 (if (shen.unlocked? V5294) (let W5380 (shen.lazyderef V5290 V5293) (if (cons? W5380) (let W5381 (hd W5380) (let W5382 (tl W5380) (let W5383 (shen.lazyderef V5291 V5293) (let W5384 (lambda Z5385 (lambda Z5386 (do (shen.incinfs) (bind Z5385 W5381 V5293 V5294 W5297 (freeze (shen.l-rules W5382 Z5386 V5292 V5293 V5294 W5297 V5296)))))) (if (cons? W5383) (let W5387 (hd W5383) (let W5388 (tl W5383) ((W5384 W5387) W5388))) (if (shen.pvar? W5383) (let W5389 (shen.newpv V5293) (shen.gc V5293 (let W5390 (shen.newpv V5293) (shen.gc V5293 (shen.bind! W5383 (cons W5389 W5390) V5293 (freeze ((W5384 W5389) W5390))))))) false)))))) false)) false) (if (= W5379 false) (shen.unlock V5294 W5297) W5379)) W5359)) W5343)) W5321)) W5301)) W5298))))

(defun shen.t* (V5391 V5392 V5393 V5394 V5395 V5396) (let W5397 (+ V5395 1) (let W5398 (if (shen.unlocked? V5394) (let W5399 (shen.lazyderef V5391 V5393) (if (cons? W5399) (let W5400 (shen.lazyderef (hd W5399) V5393) (if (= W5400 define) (let W5401 (shen.lazyderef (tl W5399) V5393) (if (cons? W5401) (let W5402 (hd W5401) (let W5403 (tl W5401) (let W5404 (shen.newpv V5393) (shen.gc V5393 (let W5405 (shen.newpv V5393) (shen.gc V5393 (let W5406 (shen.newpv V5393) (shen.gc V5393 (let W5407 (shen.newpv V5393) (shen.gc V5393 (do (shen.incinfs) (shen.cut V5393 V5394 W5397 (freeze (bind W5404 (shen.sigxrules (cons W5402 W5403)) V5393 V5394 W5397 (freeze (bind W5407 (fst (shen.lazyderef W5404 V5393)) V5393 V5394 W5397 (freeze (bind W5405 (snd (shen.lazyderef W5404 V5393)) V5393 V5394 W5397 (freeze (bind W5406 (shen.freshen-sig (shen.deref W5407 V5393)) V5393 V5394 W5397 (freeze (shen.t*-rules W5402 W5405 W5406 1 V5393 V5394 W5397 (freeze (is W5407 V5392 V5393 V5394 W5397 V5396)))))))))))))))))))))))) false)) false)) false)) false) (if (= W5398 false) (shen.unlock V5394 W5397) W5398))))

(defun shen.sigxrules (V5408) (compile (lambda Z5409 (shen.<sig*rules> Z5409)) V5408))

(defun shen.<sig*rules> (V5410) (let W5411 (if (cons? V5410) (let W5412 (tail V5410) (if (shen.hds=? W5412 {) (let W5413 (tail W5412) (let W5414 (shen.<signature> W5413) (if (shen.parse-failure? W5414) (shen.parse-failure) (let W5415 (shen.<-out W5414) (let W5416 (shen.in-> W5414) (if (shen.hds=? W5416 }) (let W5417 (tail W5416) (let W5418 (shen.<rules*> W5417) (if (shen.parse-failure? W5418) (shen.parse-failure) (let W5419 (shen.<-out W5418) (let W5420 (shen.in-> W5418) (shen.comb W5420 (let W5421 (shen.rectify-type W5415) (@p W5421 W5419)))))))) (shen.parse-failure))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W5411) (shen.parse-failure) W5411)))

(defun shen.freshen-sig (V5422) (let W5423 (shen.extract-vars V5422) (let W5424 (map (lambda Z5425 (cons Z5425 (shen.freshterm (concat & Z5425)))) W5423) (shen.freshen-type W5424 V5422))))

(defun shen.freshen-type (V5426 V5427) (cond ((= () V5426) V5427) ((and (cons? V5426) (cons? (hd V5426))) (shen.freshen-type (tl V5426) (subst (tl (hd V5426)) (hd (hd V5426)) V5427))) (true (shen.f-error shen.freshen-type))))

(defun shen.<rules*> (V5428) (let W5429 (let W5430 (shen.<rule*> V5428) (if (shen.parse-failure? W5430) (shen.parse-failure) (let W5431 (shen.<-out W5430) (let W5432 (shen.in-> W5430) (let W5433 (shen.<rules*> W5432) (if (shen.parse-failure? W5433) (shen.parse-failure) (let W5434 (shen.<-out W5433) (let W5435 (shen.in-> W5433) (shen.comb W5435 (cons W5431 W5434)))))))))) (if (shen.parse-failure? W5429) (let W5436 (let W5437 (shen.<rule*> V5428) (if (shen.parse-failure? W5437) (shen.parse-failure) (let W5438 (shen.<-out W5437) (let W5439 (shen.in-> W5437) (shen.comb W5439 (cons W5438 ())))))) (if (shen.parse-failure? W5436) (shen.parse-failure) W5436)) W5429)))

(defun shen.<rule*> (V5440) (let W5441 (let W5442 (shen.<patterns> V5440) (if (shen.parse-failure? W5442) (shen.parse-failure) (let W5443 (shen.<-out W5442) (let W5444 (shen.in-> W5442) (if (shen.hds=? W5444 ->) (let W5445 (tail W5444) (if (cons? W5445) (let W5446 (head W5445) (let W5447 (tail W5445) (if (shen.hds=? W5447 where) (let W5448 (tail W5447) (if (cons? W5448) (let W5449 (head W5448) (let W5450 (tail W5448) (shen.comb W5450 (@p W5443 (cons where (cons W5449 (cons W5446 ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5441) (let W5451 (let W5452 (shen.<patterns> V5440) (if (shen.parse-failure? W5452) (shen.parse-failure) (let W5453 (shen.<-out W5452) (let W5454 (shen.in-> W5452) (if (shen.hds=? W5454 <-) (let W5455 (tail W5454) (if (cons? W5455) (let W5456 (head W5455) (let W5457 (tail W5455) (if (shen.hds=? W5457 where) (let W5458 (tail W5457) (if (cons? W5458) (let W5459 (head W5458) (let W5460 (tail W5458) (shen.comb W5460 (@p W5453 (shen.correct (cons where (cons W5459 (cons W5456 ())))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5451) (let W5461 (let W5462 (shen.<patterns> V5440) (if (shen.parse-failure? W5462) (shen.parse-failure) (let W5463 (shen.<-out W5462) (let W5464 (shen.in-> W5462) (if (shen.hds=? W5464 <-) (let W5465 (tail W5464) (if (cons? W5465) (let W5466 (head W5465) (let W5467 (tail W5465) (shen.comb W5467 (@p W5463 (shen.correct W5466))))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5461) (let W5468 (let W5469 (shen.<patterns> V5440) (if (shen.parse-failure? W5469) (shen.parse-failure) (let W5470 (shen.<-out W5469) (let W5471 (shen.in-> W5469) (if (shen.hds=? W5471 ->) (let W5472 (tail W5471) (if (cons? W5472) (let W5473 (head W5472) (let W5474 (tail W5472) (shen.comb W5474 (@p W5470 W5473)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5468) (shen.parse-failure) W5468)) W5461)) W5451)) W5441)))

(defun shen.correct (V5475) (cond ((and (cons? V5475) (and (= where (hd V5475)) (and (cons? (tl V5475)) (and (cons? (tl (tl V5475))) (and (cons? (hd (tl (tl V5475)))) (and (= fail-if (hd (hd (tl (tl V5475))))) (and (cons? (tl (hd (tl (tl V5475))))) (and (cons? (tl (tl (hd (tl (tl V5475)))))) (and (= () (tl (tl (tl (hd (tl (tl V5475))))))) (= () (tl (tl (tl V5475))))))))))))) (cons where (cons (cons and (cons (hd (tl V5475)) (cons (cons not (cons (tl (hd (tl (tl V5475)))) ())) ()))) (tl (tl (hd (tl (tl V5475)))))))) ((and (cons? V5475) (and (= where (hd V5475)) (and (cons? (tl V5475)) (and (cons? (tl (tl V5475))) (= () (tl (tl (tl V5475)))))))) (cons where (cons (cons and (cons (hd (tl V5475)) (cons (cons not (cons (cons = (cons (hd (tl (tl V5475))) (cons (cons fail ()) ()))) ())) ()))) (tl (tl V5475))))) ((and (cons? V5475) (and (= fail-if (hd V5475)) (and (cons? (tl V5475)) (and (cons? (tl (tl V5475))) (= () (tl (tl (tl V5475)))))))) (cons where (cons (cons not (cons (tl V5475) ())) (tl (tl V5475))))) (true (cons where (cons (cons not (cons (cons = (cons V5475 (cons (cons fail ()) ()))) ())) (cons V5475 ()))))))

(defun shen.t*-rules (V5476 V5477 V5478 V5479 V5480 V5481 V5482 V5483) (let W5484 (+ V5482 1) (let W5485 (if (shen.unlocked? V5481) (let W5486 (shen.lazyderef V5477 V5480) (if (= W5486 ()) (do (shen.incinfs) (thaw V5483)) false)) false) (if (= W5485 false) (let W5487 (if (shen.unlocked? V5481) (let W5488 (shen.lazyderef V5477 V5480) (if (cons? W5488) (let W5489 (hd W5488) (let W5490 (tl W5488) (let W5491 (shen.newpv V5480) (shen.gc V5480 (do (shen.incinfs) (bind W5491 (shen.freshen-rule (shen.deref W5489 V5480)) V5480 V5481 W5484 (freeze (shen.t*-rule V5476 V5479 (fst (shen.lazyderef W5491 V5480)) (snd (shen.lazyderef W5491 V5480)) V5478 V5480 V5481 W5484 (freeze (shen.cut V5480 V5481 W5484 (freeze (shen.t*-rules V5476 W5490 V5478 (+ V5479 1) V5480 V5481 W5484 V5483)))))))))))) false)) false) (if (= W5487 false) (shen.unlock V5481 W5484) W5487)) W5485))))

(defun shen.freshen-rule (V5492) (cond ((tuple? V5492) (let W5493 (shen.extract-vars (fst V5492)) (let W5494 (map (lambda Z5495 (cons Z5495 (shen.freshterm Z5495))) W5493) (@p (shen.freshen W5494 (fst V5492)) (shen.freshen W5494 (snd V5492)))))) (true (shen.f-error shen.freshen-rule))))

(defun shen.freshen (V5496 V5497) (cond ((= () V5496) V5497) ((and (cons? V5496) (cons? (hd V5496))) (shen.freshen (tl V5496) (shen.beta (hd (hd V5496)) (tl (hd V5496)) V5497))) (true (shen.f-error shen.freshen))))

(defun shen.t*-rule (V5498 V5499 V5500 V5501 V5502 V5503 V5504 V5505 V5506) (let W5507 (if (shen.unlocked? V5504) (do (shen.incinfs) (shen.t*-rule-h V5500 V5501 V5502 V5503 V5504 V5505 V5506)) false) (if (= W5507 false) (if (shen.unlocked? V5504) (let W5508 (shen.newpv V5503) (shen.gc V5503 (do (shen.incinfs) (bind W5508 (simple-error (cn "type error in rule " (shen.app V5499 (cn " of " (shen.app V5498 "
" shen.a)) shen.a))) V5503 V5504 V5505 V5506)))) false) W5507)))

(defun shen.t*-rule-h (V5509 V5510 V5511 V5512 V5513 V5514 V5515) (let W5516 (+ V5514 1) (let W5517 (if (shen.unlocked? V5513) (let W5518 (shen.lazyderef V5509 V5512) (if (= W5518 ()) (let W5519 (shen.lazyderef V5511 V5512) (if (cons? W5519) (let W5520 (shen.lazyderef (hd W5519) V5512) (if (= W5520 -->) (let W5521 (shen.lazyderef (tl W5519) V5512) (if (cons? W5521) (let W5522 (hd W5521) (let W5523 (shen.lazyderef (tl W5521) V5512) (if (= W5523 ()) (do (shen.incinfs) (shen.cut V5512 V5513 W5516 (freeze (shen.t*-correct V5510 W5522 () V5512 V5513 W5516 V5515)))) false))) false)) false)) false)) false)) false) (if (= W5517 false) (let W5524 (if (shen.unlocked? V5513) (let W5525 (shen.newpv V5512) (shen.gc V5512 (let W5526 (shen.newpv V5512) (shen.gc V5512 (let W5527 (shen.newpv V5512) (shen.gc V5512 (do (shen.incinfs) (shen.p-hyps (shen.freshterms V5509) W5525 V5512 V5513 W5516 (freeze (shen.t*-integrity V5509 V5511 W5525 W5526 V5512 V5513 W5516 (freeze (shen.cut V5512 V5513 W5516 (freeze (shen.myassume V5509 V5511 W5527 V5512 V5513 W5516 (freeze (shen.t*-correct V5510 W5526 W5527 V5512 V5513 W5516 V5515)))))))))))))))) false) (if (= W5524 false) (shen.unlock V5513 W5516) W5524)) W5517))))

(defun shen.myassume (V5528 V5529 V5530 V5531 V5532 V5533 V5534) (let W5535 (if (shen.unlocked? V5532) (let W5536 (shen.lazyderef V5528 V5531) (if (= W5536 ()) (let W5537 (shen.lazyderef V5530 V5531) (let W5538 (freeze (do (shen.incinfs) (thaw V5534))) (if (= W5537 ()) (thaw W5538) (if (shen.pvar? W5537) (shen.bind! W5537 () V5531 W5538) false)))) false)) false) (if (= W5535 false) (if (shen.unlocked? V5532) (let W5539 (shen.lazyderef V5528 V5531) (if (cons? W5539) (let W5540 (hd W5539) (let W5541 (tl W5539) (let W5542 (shen.lazyderef V5529 V5531) (if (cons? W5542) (let W5543 (hd W5542) (let W5544 (shen.lazyderef (tl W5542) V5531) (if (cons? W5544) (let W5545 (shen.lazyderef (hd W5544) V5531) (if (= W5545 -->) (let W5546 (shen.lazyderef (tl W5544) V5531) (if (cons? W5546) (let W5547 (hd W5546) (let W5548 (shen.lazyderef (tl W5546) V5531) (if (= W5548 ()) (let W5549 (shen.lazyderef V5530 V5531) (let W5550 (lambda Z5551 (lambda Z5552 (lambda Z5553 (lambda Z5554 (do (shen.incinfs) (is! W5543 Z5553 V5531 V5532 V5533 (freeze (is! W5540 Z5551 V5531 V5532 V5533 (freeze (bind Z5552 (intern ":") V5531 V5532 V5533 (freeze (shen.myassume W5541 W5547 Z5554 V5531 V5532 V5533 V5534)))))))))))) (if (cons? W5549) (let W5555 (shen.lazyderef (hd W5549) V5531) (let W5556 (lambda Z5557 (lambda Z5558 (lambda Z5559 (let W5560 (tl W5549) ((((W5550 Z5557) Z5558) Z5559) W5560))))) (if (cons? W5555) (let W5561 (hd W5555) (let W5562 (shen.lazyderef (tl W5555) V5531) (let W5563 (lambda Z5564 (lambda Z5565 (((W5556 W5561) Z5564) Z5565))) (if (cons? W5562) (let W5566 (hd W5562) (let W5567 (shen.lazyderef (tl W5562) V5531) (let W5568 (lambda Z5569 ((W5563 W5566) Z5569)) (if (cons? W5567) (let W5570 (hd W5567) (let W5571 (shen.lazyderef (tl W5567) V5531) (let W5572 (freeze (W5568 W5570)) (if (= W5571 ()) (thaw W5572) (if (shen.pvar? W5571) (shen.bind! W5571 () V5531 W5572) false))))) (if (shen.pvar? W5567) (let W5573 (shen.newpv V5531) (shen.gc V5531 (shen.bind! W5567 (cons W5573 ()) V5531 (freeze (W5568 W5573))))) false))))) (if (shen.pvar? W5562) (let W5574 (shen.newpv V5531) (shen.gc V5531 (let W5575 (shen.newpv V5531) (shen.gc V5531 (shen.bind! W5562 (cons W5574 (cons W5575 ())) V5531 (freeze ((W5563 W5574) W5575))))))) false))))) (if (shen.pvar? W5555) (let W5576 (shen.newpv V5531) (shen.gc V5531 (let W5577 (shen.newpv V5531) (shen.gc V5531 (let W5578 (shen.newpv V5531) (shen.gc V5531 (shen.bind! W5555 (cons W5576 (cons W5577 (cons W5578 ()))) V5531 (freeze (((W5556 W5576) W5577) W5578))))))))) false)))) (if (shen.pvar? W5549) (let W5579 (shen.newpv V5531) (shen.gc V5531 (let W5580 (shen.newpv V5531) (shen.gc V5531 (let W5581 (shen.newpv V5531) (shen.gc V5531 (let W5582 (shen.newpv V5531) (shen.gc V5531 (shen.bind! W5549 (cons (cons W5579 (cons W5580 (cons W5581 ()))) W5582) V5531 (freeze ((((W5550 W5579) W5580) W5581) W5582))))))))))) false)))) false))) false)) false)) false))) false)))) false)) false) W5535)))

(defun shen.freshterms (V5585) (cond ((= () V5585) ()) ((and (cons? V5585) (cons? (hd V5585))) (shen.freshterms (append (hd V5585) (tl V5585)))) ((and (cons? V5585) (shen.freshterm? (hd V5585))) (adjoin (hd V5585) (shen.freshterms (tl V5585)))) ((cons? V5585) (shen.freshterms (tl V5585))) (true (shen.f-error shen.freshterms))))

(defun shen.p-hyps (V5586 V5587 V5588 V5589 V5590 V5591) (let W5592 (if (shen.unlocked? V5589) (let W5593 (shen.lazyderef V5586 V5588) (if (= W5593 ()) (let W5594 (shen.lazyderef V5587 V5588) (let W5595 (freeze (do (shen.incinfs) (thaw V5591))) (if (= W5594 ()) (thaw W5595) (if (shen.pvar? W5594) (shen.bind! W5594 () V5588 W5595) false)))) false)) false) (if (= W5592 false) (if (shen.unlocked? V5589) (let W5596 (shen.lazyderef V5586 V5588) (if (cons? W5596) (let W5597 (hd W5596) (let W5598 (tl W5596) (let W5599 (shen.lazyderef V5587 V5588) (let W5600 (lambda Z5601 (lambda Z5602 (lambda Z5603 (lambda Z5604 (do (shen.incinfs) (bind Z5601 W5597 V5588 V5589 V5590 (freeze (bind Z5602 (intern ":") V5588 V5589 V5590 (freeze (shen.p-hyps W5598 Z5604 V5588 V5589 V5590 V5591)))))))))) (if (cons? W5599) (let W5605 (shen.lazyderef (hd W5599) V5588) (let W5606 (lambda Z5607 (lambda Z5608 (lambda Z5609 (let W5610 (tl W5599) ((((W5600 Z5607) Z5608) Z5609) W5610))))) (if (cons? W5605) (let W5611 (hd W5605) (let W5612 (shen.lazyderef (tl W5605) V5588) (let W5613 (lambda Z5614 (lambda Z5615 (((W5606 W5611) Z5614) Z5615))) (if (cons? W5612) (let W5616 (hd W5612) (let W5617 (shen.lazyderef (tl W5612) V5588) (let W5618 (lambda Z5619 ((W5613 W5616) Z5619)) (if (cons? W5617) (let W5620 (hd W5617) (let W5621 (shen.lazyderef (tl W5617) V5588) (let W5622 (freeze (W5618 W5620)) (if (= W5621 ()) (thaw W5622) (if (shen.pvar? W5621) (shen.bind! W5621 () V5588 W5622) false))))) (if (shen.pvar? W5617) (let W5623 (shen.newpv V5588) (shen.gc V5588 (shen.bind! W5617 (cons W5623 ()) V5588 (freeze (W5618 W5623))))) false))))) (if (shen.pvar? W5612) (let W5624 (shen.newpv V5588) (shen.gc V5588 (let W5625 (shen.newpv V5588) (shen.gc V5588 (shen.bind! W5612 (cons W5624 (cons W5625 ())) V5588 (freeze ((W5613 W5624) W5625))))))) false))))) (if (shen.pvar? W5605) (let W5626 (shen.newpv V5588) (shen.gc V5588 (let W5627 (shen.newpv V5588) (shen.gc V5588 (let W5628 (shen.newpv V5588) (shen.gc V5588 (shen.bind! W5605 (cons W5626 (cons W5627 (cons W5628 ()))) V5588 (freeze (((W5606 W5626) W5627) W5628))))))))) false)))) (if (shen.pvar? W5599) (let W5629 (shen.newpv V5588) (shen.gc V5588 (let W5630 (shen.newpv V5588) (shen.gc V5588 (let W5631 (shen.newpv V5588) (shen.gc V5588 (let W5632 (shen.newpv V5588) (shen.gc V5588 (shen.bind! W5599 (cons (cons W5629 (cons W5630 (cons W5631 ()))) W5632) V5588 (freeze ((((W5600 W5629) W5630) W5631) W5632))))))))))) false)))))) false)) false) W5592)))

(defun shen.t*-correct (V5633 V5634 V5635 V5636 V5637 V5638 V5639) (let W5640 (+ V5638 1) (let W5641 (if (shen.unlocked? V5637) (let W5642 (shen.lazyderef V5633 V5636) (if (cons? W5642) (let W5643 (shen.lazyderef (hd W5642) V5636) (if (= W5643 where) (let W5644 (shen.lazyderef (tl W5642) V5636) (if (cons? W5644) (let W5645 (hd W5644) (let W5646 (shen.lazyderef (tl W5644) V5636) (if (cons? W5646) (let W5647 (hd W5646) (let W5648 (shen.lazyderef (tl W5646) V5636) (if (= W5648 ()) (let W5649 (shen.newpv V5636) (shen.gc V5636 (do (shen.incinfs) (shen.cut V5636 V5637 W5640 (freeze (bind W5649 (shen.curry W5645) V5636 V5637 W5640 (freeze (shen.system-S-h W5649 boolean V5635 V5636 V5637 W5640 (freeze (shen.cut V5636 V5637 W5640 (freeze (shen.t*-correct W5647 V5634 (cons (cons W5649 (cons (intern ":") (cons verified ()))) V5635) V5636 V5637 W5640 V5639)))))))))))) false))) false))) false)) false)) false)) false) (if (= W5641 false) (let W5650 (if (shen.unlocked? V5637) (do (shen.incinfs) (shen.system-S-h (shen.curry V5633) V5634 V5635 V5636 V5637 W5640 V5639)) false) (if (= W5650 false) (shen.unlock V5637 W5640) W5650)) W5641))))

(defun shen.t*-integrity (V5651 V5652 V5653 V5654 V5655 V5656 V5657 V5658) (let W5659 (if (shen.unlocked? V5656) (let W5660 (shen.lazyderef V5651 V5655) (if (= W5660 ()) (do (shen.incinfs) (is! V5652 V5654 V5655 V5656 V5657 V5658)) false)) false) (if (= W5659 false) (if (shen.unlocked? V5656) (let W5661 (shen.lazyderef V5651 V5655) (if (cons? W5661) (let W5662 (hd W5661) (let W5663 (tl W5661) (let W5664 (shen.lazyderef V5652 V5655) (if (cons? W5664) (let W5665 (hd W5664) (let W5666 (shen.lazyderef (tl W5664) V5655) (if (cons? W5666) (let W5667 (shen.lazyderef (hd W5666) V5655) (if (= W5667 -->) (let W5668 (shen.lazyderef (tl W5666) V5655) (if (cons? W5668) (let W5669 (hd W5668) (let W5670 (shen.lazyderef (tl W5668) V5655) (if (= W5670 ()) (do (shen.incinfs) (shen.system-S-h W5662 W5665 V5653 V5655 V5656 V5657 (freeze (shen.t*-integrity W5663 W5669 V5653 V5654 V5655 V5656 V5657 V5658)))) false))) false)) false)) false))) false)))) false)) false) W5659)))

(defun shen.freshterm? (V5671) (and (absvector? V5671) (and (not (string? V5671)) (= (<-address V5671 0) shen.print-freshterm))))

