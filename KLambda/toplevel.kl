(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda Z12164 (do (pr (error-to-string Z12164) (stoutput)) (nl 0)))) (shen.loop)))))

(defun shen.credits () (do (pr "
Shen, www.shenlanguage.org, copyright (C) 2010-2023, Mark Tarver
" (stoutput)) (do (pr (cn "version: S" (shen.app (value *version*) (cn ", language: " (shen.app (value *language*) (cn ", platform: " (shen.app (value *implementation*) (cn " " (shen.app (value *release*) "
" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (pr (cn "port " (shen.app (value *port*) (cn ", ported by " (shen.app (value *porters*) "

" shen.a)) shen.a)) (stoutput)))))

(defun shen.initialise_environment () (do (set shen.*call* 0) (set shen.*infs* 0)))

(defun shen.prompt () (if (value shen.*tc*) (pr (cn "
(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (pr (cn "
(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.read-evaluate-print () (let W12165 (value shen.*package*) (let W12166 (shen.package-user-input W12165 (lineread (stinput))) (let W12167 (shen.update-history) (shen.evaluate-lineread W12166 W12167 (value shen.*tc*))))))

(defun shen.package-user-input (V12168 V12169) (cond ((= null V12168) V12169) (true (let W12170 (str V12168) (let W12171 (external V12168) (map (lambda Z12172 (shen.pui-h W12170 W12171 Z12172)) V12169))))))

(defun shen.pui-h (V12177 V12178 V12179) (cond ((and (cons? V12179) (and (= fn (hd V12179)) (and (cons? (tl V12179)) (= () (tl (tl V12179)))))) (if (shen.internal? (hd (tl V12179)) V12177 V12178) (cons fn (cons (shen.intern-in-package V12177 (hd (tl V12179))) ())) V12179)) ((cons? V12179) (if (shen.internal? (hd V12179) V12177 V12178) (cons (shen.intern-in-package V12177 (hd V12179)) (map (lambda Z12180 (shen.pui-h V12177 V12178 Z12180)) (tl V12179))) (if (cons? (hd V12179)) (map (lambda Z12181 (shen.pui-h V12177 V12178 Z12181)) V12179) (cons (hd V12179) (map (lambda Z12182 (shen.pui-h V12177 V12178 Z12182)) (tl V12179)))))) (true V12179)))

(defun shen.update-history () (set shen.*history* (cons (shen.trim-it (it)) (value shen.*history*))))

(defun shen.trim-it (V12183) (cond ((and (shen.+string? V12183) (shen.whitespace? (string->n (hdstr V12183)))) (shen.trim-it (tlstr V12183))) (true V12183)))

(defun shen.evaluate-lineread (V12202 V12203 V12204) (cond ((and (cons? V12202) (and (= () (tl V12202)) (and (cons? V12203) (and (= "!!" (hd V12203)) (cons? (tl V12203)))))) (let W12205 (read-from-string (hd (tl V12203))) (let W12206 (set shen.*history* (cons (hd (tl V12203)) (tl V12203))) (let W12207 (pr (shen.app (hd (tl V12203)) "
" shen.a) (stoutput)) (shen.evaluate-lineread W12205 W12206 V12204))))) ((and (cons? V12202) (and (= () (tl V12202)) (and (cons? V12203) (and (shen.+string? (hd V12203)) (= "%" (hdstr (hd V12203))))))) (let W12208 (hd (read-from-string (tlstr (hd V12203)))) (let W12209 (shen.peek-history W12208 (tlstr (hd V12203)) (tl V12203)) (let W12210 (set shen.*history* (tl V12203)) (abort))))) ((and (cons? V12202) (and (= () (tl V12202)) (and (cons? V12203) (and (shen.+string? (hd V12203)) (= "!" (hdstr (hd V12203))))))) (let W12211 (hd (read-from-string (tlstr (hd V12203)))) (let W12212 (shen.use-history W12211 (tlstr (hd V12203)) (tl V12203)) (let W12213 (pr (shen.app W12212 "
" shen.a) (stoutput)) (let W12214 (read-from-string W12212) (let W12215 (set shen.*history* (cons W12212 (tl V12203))) (shen.evaluate-lineread W12214 W12215 V12204))))))) ((and (cons? V12202) (and (= () (tl V12202)) (and (cons? V12203) (and (shen.+string? (hd V12203)) (= "%" (hdstr (hd V12203))))))) (let W12216 (hd (read-from-string (tlstr (hd V12203)))) (let W12217 (shen.peek-history W12216 (tlstr (hd V12203)) (tl V12203)) (let W12218 (set shen.*history* (tl V12203)) (abort))))) ((= true V12204) (shen.check-eval-and-print V12202)) ((= false V12204) (shen.eval-and-print V12202)) (true (simple-error "implementation error in shen.evaluate-lineread"))))

(defun shen.use-history (V12219 V12220 V12221) (if (integer? V12219) (nth (+ 1 V12219) (reverse V12221)) (if (symbol? V12219) (shen.string-match V12220 V12221) (simple-error "! expects a number or a symbol
"))))

(defun shen.peek-history (V12222 V12223 V12224) (if (integer? V12222) (pr (cn "
" (shen.app (nth (+ 1 V12222) (reverse V12224)) "" shen.a)) (stoutput)) (if (or (= V12223 "") (symbol? V12222)) (shen.recursive-string-match 0 V12223 (reverse V12224)) (simple-error "% expects a number or a symbol
"))))

(defun shen.string-match (V12234 V12235) (cond ((= () V12235) (simple-error "
input not found")) ((and (cons? V12235) (shen.string-prefix? V12234 (hd V12235))) (hd V12235)) ((cons? V12235) (shen.string-match V12234 (tl V12235))) (true (simple-error "implementation error in shen.string-match"))))

(defun shen.string-prefix? (V12243 V12244) (cond ((= "" V12243) true) ((and (shen.+string? V12243) (shen.whitespace? (string->n (hdstr V12243)))) (shen.string-prefix? (tlstr V12243) V12244)) ((and (shen.+string? V12244) (shen.whitespace? (string->n (hdstr V12244)))) (shen.string-prefix? V12243 (tlstr V12244))) ((and (shen.+string? V12244) (= "(" (hdstr V12244))) (shen.string-prefix? V12243 (tlstr V12244))) ((and (shen.+string? V12243) (and (shen.+string? V12244) (= (hdstr V12243) (hdstr V12244)))) (shen.string-prefix? (tlstr V12243) (tlstr V12244))) (true false)))

(defun shen.recursive-string-match (V12255 V12256 V12257) (cond ((= () V12257) shen.skip) ((cons? V12257) (do (if (shen.string-prefix? V12256 (hd V12257)) (pr (shen.app V12255 (cn ". " (shen.app (hd V12257) "
" shen.a)) shen.a) (stoutput)) shen.skip) (shen.recursive-string-match (+ V12255 1) V12256 (tl V12257)))) (true (simple-error "implementation error in shen.recursive-string-match"))))

