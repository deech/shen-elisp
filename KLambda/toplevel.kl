(defun shen.repl () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda Z5695 (shen.toplevel-display-exception Z5695))) (shen.loop)))))

(defun shen.toplevel-display-exception (V5696) (do (pr (error-to-string V5696) (stoutput)) (nl 0)))

(defun shen.credits () (do (pr "
Shen, www.shenlanguage.org, copyright (C) 2010-2023, Mark Tarver
" (stoutput)) (do (pr (cn "version: S" (shen.app (value *version*) (cn ", language: " (shen.app (value *language*) (cn ", platform: " (shen.app (value *implementation*) (cn " " (shen.app (value *release*) "
" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (pr (cn "port " (shen.app (value *port*) (cn ", ported by " (shen.app (value *porters*) "

" shen.a)) shen.a)) (stoutput)))))

(defun shen.initialise_environment () (do (set shen.*call* 0) (set shen.*infs* 0)))

(defun shen.prompt () (if (value shen.*tc*) (pr (cn "
(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (pr (cn "
(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.read-evaluate-print () (let W5697 (value shen.*package*) (let W5698 (shen.package-user-input W5697 (lineread (stinput))) (let W5699 (shen.update-history) (shen.evaluate-lineread W5698 W5699 (value shen.*tc*))))))

(defun shen.package-user-input (V5700 V5701) (cond ((= null V5700) V5701) (true (let W5702 (str V5700) (let W5703 (external V5700) (map (lambda Z5704 (shen.pui-h W5702 W5703 Z5704)) V5701))))))

(defun shen.pui-h (V5709 V5710 V5711) (cond ((and (cons? V5711) (and (= fn (hd V5711)) (and (cons? (tl V5711)) (= () (tl (tl V5711)))))) (if (shen.internal? (hd (tl V5711)) V5709 V5710) (cons fn (cons (shen.intern-in-package V5709 (hd (tl V5711))) ())) V5711)) ((cons? V5711) (if (shen.internal? (hd V5711) V5709 V5710) (cons (shen.intern-in-package V5709 (hd V5711)) (map (lambda Z5712 (shen.pui-h V5709 V5710 Z5712)) (tl V5711))) (if (cons? (hd V5711)) (map (lambda Z5713 (shen.pui-h V5709 V5710 Z5713)) V5711) (cons (hd V5711) (map (lambda Z5714 (shen.pui-h V5709 V5710 Z5714)) (tl V5711)))))) (true V5711)))

(defun shen.update-history () (set shen.*history* (cons (shen.trim-it (it)) (value shen.*history*))))

(defun shen.trim-it (V5715) (cond ((and (shen.+string? V5715) (shen.whitespace? (string->n (hdstr V5715)))) (shen.trim-it (tlstr V5715))) (true V5715)))

(defun shen.evaluate-lineread (V5734 V5735 V5736) (cond ((and (cons? V5734) (and (= () (tl V5734)) (and (cons? V5735) (and (= "!!" (hd V5735)) (cons? (tl V5735)))))) (let W5737 (read-from-string (hd (tl V5735))) (let W5738 (set shen.*history* (cons (hd (tl V5735)) (tl V5735))) (let W5739 (pr (shen.app (hd (tl V5735)) "
" shen.a) (stoutput)) (shen.evaluate-lineread W5737 W5738 V5736))))) ((and (cons? V5734) (and (= () (tl V5734)) (and (cons? V5735) (and (shen.+string? (hd V5735)) (= "%" (hdstr (hd V5735))))))) (let W5740 (hd (read-from-string (tlstr (hd V5735)))) (let W5741 (shen.peek-history W5740 (tlstr (hd V5735)) (tl V5735)) (let W5742 (set shen.*history* (tl V5735)) (abort))))) ((and (cons? V5734) (and (= () (tl V5734)) (and (cons? V5735) (and (shen.+string? (hd V5735)) (= "!" (hdstr (hd V5735))))))) (let W5743 (hd (read-from-string (tlstr (hd V5735)))) (let W5744 (shen.use-history W5743 (tlstr (hd V5735)) (tl V5735)) (let W5745 (pr (shen.app W5744 "
" shen.a) (stoutput)) (let W5746 (read-from-string W5744) (let W5747 (set shen.*history* (cons W5744 (tl V5735))) (shen.evaluate-lineread W5746 W5747 V5736))))))) ((and (cons? V5734) (and (= () (tl V5734)) (and (cons? V5735) (and (shen.+string? (hd V5735)) (= "%" (hdstr (hd V5735))))))) (let W5748 (hd (read-from-string (tlstr (hd V5735)))) (let W5749 (shen.peek-history W5748 (tlstr (hd V5735)) (tl V5735)) (let W5750 (set shen.*history* (tl V5735)) (abort))))) ((= true V5736) (shen.check-eval-and-print V5734)) ((= false V5736) (shen.eval-and-print V5734)) (true (simple-error "implementation error in shen.evaluate-lineread"))))

(defun shen.use-history (V5751 V5752 V5753) (if (integer? V5751) (nth (+ 1 V5751) (reverse V5753)) (if (symbol? V5751) (shen.string-match V5752 V5753) (simple-error "! expects a number or a symbol
"))))

(defun shen.peek-history (V5754 V5755 V5756) (if (integer? V5754) (pr (cn "
" (shen.app (nth (+ 1 V5754) (reverse V5756)) "" shen.a)) (stoutput)) (if (or (= V5755 "") (symbol? V5754)) (shen.recursive-string-match 0 V5755 (reverse V5756)) (simple-error "% expects a number or a symbol
"))))

(defun shen.string-match (V5766 V5767) (cond ((= () V5767) (simple-error "
input not found")) ((and (cons? V5767) (shen.string-prefix? V5766 (hd V5767))) (hd V5767)) ((cons? V5767) (shen.string-match V5766 (tl V5767))) (true (simple-error "implementation error in shen.string-match"))))

(defun shen.string-prefix? (V5775 V5776) (cond ((= "" V5775) true) ((and (shen.+string? V5775) (shen.whitespace? (string->n (hdstr V5775)))) (shen.string-prefix? (tlstr V5775) V5776)) ((and (shen.+string? V5776) (shen.whitespace? (string->n (hdstr V5776)))) (shen.string-prefix? V5775 (tlstr V5776))) ((and (shen.+string? V5776) (= "(" (hdstr V5776))) (shen.string-prefix? V5775 (tlstr V5776))) ((and (shen.+string? V5775) (and (shen.+string? V5776) (= (hdstr V5775) (hdstr V5776)))) (shen.string-prefix? (tlstr V5775) (tlstr V5776))) (true false)))

(defun shen.recursive-string-match (V5787 V5788 V5789) (cond ((= () V5789) shen.skip) ((cons? V5789) (do (if (shen.string-prefix? V5788 (hd V5789)) (pr (shen.app V5787 (cn ". " (shen.app (hd V5789) "
" shen.a)) shen.a) (stoutput)) shen.skip) (shen.recursive-string-match (+ V5787 1) V5788 (tl V5789)))) (true (simple-error "implementation error in shen.recursive-string-match"))))

