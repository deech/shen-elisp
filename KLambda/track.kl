(defun shen.f-error (V5821) (do (pr (cn "partial function " (shen.app V5821 ";
" shen.a)) (stoutput)) (do (if (and (not (shen.tracked? V5821)) (y-or-n? (cn "track " (shen.app V5821 "? " shen.a)))) (shen.track-function (ps V5821)) shen.ok) (simple-error "aborted"))))

(defun shen.tracked? (V5822) (element? V5822 (value shen.*tracking*)))

(defun track (V5823) (let W5824 (ps V5823) (shen.track-function W5824)))

(defun shen.track-function (V5827) (cond ((and (cons? V5827) (and (= defun (hd V5827)) (and (cons? (tl V5827)) (and (cons? (tl (tl V5827))) (and (cons? (tl (tl (tl V5827)))) (= () (tl (tl (tl (tl V5827)))))))))) (let W5828 (cons defun (cons (hd (tl V5827)) (cons (hd (tl (tl V5827))) (cons (shen.insert-tracking-code (hd (tl V5827)) (hd (tl (tl V5827))) (hd (tl (tl (tl V5827))))) ())))) (let W5829 (eval-kl W5828) (let W5830 (set shen.*tracking* (cons W5829 (value shen.*tracking*))) W5829)))) (true (simple-error "implementation error in shen.track-function"))))

(defun shen.insert-tracking-code (V5831 V5832 V5833) (cons do (cons (cons set (cons shen.*call* (cons (cons + (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.input-track (cons (cons value (cons shen.*call* ())) (cons V5831 (cons (shen.cons-form (shen.prolog-track V5833 V5832)) ())))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons (cons let (cons Result (cons V5833 (cons (cons do (cons (cons shen.output-track (cons (cons value (cons shen.*call* ())) (cons V5831 (cons Result ())))) (cons (cons do (cons (cons set (cons shen.*call* (cons (cons - (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons Result ()))) ()))) ()))) ())))) ()))) ()))) ()))))

(defun shen.prolog-track (V5834 V5835) (cond ((= (occurrences shen.incinfs V5834) 0) V5835) (true (shen.vector-dereference V5835 (shen.vector-parameter V5835)))))

(defun shen.vector-parameter (V5838) (cond ((= () V5838) ()) ((and (cons? V5838) (and (cons? (tl V5838)) (and (cons? (tl (tl V5838))) (and (cons? (tl (tl (tl V5838)))) (= () (tl (tl (tl (tl V5838))))))))) (hd V5838)) ((cons? V5838) (shen.vector-parameter (tl V5838))) (true (shen.f-error shen.vector-parameter))))

(defun shen.vector-dereference (V5841 V5842) (cond ((= () V5842) V5841) ((and (cons? V5841) (and (cons? (tl V5841)) (and (cons? (tl (tl V5841))) (and (cons? (tl (tl (tl V5841)))) (= () (tl (tl (tl (tl V5841))))))))) V5841) ((cons? V5841) (cons (cons shen.deref (cons (hd V5841) (cons V5842 ()))) (shen.vector-dereference (tl V5841) V5842))) (true (shen.f-error shen.vector-dereference))))

(defun step (V5845) (cond ((= + V5845) (set shen.*step* true)) ((= - V5845) (set shen.*step* false)) (true (simple-error "step expects a + or a -.
"))))

(defun spy (V5848) (cond ((= + V5848) (set shen.*spy* true)) ((= - V5848) (set shen.*spy* false)) (true (simple-error "spy expects a + or a -.
"))))

(defun shen.terpri-or-read-char () (if (value shen.*step*) (shen.check-byte (read-byte (value *stinput*))) (nl 1)))

(defun shen.check-byte (V5851) (cond ((= 94 V5851) (simple-error "aborted")) (true true)))

(defun shen.input-track (V5852 V5853 V5854) (do (pr (cn "
" (shen.app (shen.spaces V5852) (cn "<" (shen.app V5852 (cn "> Inputs to " (shen.app V5853 (cn " 
" (shen.app (shen.spaces V5852) "" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (shen.recursively-print V5854)))

(defun shen.recursively-print (V5857) (cond ((= () V5857) (pr " ==>" (stoutput))) ((cons? V5857) (do (print (hd V5857)) (do (pr ", " (stoutput)) (shen.recursively-print (tl V5857))))) (true (simple-error "implementation error in shen.recursively-print"))))

(defun shen.spaces (V5858) (cond ((= 0 V5858) "") (true (cn " " (shen.spaces (- V5858 1))))))

(defun shen.output-track (V5859 V5860 V5861) (pr (cn "
" (shen.app (shen.spaces V5859) (cn "<" (shen.app V5859 (cn "> Output from " (shen.app V5860 (cn " 
" (shen.app (shen.spaces V5859) (cn "==> " (shen.app V5861 "" shen.s)) shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)))

(defun untrack (V5862) (do (set shen.*tracking* (remove V5862 (value shen.*tracking*))) (do (trap-error (eval (ps V5862)) (lambda Z5863 V5862)) V5862)))

(defun remove (V5864 V5865) (shen.remove-h V5864 V5865 ()))

(defun shen.remove-h (V5875 V5876 V5877) (cond ((= () V5876) (reverse V5877)) ((and (cons? V5876) (= V5875 (hd V5876))) (shen.remove-h (hd V5876) (tl V5876) V5877)) ((cons? V5876) (shen.remove-h V5875 (tl V5876) (cons (hd V5876) V5877))) (true (simple-error "implementation error in shen.remove-h"))))

(defun profile (V5878) (do (set shen.*profiled* (cons V5878 (value shen.*profiled*))) (shen.profile-help (ps V5878))))

(defun shen.profile-help (V5881) (cond ((and (cons? V5881) (and (= defun (hd V5881)) (and (cons? (tl V5881)) (and (cons? (tl (tl V5881))) (and (cons? (tl (tl (tl V5881)))) (= () (tl (tl (tl (tl V5881)))))))))) (let W5882 (gensym shen.f) (let W5883 (cons defun (cons (hd (tl V5881)) (cons (hd (tl (tl V5881))) (cons (shen.profile-func (hd (tl V5881)) (hd (tl (tl V5881))) (cons W5882 (hd (tl (tl V5881))))) ())))) (let W5884 (cons defun (cons W5882 (cons (hd (tl (tl V5881))) (cons (subst W5882 (hd (tl V5881)) (hd (tl (tl (tl V5881))))) ())))) (let W5885 (eval-kl W5883) (let W5886 (eval-kl W5884) (hd (tl V5881)))))))) (true (simple-error "Cannot profile.
"))))

(defun unprofile (V5887) (do (set shen.*profiled* (remove V5887 (value shen.*profiled*))) (trap-error (eval (ps V5887)) (lambda Z5888 V5887))))

(defun shen.profiled? (V5889) (element? V5889 (value shen.*profiled*)))

(defun shen.profile-func (V5890 V5891 V5892) (cons let (cons Start (cons (cons get-time (cons run ())) (cons (cons let (cons Result (cons V5892 (cons (cons let (cons Finish (cons (cons - (cons (cons get-time (cons run ())) (cons Start ()))) (cons (cons let (cons Record (cons (cons shen.put-profile (cons V5890 (cons (cons + (cons (cons shen.get-profile (cons V5890 ())) (cons Finish ()))) ()))) (cons Result ())))) ())))) ())))) ())))))

(defun profile-results (V5893) (let W5894 (shen.get-profile V5893) (let W5895 (shen.put-profile V5893 0) (@p V5893 W5894))))

(defun shen.get-profile (V5896) (trap-error (get V5896 profile (value *property-vector*)) (lambda Z5897 0)))

(defun shen.put-profile (V5898 V5899) (put V5898 profile V5899 (value *property-vector*)))

