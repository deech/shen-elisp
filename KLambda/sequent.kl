(defun shen.<datatype> (V3341) (let W3342 (if (cons? V3341) (let W3343 (head V3341) (let W3344 (tail V3341) (let W3345 (shen.<datatype-rules> W3344) (if (shen.parse-failure? W3345) (shen.parse-failure) (let W3346 (shen.<-out W3345) (let W3347 (shen.in-> W3345) (shen.comb W3347 (let W3348 (shen.rules->prolog W3343 W3346) (shen.remember-datatype W3343 (fn W3343)))))))))) (shen.parse-failure)) (if (shen.parse-failure? W3342) (shen.parse-failure) W3342)))

(defun shen.<datatype-rules> (V3349) (let W3350 (let W3351 (shen.<datatype-rule> V3349) (if (shen.parse-failure? W3351) (shen.parse-failure) (let W3352 (shen.<-out W3351) (let W3353 (shen.in-> W3351) (let W3354 (shen.<datatype-rules> W3353) (if (shen.parse-failure? W3354) (shen.parse-failure) (let W3355 (shen.<-out W3354) (let W3356 (shen.in-> W3354) (shen.comb W3356 (append W3352 W3355)))))))))) (if (shen.parse-failure? W3350) (let W3357 (let W3358 (<!> V3349) (if (shen.parse-failure? W3358) (shen.parse-failure) (let W3359 (shen.<-out W3358) (let W3360 (shen.in-> W3358) (shen.comb W3360 (if (empty? W3359) () (simple-error (cn "datatype syntax error here:
 " (shen.app W3359 "
 ..." shen.r))))))))) (if (shen.parse-failure? W3357) (shen.parse-failure) W3357)) W3350)))

(defun shen.<datatype-rule> (V3361) (let W3362 (let W3363 (shen.<single> V3361) (if (shen.parse-failure? W3363) (shen.parse-failure) (let W3364 (shen.<-out W3363) (let W3365 (shen.in-> W3363) (shen.comb W3365 W3364))))) (if (shen.parse-failure? W3362) (let W3366 (let W3367 (shen.<double> V3361) (if (shen.parse-failure? W3367) (shen.parse-failure) (let W3368 (shen.<-out W3367) (let W3369 (shen.in-> W3367) (shen.comb W3369 W3368))))) (if (shen.parse-failure? W3366) (shen.parse-failure) W3366)) W3362)))

(defun shen.<single> (V3370) (let W3371 (let W3372 (shen.<sides> V3370) (if (shen.parse-failure? W3372) (shen.parse-failure) (let W3373 (shen.<-out W3372) (let W3374 (shen.in-> W3372) (let W3375 (shen.<prems> W3374) (if (shen.parse-failure? W3375) (shen.parse-failure) (let W3376 (shen.<-out W3375) (let W3377 (shen.in-> W3375) (let W3378 (shen.<sng> W3377) (if (shen.parse-failure? W3378) (shen.parse-failure) (let W3379 (shen.in-> W3378) (let W3380 (shen.<conc> W3379) (if (shen.parse-failure? W3380) (shen.parse-failure) (let W3381 (shen.<-out W3380) (let W3382 (shen.in-> W3380) (let W3383 (shen.<sc> W3382) (if (shen.parse-failure? W3383) (shen.parse-failure) (let W3384 (shen.in-> W3383) (shen.comb W3384 (cons (cons W3373 (cons W3376 (cons W3381 ()))) ())))))))))))))))))))) (if (shen.parse-failure? W3371) (shen.parse-failure) W3371)))

(defun shen.<double> (V3385) (let W3386 (let W3387 (shen.<sides> V3385) (if (shen.parse-failure? W3387) (shen.parse-failure) (let W3388 (shen.<-out W3387) (let W3389 (shen.in-> W3387) (let W3390 (shen.<formulae> W3389) (if (shen.parse-failure? W3390) (shen.parse-failure) (let W3391 (shen.<-out W3390) (let W3392 (shen.in-> W3390) (let W3393 (shen.<dbl> W3392) (if (shen.parse-failure? W3393) (shen.parse-failure) (let W3394 (shen.in-> W3393) (let W3395 (shen.<formula> W3394) (if (shen.parse-failure? W3395) (shen.parse-failure) (let W3396 (shen.<-out W3395) (let W3397 (shen.in-> W3395) (let W3398 (shen.<sc> W3397) (if (shen.parse-failure? W3398) (shen.parse-failure) (let W3399 (shen.in-> W3398) (shen.comb W3399 (shen.lr-rule W3388 W3391 (cons () (cons W3396 ())))))))))))))))))))))) (if (shen.parse-failure? W3386) (shen.parse-failure) W3386)))

(defun shen.<formulae> (V3400) (let W3401 (let W3402 (shen.<formula> V3400) (if (shen.parse-failure? W3402) (shen.parse-failure) (let W3403 (shen.<-out W3402) (let W3404 (shen.in-> W3402) (let W3405 (shen.<sc> W3404) (if (shen.parse-failure? W3405) (shen.parse-failure) (let W3406 (shen.in-> W3405) (let W3407 (shen.<formulae> W3406) (if (shen.parse-failure? W3407) (shen.parse-failure) (let W3408 (shen.<-out W3407) (let W3409 (shen.in-> W3407) (shen.comb W3409 (cons (cons () (cons W3403 ())) W3408))))))))))))) (if (shen.parse-failure? W3401) (let W3410 (let W3411 (shen.<formula> V3400) (if (shen.parse-failure? W3411) (shen.parse-failure) (let W3412 (shen.<-out W3411) (let W3413 (shen.in-> W3411) (let W3414 (shen.<sc> W3413) (if (shen.parse-failure? W3414) (shen.parse-failure) (let W3415 (shen.in-> W3414) (shen.comb W3415 (cons (cons () (cons W3412 ())) ()))))))))) (if (shen.parse-failure? W3410) (shen.parse-failure) W3410)) W3401)))

(defun shen.<conc> (V3416) (let W3417 (let W3418 (shen.<ass> V3416) (if (shen.parse-failure? W3418) (shen.parse-failure) (let W3419 (shen.<-out W3418) (let W3420 (shen.in-> W3418) (if (shen.hds=? W3420 >>) (let W3421 (tail W3420) (let W3422 (shen.<formula> W3421) (if (shen.parse-failure? W3422) (shen.parse-failure) (let W3423 (shen.<-out W3422) (let W3424 (shen.in-> W3422) (shen.comb W3424 (cons W3419 (cons W3423 ())))))))) (shen.parse-failure)))))) (if (shen.parse-failure? W3417) (let W3425 (let W3426 (shen.<formula> V3416) (if (shen.parse-failure? W3426) (shen.parse-failure) (let W3427 (shen.<-out W3426) (let W3428 (shen.in-> W3426) (shen.comb W3428 (cons () (cons W3427 ()))))))) (if (shen.parse-failure? W3425) (shen.parse-failure) W3425)) W3417)))

(defun shen.<prems> (V3429) (let W3430 (let W3431 (shen.<prem> V3429) (if (shen.parse-failure? W3431) (shen.parse-failure) (let W3432 (shen.<-out W3431) (let W3433 (shen.in-> W3431) (let W3434 (shen.<sc> W3433) (if (shen.parse-failure? W3434) (shen.parse-failure) (let W3435 (shen.in-> W3434) (let W3436 (shen.<prems> W3435) (if (shen.parse-failure? W3436) (shen.parse-failure) (let W3437 (shen.<-out W3436) (let W3438 (shen.in-> W3436) (shen.comb W3438 (cons W3432 W3437))))))))))))) (if (shen.parse-failure? W3430) (let W3439 (let W3440 (<e> V3429) (if (shen.parse-failure? W3440) (shen.parse-failure) (let W3441 (shen.in-> W3440) (shen.comb W3441 ())))) (if (shen.parse-failure? W3439) (shen.parse-failure) W3439)) W3430)))

(defun shen.<prem> (V3442) (let W3443 (if (shen.hds=? V3442 !) (let W3444 (tail V3442) (shen.comb W3444 !)) (shen.parse-failure)) (if (shen.parse-failure? W3443) (let W3445 (let W3446 (shen.<ass> V3442) (if (shen.parse-failure? W3446) (shen.parse-failure) (let W3447 (shen.<-out W3446) (let W3448 (shen.in-> W3446) (if (shen.hds=? W3448 >>) (let W3449 (tail W3448) (let W3450 (shen.<formula> W3449) (if (shen.parse-failure? W3450) (shen.parse-failure) (let W3451 (shen.<-out W3450) (let W3452 (shen.in-> W3450) (shen.comb W3452 (cons W3447 (cons W3451 ())))))))) (shen.parse-failure)))))) (if (shen.parse-failure? W3445) (let W3453 (let W3454 (shen.<formula> V3442) (if (shen.parse-failure? W3454) (shen.parse-failure) (let W3455 (shen.<-out W3454) (let W3456 (shen.in-> W3454) (shen.comb W3456 (cons () (cons W3455 ()))))))) (if (shen.parse-failure? W3453) (shen.parse-failure) W3453)) W3445)) W3443)))

(defun shen.<ass> (V3457) (let W3458 (let W3459 (shen.<formula> V3457) (if (shen.parse-failure? W3459) (shen.parse-failure) (let W3460 (shen.<-out W3459) (let W3461 (shen.in-> W3459) (let W3462 (shen.<iscomma> W3461) (if (shen.parse-failure? W3462) (shen.parse-failure) (let W3463 (shen.in-> W3462) (let W3464 (shen.<ass> W3463) (if (shen.parse-failure? W3464) (shen.parse-failure) (let W3465 (shen.<-out W3464) (let W3466 (shen.in-> W3464) (shen.comb W3466 (cons W3460 W3465))))))))))))) (if (shen.parse-failure? W3458) (let W3467 (let W3468 (shen.<formula> V3457) (if (shen.parse-failure? W3468) (shen.parse-failure) (let W3469 (shen.<-out W3468) (let W3470 (shen.in-> W3468) (shen.comb W3470 (cons W3469 ())))))) (if (shen.parse-failure? W3467) (let W3471 (let W3472 (<e> V3457) (if (shen.parse-failure? W3472) (shen.parse-failure) (let W3473 (shen.in-> W3472) (shen.comb W3473 ())))) (if (shen.parse-failure? W3471) (shen.parse-failure) W3471)) W3467)) W3458)))

(defun shen.<iscomma> (V3474) (let W3475 (if (cons? V3474) (let W3476 (head V3474) (let W3477 (tail V3474) (if (= W3476 (intern ",")) (shen.comb W3477 shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W3475) (shen.parse-failure) W3475)))

(defun shen.<formula> (V3478) (let W3479 (let W3480 (shen.<expr> V3478) (if (shen.parse-failure? W3480) (shen.parse-failure) (let W3481 (shen.<-out W3480) (let W3482 (shen.in-> W3480) (let W3483 (shen.<iscolon> W3482) (if (shen.parse-failure? W3483) (shen.parse-failure) (let W3484 (shen.in-> W3483) (let W3485 (shen.<type> W3484) (if (shen.parse-failure? W3485) (shen.parse-failure) (let W3486 (shen.<-out W3485) (let W3487 (shen.in-> W3485) (shen.comb W3487 (cons (shen.curry W3481) (cons (intern ":") (cons (shen.rectify-type W3486) ()))))))))))))))) (if (shen.parse-failure? W3479) (let W3488 (let W3489 (shen.<expr> V3478) (if (shen.parse-failure? W3489) (shen.parse-failure) (let W3490 (shen.<-out W3489) (let W3491 (shen.in-> W3489) (shen.comb W3491 W3490))))) (if (shen.parse-failure? W3488) (shen.parse-failure) W3488)) W3479)))

(defun shen.<iscolon> (V3492) (let W3493 (if (cons? V3492) (let W3494 (head V3492) (let W3495 (tail V3492) (if (= W3494 (intern ":")) (shen.comb W3495 shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W3493) (shen.parse-failure) W3493)))

(defun shen.<sides> (V3496) (let W3497 (let W3498 (shen.<side> V3496) (if (shen.parse-failure? W3498) (shen.parse-failure) (let W3499 (shen.<-out W3498) (let W3500 (shen.in-> W3498) (let W3501 (shen.<sides> W3500) (if (shen.parse-failure? W3501) (shen.parse-failure) (let W3502 (shen.<-out W3501) (let W3503 (shen.in-> W3501) (shen.comb W3503 (cons W3499 W3502)))))))))) (if (shen.parse-failure? W3497) (let W3504 (let W3505 (<e> V3496) (if (shen.parse-failure? W3505) (shen.parse-failure) (let W3506 (shen.in-> W3505) (shen.comb W3506 ())))) (if (shen.parse-failure? W3504) (shen.parse-failure) W3504)) W3497)))

(defun shen.<side> (V3507) (let W3508 (if (shen.hds=? V3507 if) (let W3509 (tail V3507) (if (cons? W3509) (let W3510 (head W3509) (let W3511 (tail W3509) (shen.comb W3511 (cons if (cons W3510 ()))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W3508) (let W3512 (if (shen.hds=? V3507 let) (let W3513 (tail V3507) (if (cons? W3513) (let W3514 (head W3513) (let W3515 (tail W3513) (if (cons? W3515) (let W3516 (head W3515) (let W3517 (tail W3515) (shen.comb W3517 (cons let (cons W3514 (cons W3516 ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W3512) (let W3518 (if (shen.hds=? V3507 shen.let!) (let W3519 (tail V3507) (if (cons? W3519) (let W3520 (head W3519) (let W3521 (tail W3519) (if (cons? W3521) (let W3522 (head W3521) (let W3523 (tail W3521) (shen.comb W3523 (cons shen.let! (cons W3520 (cons W3522 ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W3518) (shen.parse-failure) W3518)) W3512)) W3508)))

(defun shen.lr-rule (V3530 V3531 V3532) (cond ((and (cons? V3532) (and (= () (hd V3532)) (and (cons? (tl V3532)) (= () (tl (tl V3532)))))) (let W3533 (gensym P) (let W3534 (cons (tl V3532) (cons W3533 ())) (let W3535 (cons (shen.coll-formulae V3531) (cons W3533 ())) (let W3536 (cons V3530 (cons (cons W3535 ()) (cons W3534 ()))) (let W3537 (cons V3530 (cons V3531 (cons V3532 ()))) (cons W3537 (cons W3536 ())))))))) (true (simple-error "implementation error in shen.lr-rule"))))

(defun shen.coll-formulae (V3540) (cond ((= () V3540) ()) ((and (cons? V3540) (and (cons? (hd V3540)) (and (= () (hd (hd V3540))) (and (cons? (tl (hd V3540))) (= () (tl (tl (hd V3540)))))))) (cons (hd (tl (hd V3540))) (shen.coll-formulae (tl V3540)))) (true (simple-error "implementation error in shen.coll-formulae"))))

(defun shen.<expr> (V3541) (let W3542 (if (cons? V3541) (let W3543 (head V3541) (let W3544 (tail V3541) (if (not (shen.key-in-sequent-calculus? W3543)) (shen.comb W3544 (macroexpand W3543)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W3542) (shen.parse-failure) W3542)))

(defun shen.key-in-sequent-calculus? (V3545) (or (element? V3545 (cons >> (cons (intern ";") (cons (intern ",") (cons (intern ":") (cons <-- ())))))) (or (shen.sng? V3545) (shen.dbl? V3545))))

(defun shen.<type> (V3546) (let W3547 (let W3548 (shen.<expr> V3546) (if (shen.parse-failure? W3548) (shen.parse-failure) (let W3549 (shen.<-out W3548) (let W3550 (shen.in-> W3548) (shen.comb W3550 W3549))))) (if (shen.parse-failure? W3547) (shen.parse-failure) W3547)))

(defun shen.<dbl> (V3551) (let W3552 (if (cons? V3551) (let W3553 (head V3551) (let W3554 (tail V3551) (if (shen.dbl? W3553) (shen.comb W3554 W3553) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W3552) (shen.parse-failure) W3552)))

(defun shen.<sng> (V3555) (let W3556 (if (cons? V3555) (let W3557 (head V3555) (let W3558 (tail V3555) (if (shen.sng? W3557) (shen.comb W3558 W3557) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W3556) (shen.parse-failure) W3556)))

(defun shen.sng? (V3559) (and (symbol? V3559) (shen.sng-h? (str V3559))))

(defun shen.sng-h? (V3562) (cond ((= "___" V3562) true) ((and (shen.+string? V3562) (= "_" (hdstr V3562))) (shen.sng-h? (tlstr V3562))) (true false)))

(defun shen.dbl? (V3563) (and (symbol? V3563) (shen.dbl-h? (str V3563))))

(defun shen.dbl-h? (V3566) (cond ((= "===" V3566) true) ((and (shen.+string? V3566) (= "=" (hdstr V3566))) (shen.dbl-h? (tlstr V3566))) (true false)))

(defun shen.remember-datatype (V3567 V3568) (do (set shen.*datatypes* (shen.assoc-> V3567 V3568 (value shen.*datatypes*))) (do (set shen.*alldatatypes* (shen.assoc-> V3567 V3568 (value shen.*alldatatypes*))) V3567)))

(defun shen.rules->prolog (V3569 V3570) (let W3571 (mapcan (lambda Z3572 (shen.rule->clause Z3572)) V3570) (eval (cons defprolog (cons V3569 W3571)))))

(defun shen.rule->clause (V3575) (cond ((and (cons? V3575) (and (cons? (tl V3575)) (and (cons? (tl (tl V3575))) (and (cons? (hd (tl (tl V3575)))) (and (cons? (tl (hd (tl (tl V3575))))) (and (= () (tl (tl (hd (tl (tl V3575)))))) (= () (tl (tl (tl V3575)))))))))) (let W3576 (shen.extract-vars V3575) (let W3577 (append (shen.nvars (length (hd (hd (tl (tl V3575)))))) (cons Delta ())) (let W3578 (shen.extract-vars (hd (tl (hd (tl (tl V3575)))))) (let W3579 (shen.compile-consequent (hd (tl (hd (tl (tl V3575))))) W3577) (let W3580 (shen.goals W3576 (hd (hd (tl (tl V3575)))) (hd V3575) (hd (tl V3575)) W3577 W3578) (append W3579 (append (cons <-- ()) (append W3580 (cons (intern ";") ())))))))))) (true (simple-error "implementation error in shen.rule->clause"))))

(defun shen.compile-consequent (V3587 V3588) (cond ((cons? V3588) (cons (shen.optimise-typing V3587) (cons (hd V3588) ()))) (true (simple-error "implementation error in shen.compile-consequent"))))

(defun shen.nvars (V3589) (cond ((= 0 V3589) ()) (true (cons (gensym V) (shen.nvars (- V3589 1))))))

(defun shen.optimise-typing (V3590) (cond ((and (cons? V3590) (and (cons? (tl V3590)) (and (cons? (tl (tl V3590))) (and (= () (tl (tl (tl V3590)))) (= (hd (tl V3590)) (intern ":")))))) (let W3591 (shen.expand-mode-forms (cons - (cons (cons (hd V3590) (cons (hd (tl V3590)) (cons (cons + (tl (tl V3590))) ()))) ()))) (shen.cons-form-with-modes W3591))) (true (let W3592 (shen.expand-mode-forms (cons + (cons V3590 ()))) (shen.cons-form-with-modes W3592)))))

(defun shen.expand-mode-forms (V3593) (cond ((and (cons? V3593) (and (= + (hd V3593)) (and (cons? (tl V3593)) (= () (tl (tl V3593)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V3593))) (cons + ())))) ((and (cons? V3593) (and (= - (hd V3593)) (and (cons? (tl V3593)) (= () (tl (tl V3593)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V3593))) (cons - ())))) ((cons? V3593) (map (lambda Z3594 (shen.expand-mode-forms Z3594)) V3593)) (true V3593)))

(defun shen.cons-form-with-modes (V3595) (cond ((and (cons? V3595) (and (= mode (hd V3595)) (and (cons? (tl V3595)) (and (cons? (tl (tl V3595))) (= () (tl (tl (tl V3595)))))))) (cons (hd (tl (tl V3595))) (cons (shen.cons-form-with-modes (hd (tl V3595))) ()))) ((and (cons? V3595) (and (= bar! (hd V3595)) (and (cons? (tl V3595)) (= () (tl (tl V3595)))))) (hd (tl V3595))) ((cons? V3595) (cons cons (cons (shen.cons-form-with-modes (hd V3595)) (cons (shen.cons-form-with-modes (tl V3595)) ())))) (true V3595)))

(defun shen.goals (V3596 V3597 V3598 V3599 V3600 V3601) (let W3602 (shen.compile-assumptions V3597 V3596 V3600 V3601) (let W3603 (shen.compile-side-conditions V3598) (let W3604 (shen.compile-premises V3599 V3600) (append W3602 (append W3603 W3604))))))

(defun shen.compile-assumptions (V3619 V3620 V3621 V3622) (cond ((= () V3619) ()) ((and (cons? V3619) (and (cons? V3621) (cons? (tl V3621)))) (let W3623 (append (shen.extract-vars (hd V3619)) V3622) (cons (shen.compile-assumption (hd V3619) (hd V3621) (hd (tl V3621)) V3620 V3622) (shen.compile-assumptions (tl V3619) V3620 (tl V3621) W3623)))) (true (simple-error "implementation error in shen.compile-assumptions"))))

(defun shen.compile-assumption (V3624 V3625 V3626 V3627 V3628) (let W3629 (gensym shen.search) (let W3630 (shen.compile-search-procedure W3629 V3624 V3625 V3626 V3627 V3628) (cons W3629 (cons V3625 (cons () (cons V3626 V3627)))))))

(defun shen.compile-search-procedure (V3631 V3632 V3633 V3634 V3635 V3636) (let W3637 (gensym Previous) (let W3638 (shen.foundit! V3632 V3633 W3637 V3634 V3635 V3636) (let W3639 (shen.keep-looking V3631 V3633 W3637 V3634 V3635) (eval (cons defprolog (cons V3631 (append W3638 W3639))))))))

(defun shen.foundit! (V3640 V3641 V3642 V3643 V3644 V3645) (let W3646 (shen.passive V3640 V3645) (let W3647 (shen.tabulate-passive W3646) (let W3648 (shen.head-foundit! V3640 V3641 V3642 V3643 V3644 W3647) (let W3649 (shen.body-foundit! V3641 V3642 V3643 W3647) (append W3648 (append (cons <-- ()) (append W3649 (cons (intern ";") ())))))))))

(defun shen.keep-looking (V3650 V3651 V3652 V3653 V3654) (let W3655 (gensym V) (let W3656 (cons (cons - (cons (cons cons (cons W3655 (cons V3651 ()))) ())) (cons V3652 (cons V3653 V3654))) (let W3657 (cons (cons V3650 (cons V3651 (cons (cons cons (cons W3655 (cons V3652 ()))) (cons V3653 V3654)))) ()) (append W3656 (append (cons <-- ()) (append W3657 (cons (intern ";") ()))))))))

(defun shen.passive (V3662 V3663) (cond ((cons? V3662) (union (shen.passive (hd V3662) V3663) (shen.passive (tl V3662) V3663))) ((shen.passive? V3662 V3663) (cons V3662 ())) (true ())))

(defun shen.passive? (V3664 V3665) (and (not (element? V3664 V3665)) (variable? V3664)))

(defun shen.tabulate-passive (V3666) (map (lambda Z3667 (cons Z3667 (gensym V))) V3666))

(defun shen.head-foundit! (V3668 V3669 V3670 V3671 V3672 V3673) (let W3674 (shen.optimise-passive V3672 V3673) (cons (cons - (cons (cons cons (cons (shen.optimise-typing V3668) (cons V3669 ()))) ())) (cons V3670 (cons V3671 W3674)))))

(defun shen.optimise-passive (V3675 V3676) (map (lambda Z3677 (shen.optimise-passive-h Z3677 V3676)) V3675))

(defun shen.optimise-passive-h (V3678 V3679) (let W3680 (assoc V3678 V3679) (if (empty? W3680) V3678 (tl W3680))))

(defun shen.body-foundit! (V3689 V3690 V3691 V3692) (cond ((= () V3692) (cons (cons bind (cons V3691 (cons (cons append (cons (cons 1 (cons V3690 ())) (cons (cons 1 (cons V3689 ())) ()))) ()))) ())) ((and (cons? V3692) (cons? (hd V3692))) (cons (cons bind (cons (tl (hd V3692)) (cons (hd (hd V3692)) ()))) (shen.body-foundit! V3689 V3690 V3691 (tl V3692)))) (true (simple-error "implementation error in shen.body-foundit!"))))

(defun shen.compile-side-conditions (V3693) (map (lambda Z3694 (shen.compile-side-condition Z3694)) V3693))

(defun shen.compile-side-condition (V3697) (cond ((and (cons? V3697) (and (= let (hd V3697)) (and (cons? (tl V3697)) (and (cons? (tl (tl V3697))) (= () (tl (tl (tl V3697)))))))) (cons is (tl V3697))) ((and (cons? V3697) (and (= shen.let! (hd V3697)) (and (cons? (tl V3697)) (and (cons? (tl (tl V3697))) (= () (tl (tl (tl V3697)))))))) (cons is! (tl V3697))) ((and (cons? V3697) (and (= if (hd V3697)) (and (cons? (tl V3697)) (= () (tl (tl V3697)))))) (cons when (tl V3697))) (true (simple-error "implementation error in shen.compile-side-condition"))))

(defun shen.compile-premises (V3698 V3699) (let W3700 (hd (reverse V3699)) (map (lambda Z3701 (shen.compile-premise Z3701 W3700)) V3698)))

(defun shen.compile-premise (V3708 V3709) (cond ((= ! V3708) !) ((and (cons? V3708) (and (cons? (tl V3708)) (= () (tl (tl V3708))))) (shen.compile-premise-h (reverse (hd V3708)) (hd (tl V3708)) V3709)) (true (simple-error "implementation error in shen.premise"))))

(defun shen.compile-premise-h (V3716 V3717 V3718) (cond ((= () V3716) (cons shen.system-S (cons (shen.cons-form-no-modes V3717) (cons V3718 ())))) ((cons? V3716) (shen.compile-premise-h (tl V3716) V3717 (cons cons (cons (shen.cons-form-no-modes (hd V3716)) (cons V3718 ()))))) (true (simple-error "implementation error in shen.compile-premise-h"))))

(defun shen.cons-form-no-modes (V3719) (cond ((and (cons? V3719) (and (= bar! (hd V3719)) (and (cons? (tl V3719)) (= () (tl (tl V3719)))))) (hd (tl V3719))) ((cons? V3719) (cons cons (cons (shen.cons-form-no-modes (hd V3719)) (cons (shen.cons-form-no-modes (tl V3719)) ())))) (true V3719)))

(defun preclude (V3720) (let W3721 (map (lambda Z3722 (shen.intern-type Z3722)) V3720) (let W3723 (value shen.*datatypes*) (let W3724 (shen.remove-datatypes W3721 W3723) (let W3725 (set shen.*datatypes* W3724) (shen.show-datatypes W3725))))))

(defun shen.remove-datatypes (V3730 V3731) (cond ((= () V3730) V3731) ((cons? V3730) (shen.remove-datatypes (tl V3730) (shen.unassoc (hd V3730) V3731))) (true (simple-error "implementation error in shen.remove-datatypes"))))

(defun shen.show-datatypes (V3732) (map (lambda Z3733 (hd Z3733)) V3732))

(defun include (V3734) (let W3735 (map (lambda Z3736 (shen.intern-type Z3736)) V3734) (let W3737 (map (lambda Z3738 (shen.remember-datatype Z3738 (fn Z3738))) W3735) (let W3739 (value shen.*datatypes*) (shen.show-datatypes W3739)))))

(defun preclude-all-but (V3740) (let W3741 (set shen.*datatypes* ()) (let W3742 (map (lambda Z3743 (shen.intern-type Z3743)) V3740) (let W3744 (map (lambda Z3745 (shen.remember-datatype Z3745 (fn Z3745))) W3742) (shen.show-datatypes (value shen.*datatypes*))))))

(defun include-all-but (V3746) (let W3747 (map (lambda Z3748 (shen.intern-type Z3748)) V3746) (let W3749 (value shen.*alldatatypes*) (let W3750 (set shen.*datatypes* (shen.remove-datatypes W3747 W3749)) (shen.show-datatypes W3750)))))

