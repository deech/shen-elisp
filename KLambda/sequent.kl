(defun shen.<datatype> (V9898) (let W9899 (if (cons? V9898) (let W9900 (head V9898) (let W9901 (tail V9898) (let W9902 (shen.<datatype-rules> W9901) (if (shen.parse-failure? W9902) (shen.parse-failure) (let W9903 (shen.<-out W9902) (let W9904 (shen.in-> W9902) (shen.comb W9904 (let W9905 (shen.rules->prolog W9900 W9903) (shen.remember-datatype W9900 (fn W9900)))))))))) (shen.parse-failure)) (if (shen.parse-failure? W9899) (shen.parse-failure) W9899)))

(defun shen.<datatype-rules> (V9906) (let W9907 (let W9908 (shen.<datatype-rule> V9906) (if (shen.parse-failure? W9908) (shen.parse-failure) (let W9909 (shen.<-out W9908) (let W9910 (shen.in-> W9908) (let W9911 (shen.<datatype-rules> W9910) (if (shen.parse-failure? W9911) (shen.parse-failure) (let W9912 (shen.<-out W9911) (let W9913 (shen.in-> W9911) (shen.comb W9913 (append W9909 W9912)))))))))) (if (shen.parse-failure? W9907) (let W9914 (let W9915 (<!> V9906) (if (shen.parse-failure? W9915) (shen.parse-failure) (let W9916 (shen.<-out W9915) (let W9917 (shen.in-> W9915) (shen.comb W9917 (if (empty? W9916) () (simple-error (cn "datatype syntax error here:
 " (shen.app W9916 "
 ..." shen.r))))))))) (if (shen.parse-failure? W9914) (shen.parse-failure) W9914)) W9907)))

(defun shen.<datatype-rule> (V9918) (let W9919 (let W9920 (shen.<single> V9918) (if (shen.parse-failure? W9920) (shen.parse-failure) (let W9921 (shen.<-out W9920) (let W9922 (shen.in-> W9920) (shen.comb W9922 W9921))))) (if (shen.parse-failure? W9919) (let W9923 (let W9924 (shen.<double> V9918) (if (shen.parse-failure? W9924) (shen.parse-failure) (let W9925 (shen.<-out W9924) (let W9926 (shen.in-> W9924) (shen.comb W9926 W9925))))) (if (shen.parse-failure? W9923) (shen.parse-failure) W9923)) W9919)))

(defun shen.<single> (V9927) (let W9928 (let W9929 (shen.<sides> V9927) (if (shen.parse-failure? W9929) (shen.parse-failure) (let W9930 (shen.<-out W9929) (let W9931 (shen.in-> W9929) (let W9932 (shen.<prems> W9931) (if (shen.parse-failure? W9932) (shen.parse-failure) (let W9933 (shen.<-out W9932) (let W9934 (shen.in-> W9932) (let W9935 (shen.<sng> W9934) (if (shen.parse-failure? W9935) (shen.parse-failure) (let W9936 (shen.in-> W9935) (let W9937 (shen.<conc> W9936) (if (shen.parse-failure? W9937) (shen.parse-failure) (let W9938 (shen.<-out W9937) (let W9939 (shen.in-> W9937) (let W9940 (shen.<sc> W9939) (if (shen.parse-failure? W9940) (shen.parse-failure) (let W9941 (shen.in-> W9940) (shen.comb W9941 (cons (cons W9930 (cons W9933 (cons W9938 ()))) ())))))))))))))))))))) (if (shen.parse-failure? W9928) (shen.parse-failure) W9928)))

(defun shen.<double> (V9942) (let W9943 (let W9944 (shen.<sides> V9942) (if (shen.parse-failure? W9944) (shen.parse-failure) (let W9945 (shen.<-out W9944) (let W9946 (shen.in-> W9944) (let W9947 (shen.<formulae> W9946) (if (shen.parse-failure? W9947) (shen.parse-failure) (let W9948 (shen.<-out W9947) (let W9949 (shen.in-> W9947) (let W9950 (shen.<dbl> W9949) (if (shen.parse-failure? W9950) (shen.parse-failure) (let W9951 (shen.in-> W9950) (let W9952 (shen.<formula> W9951) (if (shen.parse-failure? W9952) (shen.parse-failure) (let W9953 (shen.<-out W9952) (let W9954 (shen.in-> W9952) (let W9955 (shen.<sc> W9954) (if (shen.parse-failure? W9955) (shen.parse-failure) (let W9956 (shen.in-> W9955) (shen.comb W9956 (shen.lr-rule W9945 W9948 (cons () (cons W9953 ())))))))))))))))))))))) (if (shen.parse-failure? W9943) (shen.parse-failure) W9943)))

(defun shen.<formulae> (V9957) (let W9958 (let W9959 (shen.<formula> V9957) (if (shen.parse-failure? W9959) (shen.parse-failure) (let W9960 (shen.<-out W9959) (let W9961 (shen.in-> W9959) (let W9962 (shen.<sc> W9961) (if (shen.parse-failure? W9962) (shen.parse-failure) (let W9963 (shen.in-> W9962) (let W9964 (shen.<formulae> W9963) (if (shen.parse-failure? W9964) (shen.parse-failure) (let W9965 (shen.<-out W9964) (let W9966 (shen.in-> W9964) (shen.comb W9966 (cons (cons () (cons W9960 ())) W9965))))))))))))) (if (shen.parse-failure? W9958) (let W9967 (let W9968 (shen.<formula> V9957) (if (shen.parse-failure? W9968) (shen.parse-failure) (let W9969 (shen.<-out W9968) (let W9970 (shen.in-> W9968) (let W9971 (shen.<sc> W9970) (if (shen.parse-failure? W9971) (shen.parse-failure) (let W9972 (shen.in-> W9971) (shen.comb W9972 (cons (cons () (cons W9969 ())) ()))))))))) (if (shen.parse-failure? W9967) (shen.parse-failure) W9967)) W9958)))

(defun shen.<conc> (V9973) (let W9974 (let W9975 (shen.<ass> V9973) (if (shen.parse-failure? W9975) (shen.parse-failure) (let W9976 (shen.<-out W9975) (let W9977 (shen.in-> W9975) (if (shen.hds=? W9977 >>) (let W9978 (tail W9977) (let W9979 (shen.<formula> W9978) (if (shen.parse-failure? W9979) (shen.parse-failure) (let W9980 (shen.<-out W9979) (let W9981 (shen.in-> W9979) (shen.comb W9981 (cons W9976 (cons W9980 ())))))))) (shen.parse-failure)))))) (if (shen.parse-failure? W9974) (let W9982 (let W9983 (shen.<formula> V9973) (if (shen.parse-failure? W9983) (shen.parse-failure) (let W9984 (shen.<-out W9983) (let W9985 (shen.in-> W9983) (shen.comb W9985 (cons () (cons W9984 ()))))))) (if (shen.parse-failure? W9982) (shen.parse-failure) W9982)) W9974)))

(defun shen.<prems> (V9986) (let W9987 (let W9988 (shen.<prem> V9986) (if (shen.parse-failure? W9988) (shen.parse-failure) (let W9989 (shen.<-out W9988) (let W9990 (shen.in-> W9988) (let W9991 (shen.<sc> W9990) (if (shen.parse-failure? W9991) (shen.parse-failure) (let W9992 (shen.in-> W9991) (let W9993 (shen.<prems> W9992) (if (shen.parse-failure? W9993) (shen.parse-failure) (let W9994 (shen.<-out W9993) (let W9995 (shen.in-> W9993) (shen.comb W9995 (cons W9989 W9994))))))))))))) (if (shen.parse-failure? W9987) (let W9996 (let W9997 (<e> V9986) (if (shen.parse-failure? W9997) (shen.parse-failure) (let W9998 (shen.in-> W9997) (shen.comb W9998 ())))) (if (shen.parse-failure? W9996) (shen.parse-failure) W9996)) W9987)))

(defun shen.<prem> (V9999) (let W10000 (if (shen.hds=? V9999 !) (let W10001 (tail V9999) (shen.comb W10001 !)) (shen.parse-failure)) (if (shen.parse-failure? W10000) (let W10002 (let W10003 (shen.<ass> V9999) (if (shen.parse-failure? W10003) (shen.parse-failure) (let W10004 (shen.<-out W10003) (let W10005 (shen.in-> W10003) (if (shen.hds=? W10005 >>) (let W10006 (tail W10005) (let W10007 (shen.<formula> W10006) (if (shen.parse-failure? W10007) (shen.parse-failure) (let W10008 (shen.<-out W10007) (let W10009 (shen.in-> W10007) (shen.comb W10009 (cons W10004 (cons W10008 ())))))))) (shen.parse-failure)))))) (if (shen.parse-failure? W10002) (let W10010 (let W10011 (shen.<formula> V9999) (if (shen.parse-failure? W10011) (shen.parse-failure) (let W10012 (shen.<-out W10011) (let W10013 (shen.in-> W10011) (shen.comb W10013 (cons () (cons W10012 ()))))))) (if (shen.parse-failure? W10010) (shen.parse-failure) W10010)) W10002)) W10000)))

(defun shen.<ass> (V10014) (let W10015 (let W10016 (shen.<formula> V10014) (if (shen.parse-failure? W10016) (shen.parse-failure) (let W10017 (shen.<-out W10016) (let W10018 (shen.in-> W10016) (let W10019 (shen.<iscomma> W10018) (if (shen.parse-failure? W10019) (shen.parse-failure) (let W10020 (shen.in-> W10019) (let W10021 (shen.<ass> W10020) (if (shen.parse-failure? W10021) (shen.parse-failure) (let W10022 (shen.<-out W10021) (let W10023 (shen.in-> W10021) (shen.comb W10023 (cons W10017 W10022))))))))))))) (if (shen.parse-failure? W10015) (let W10024 (let W10025 (shen.<formula> V10014) (if (shen.parse-failure? W10025) (shen.parse-failure) (let W10026 (shen.<-out W10025) (let W10027 (shen.in-> W10025) (shen.comb W10027 (cons W10026 ())))))) (if (shen.parse-failure? W10024) (let W10028 (let W10029 (<e> V10014) (if (shen.parse-failure? W10029) (shen.parse-failure) (let W10030 (shen.in-> W10029) (shen.comb W10030 ())))) (if (shen.parse-failure? W10028) (shen.parse-failure) W10028)) W10024)) W10015)))

(defun shen.<iscomma> (V10031) (let W10032 (if (cons? V10031) (let W10033 (head V10031) (let W10034 (tail V10031) (if (= W10033 (intern ",")) (shen.comb W10034 shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W10032) (shen.parse-failure) W10032)))

(defun shen.<formula> (V10035) (let W10036 (let W10037 (shen.<expr> V10035) (if (shen.parse-failure? W10037) (shen.parse-failure) (let W10038 (shen.<-out W10037) (let W10039 (shen.in-> W10037) (let W10040 (shen.<iscolon> W10039) (if (shen.parse-failure? W10040) (shen.parse-failure) (let W10041 (shen.in-> W10040) (let W10042 (shen.<type> W10041) (if (shen.parse-failure? W10042) (shen.parse-failure) (let W10043 (shen.<-out W10042) (let W10044 (shen.in-> W10042) (shen.comb W10044 (cons (shen.curry W10038) (cons (intern ":") (cons (shen.rectify-type W10043) ()))))))))))))))) (if (shen.parse-failure? W10036) (let W10045 (let W10046 (shen.<expr> V10035) (if (shen.parse-failure? W10046) (shen.parse-failure) (let W10047 (shen.<-out W10046) (let W10048 (shen.in-> W10046) (shen.comb W10048 W10047))))) (if (shen.parse-failure? W10045) (shen.parse-failure) W10045)) W10036)))

(defun shen.<iscolon> (V10049) (let W10050 (if (cons? V10049) (let W10051 (head V10049) (let W10052 (tail V10049) (if (= W10051 (intern ":")) (shen.comb W10052 shen.skip) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W10050) (shen.parse-failure) W10050)))

(defun shen.<sides> (V10053) (let W10054 (let W10055 (shen.<side> V10053) (if (shen.parse-failure? W10055) (shen.parse-failure) (let W10056 (shen.<-out W10055) (let W10057 (shen.in-> W10055) (let W10058 (shen.<sides> W10057) (if (shen.parse-failure? W10058) (shen.parse-failure) (let W10059 (shen.<-out W10058) (let W10060 (shen.in-> W10058) (shen.comb W10060 (cons W10056 W10059)))))))))) (if (shen.parse-failure? W10054) (let W10061 (let W10062 (<e> V10053) (if (shen.parse-failure? W10062) (shen.parse-failure) (let W10063 (shen.in-> W10062) (shen.comb W10063 ())))) (if (shen.parse-failure? W10061) (shen.parse-failure) W10061)) W10054)))

(defun shen.<side> (V10064) (let W10065 (if (shen.hds=? V10064 if) (let W10066 (tail V10064) (if (cons? W10066) (let W10067 (head W10066) (let W10068 (tail W10066) (shen.comb W10068 (cons if (cons W10067 ()))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W10065) (let W10069 (if (shen.hds=? V10064 let) (let W10070 (tail V10064) (if (cons? W10070) (let W10071 (head W10070) (let W10072 (tail W10070) (if (cons? W10072) (let W10073 (head W10072) (let W10074 (tail W10072) (shen.comb W10074 (cons let (cons W10071 (cons W10073 ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W10069) (let W10075 (if (shen.hds=? V10064 shen.let!) (let W10076 (tail V10064) (if (cons? W10076) (let W10077 (head W10076) (let W10078 (tail W10076) (if (cons? W10078) (let W10079 (head W10078) (let W10080 (tail W10078) (shen.comb W10080 (cons shen.let! (cons W10077 (cons W10079 ())))))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W10075) (shen.parse-failure) W10075)) W10069)) W10065)))

(defun shen.lr-rule (V10087 V10088 V10089) (cond ((and (cons? V10089) (and (= () (hd V10089)) (and (cons? (tl V10089)) (= () (tl (tl V10089)))))) (let W10090 (gensym P) (let W10091 (cons (tl V10089) (cons W10090 ())) (let W10092 (cons (shen.coll-formulae V10088) (cons W10090 ())) (let W10093 (cons V10087 (cons (cons W10092 ()) (cons W10091 ()))) (let W10094 (cons V10087 (cons V10088 (cons V10089 ()))) (cons W10094 (cons W10093 ())))))))) (true (simple-error "implementation error in shen.lr-rule"))))

(defun shen.coll-formulae (V10097) (cond ((= () V10097) ()) ((and (cons? V10097) (and (cons? (hd V10097)) (and (= () (hd (hd V10097))) (and (cons? (tl (hd V10097))) (= () (tl (tl (hd V10097)))))))) (cons (hd (tl (hd V10097))) (shen.coll-formulae (tl V10097)))) (true (simple-error "implementation error in shen.coll-formulae"))))

(defun shen.<expr> (V10098) (let W10099 (if (cons? V10098) (let W10100 (head V10098) (let W10101 (tail V10098) (if (not (shen.key-in-sequent-calculus? W10100)) (shen.comb W10101 (macroexpand W10100)) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W10099) (shen.parse-failure) W10099)))

(defun shen.key-in-sequent-calculus? (V10102) (or (element? V10102 (cons >> (cons (intern ";") (cons (intern ",") (cons (intern ":") (cons <-- ())))))) (or (shen.sng? V10102) (shen.dbl? V10102))))

(defun shen.<type> (V10103) (let W10104 (let W10105 (shen.<expr> V10103) (if (shen.parse-failure? W10105) (shen.parse-failure) (let W10106 (shen.<-out W10105) (let W10107 (shen.in-> W10105) (shen.comb W10107 W10106))))) (if (shen.parse-failure? W10104) (shen.parse-failure) W10104)))

(defun shen.<dbl> (V10108) (let W10109 (if (cons? V10108) (let W10110 (head V10108) (let W10111 (tail V10108) (if (shen.dbl? W10110) (shen.comb W10111 W10110) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W10109) (shen.parse-failure) W10109)))

(defun shen.<sng> (V10112) (let W10113 (if (cons? V10112) (let W10114 (head V10112) (let W10115 (tail V10112) (if (shen.sng? W10114) (shen.comb W10115 W10114) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? W10113) (shen.parse-failure) W10113)))

(defun shen.sng? (V10116) (and (symbol? V10116) (shen.sng-h? (str V10116))))

(defun shen.sng-h? (V10119) (cond ((= "___" V10119) true) ((and (shen.+string? V10119) (= "_" (hdstr V10119))) (shen.sng-h? (tlstr V10119))) (true false)))

(defun shen.dbl? (V10120) (and (symbol? V10120) (shen.dbl-h? (str V10120))))

(defun shen.dbl-h? (V10123) (cond ((= "===" V10123) true) ((and (shen.+string? V10123) (= "=" (hdstr V10123))) (shen.dbl-h? (tlstr V10123))) (true false)))

(defun shen.remember-datatype (V10124 V10125) (do (set shen.*datatypes* (shen.assoc-> V10124 V10125 (value shen.*datatypes*))) (do (set shen.*alldatatypes* (shen.assoc-> V10124 V10125 (value shen.*alldatatypes*))) V10124)))

(defun shen.rules->prolog (V10126 V10127) (let W10128 (mapcan (lambda Z10129 (shen.rule->clause Z10129)) V10127) (eval (cons defprolog (cons V10126 W10128)))))

(defun shen.rule->clause (V10132) (cond ((and (cons? V10132) (and (cons? (tl V10132)) (and (cons? (tl (tl V10132))) (and (cons? (hd (tl (tl V10132)))) (and (cons? (tl (hd (tl (tl V10132))))) (and (= () (tl (tl (hd (tl (tl V10132)))))) (= () (tl (tl (tl V10132)))))))))) (let W10133 (shen.extract-vars V10132) (let W10134 (append (shen.nvars (length (hd (hd (tl (tl V10132)))))) (cons Delta ())) (let W10135 (shen.extract-vars (hd (tl (hd (tl (tl V10132)))))) (let W10136 (shen.compile-consequent (hd (tl (hd (tl (tl V10132))))) W10134) (let W10137 (shen.goals W10133 (hd (hd (tl (tl V10132)))) (hd V10132) (hd (tl V10132)) W10134 W10135) (append W10136 (append (cons <-- ()) (append W10137 (cons (intern ";") ())))))))))) (true (simple-error "implementation error in shen.rule->clause"))))

(defun shen.compile-consequent (V10144 V10145) (cond ((cons? V10145) (cons (shen.optimise-typing V10144) (cons (hd V10145) ()))) (true (simple-error "implementation error in shen.compile-consequent"))))

(defun shen.nvars (V10146) (cond ((= 0 V10146) ()) (true (cons (gensym V) (shen.nvars (- V10146 1))))))

(defun shen.optimise-typing (V10147) (cond ((and (cons? V10147) (and (cons? (tl V10147)) (and (cons? (tl (tl V10147))) (and (= () (tl (tl (tl V10147)))) (= (hd (tl V10147)) (intern ":")))))) (let W10148 (shen.expand-mode-forms (cons - (cons (cons (hd V10147) (cons (hd (tl V10147)) (cons (cons + (tl (tl V10147))) ()))) ()))) (shen.cons-form-with-modes W10148))) (true (let W10149 (shen.expand-mode-forms (cons + (cons V10147 ()))) (shen.cons-form-with-modes W10149)))))

(defun shen.expand-mode-forms (V10150) (cond ((and (cons? V10150) (and (= + (hd V10150)) (and (cons? (tl V10150)) (= () (tl (tl V10150)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V10150))) (cons + ())))) ((and (cons? V10150) (and (= - (hd V10150)) (and (cons? (tl V10150)) (= () (tl (tl V10150)))))) (cons mode (cons (shen.expand-mode-forms (hd (tl V10150))) (cons - ())))) ((cons? V10150) (map (lambda Z10151 (shen.expand-mode-forms Z10151)) V10150)) (true V10150)))

(defun shen.cons-form-with-modes (V10152) (cond ((and (cons? V10152) (and (= mode (hd V10152)) (and (cons? (tl V10152)) (and (cons? (tl (tl V10152))) (= () (tl (tl (tl V10152)))))))) (cons (hd (tl (tl V10152))) (cons (shen.cons-form-with-modes (hd (tl V10152))) ()))) ((and (cons? V10152) (and (= bar! (hd V10152)) (and (cons? (tl V10152)) (= () (tl (tl V10152)))))) (hd (tl V10152))) ((cons? V10152) (cons cons (cons (shen.cons-form-with-modes (hd V10152)) (cons (shen.cons-form-with-modes (tl V10152)) ())))) (true V10152)))

(defun shen.goals (V10153 V10154 V10155 V10156 V10157 V10158) (let W10159 (shen.compile-assumptions V10154 V10153 V10157 V10158) (let W10160 (shen.compile-side-conditions V10155) (let W10161 (shen.compile-premises V10156 V10157) (append W10159 (append W10160 W10161))))))

(defun shen.compile-assumptions (V10176 V10177 V10178 V10179) (cond ((= () V10176) ()) ((and (cons? V10176) (and (cons? V10178) (cons? (tl V10178)))) (let W10180 (append (shen.extract-vars (hd V10176)) V10179) (cons (shen.compile-assumption (hd V10176) (hd V10178) (hd (tl V10178)) V10177 V10179) (shen.compile-assumptions (tl V10176) V10177 (tl V10178) W10180)))) (true (simple-error "implementation error in shen.compile-assumptions"))))

(defun shen.compile-assumption (V10181 V10182 V10183 V10184 V10185) (let W10186 (gensym shen.search) (let W10187 (shen.compile-search-procedure W10186 V10181 V10182 V10183 V10184 V10185) (cons W10186 (cons V10182 (cons () (cons V10183 V10184)))))))

(defun shen.compile-search-procedure (V10188 V10189 V10190 V10191 V10192 V10193) (let W10194 (gensym Previous) (let W10195 (shen.foundit! V10189 V10190 W10194 V10191 V10192 V10193) (let W10196 (shen.keep-looking V10188 V10190 W10194 V10191 V10192) (eval (cons defprolog (cons V10188 (append W10195 W10196))))))))

(defun shen.foundit! (V10197 V10198 V10199 V10200 V10201 V10202) (let W10203 (shen.passive V10197 V10202) (let W10204 (shen.tabulate-passive W10203) (let W10205 (shen.head-foundit! V10197 V10198 V10199 V10200 V10201 W10204) (let W10206 (shen.body-foundit! V10198 V10199 V10200 W10204) (append W10205 (append (cons <-- ()) (append W10206 (cons (intern ";") ())))))))))

(defun shen.keep-looking (V10207 V10208 V10209 V10210 V10211) (let W10212 (gensym V) (let W10213 (cons (cons - (cons (cons cons (cons W10212 (cons V10208 ()))) ())) (cons V10209 (cons V10210 V10211))) (let W10214 (cons (cons V10207 (cons V10208 (cons (cons cons (cons W10212 (cons V10209 ()))) (cons V10210 V10211)))) ()) (append W10213 (append (cons <-- ()) (append W10214 (cons (intern ";") ()))))))))

(defun shen.passive (V10219 V10220) (cond ((cons? V10219) (union (shen.passive (hd V10219) V10220) (shen.passive (tl V10219) V10220))) ((shen.passive? V10219 V10220) (cons V10219 ())) (true ())))

(defun shen.passive? (V10221 V10222) (and (not (element? V10221 V10222)) (variable? V10221)))

(defun shen.tabulate-passive (V10223) (map (lambda Z10224 (cons Z10224 (gensym V))) V10223))

(defun shen.head-foundit! (V10225 V10226 V10227 V10228 V10229 V10230) (let W10231 (shen.optimise-passive V10229 V10230) (cons (cons - (cons (cons cons (cons (shen.optimise-typing V10225) (cons V10226 ()))) ())) (cons V10227 (cons V10228 W10231)))))

(defun shen.optimise-passive (V10232 V10233) (map (lambda Z10234 (shen.optimise-passive-h Z10234 V10233)) V10232))

(defun shen.optimise-passive-h (V10235 V10236) (let W10237 (assoc V10235 V10236) (if (empty? W10237) V10235 (tl W10237))))

(defun shen.body-foundit! (V10246 V10247 V10248 V10249) (cond ((= () V10249) (cons (cons bind (cons V10248 (cons (cons append (cons (cons 1 (cons V10247 ())) (cons (cons 1 (cons V10246 ())) ()))) ()))) ())) ((and (cons? V10249) (cons? (hd V10249))) (cons (cons bind (cons (tl (hd V10249)) (cons (hd (hd V10249)) ()))) (shen.body-foundit! V10246 V10247 V10248 (tl V10249)))) (true (simple-error "implementation error in shen.body-foundit!"))))

(defun shen.compile-side-conditions (V10250) (map (lambda Z10251 (shen.compile-side-condition Z10251)) V10250))

(defun shen.compile-side-condition (V10254) (cond ((and (cons? V10254) (and (= let (hd V10254)) (and (cons? (tl V10254)) (and (cons? (tl (tl V10254))) (= () (tl (tl (tl V10254)))))))) (cons is (tl V10254))) ((and (cons? V10254) (and (= shen.let! (hd V10254)) (and (cons? (tl V10254)) (and (cons? (tl (tl V10254))) (= () (tl (tl (tl V10254)))))))) (cons is! (tl V10254))) ((and (cons? V10254) (and (= if (hd V10254)) (and (cons? (tl V10254)) (= () (tl (tl V10254)))))) (cons when (tl V10254))) (true (simple-error "implementation error in shen.compile-side-condition"))))

(defun shen.compile-premises (V10255 V10256) (let W10257 (hd (reverse V10256)) (map (lambda Z10258 (shen.compile-premise Z10258 W10257)) V10255)))

(defun shen.compile-premise (V10265 V10266) (cond ((= ! V10265) !) ((and (cons? V10265) (and (cons? (tl V10265)) (= () (tl (tl V10265))))) (shen.compile-premise-h (reverse (hd V10265)) (hd (tl V10265)) V10266)) (true (simple-error "implementation error in shen.premise"))))

(defun shen.compile-premise-h (V10273 V10274 V10275) (cond ((= () V10273) (cons shen.system-S (cons (shen.cons-form-no-modes V10274) (cons V10275 ())))) ((cons? V10273) (shen.compile-premise-h (tl V10273) V10274 (cons cons (cons (shen.cons-form-no-modes (hd V10273)) (cons V10275 ()))))) (true (simple-error "implementation error in shen.compile-premise-h"))))

(defun shen.cons-form-no-modes (V10276) (cond ((and (cons? V10276) (and (= bar! (hd V10276)) (and (cons? (tl V10276)) (= () (tl (tl V10276)))))) (hd (tl V10276))) ((cons? V10276) (cons cons (cons (shen.cons-form-no-modes (hd V10276)) (cons (shen.cons-form-no-modes (tl V10276)) ())))) (true V10276)))

(defun preclude (V10277) (let W10278 (map (lambda Z10279 (shen.intern-type Z10279)) V10277) (let W10280 (value shen.*datatypes*) (let W10281 (shen.remove-datatypes W10278 W10280) (let W10282 (set shen.*datatypes* W10281) (shen.show-datatypes W10282))))))

(defun shen.remove-datatypes (V10287 V10288) (cond ((= () V10287) V10288) ((cons? V10287) (shen.remove-datatypes (tl V10287) (shen.unassoc (hd V10287) V10288))) (true (simple-error "implementation error in shen.remove-datatypes"))))

(defun shen.show-datatypes (V10289) (map (lambda Z10290 (hd Z10290)) V10289))

(defun include (V10291) (let W10292 (map (lambda Z10293 (shen.intern-type Z10293)) V10291) (let W10294 (map (lambda Z10295 (shen.remember-datatype Z10295 (fn Z10295))) W10292) (let W10296 (value shen.*datatypes*) (shen.show-datatypes W10296)))))

(defun preclude-all-but (V10297) (let W10298 (set shen.*datatypes* ()) (let W10299 (map (lambda Z10300 (shen.intern-type Z10300)) V10297) (let W10301 (map (lambda Z10302 (shen.remember-datatype Z10302 (fn Z10302))) W10299) (shen.show-datatypes (value shen.*datatypes*))))))

(defun include-all-but (V10303) (let W10304 (map (lambda Z10305 (shen.intern-type Z10305)) V10303) (let W10306 (value shen.*alldatatypes*) (let W10307 (set shen.*datatypes* (shen.remove-datatypes W10304 W10306)) (shen.show-datatypes W10307)))))

