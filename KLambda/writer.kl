(defun print (V12489) (let W12490 (shen.insert V12489 "~S") (let W12491 (pr W12490 (stoutput)) V12489)))

(defun pr (V12492 V12493) (if (value *hush*) V12492 (if (shen.char-stoutput? V12493) (shen.write-string V12492 V12493) (shen.write-chars V12492 V12493 (shen.string->byte V12492 0) 1))))

(defun shen.string->byte (V12494 V12495) (trap-error (string->n (pos V12494 V12495)) (lambda Z12496 shen.eos)))

(defun shen.write-chars (V12497 V12498 V12499 V12500) (cond ((= shen.eos V12499) V12497) (true (shen.write-chars V12497 V12498 (do (write-byte V12499 V12498) (shen.string->byte V12497 V12500)) (+ V12500 1)))))

(defun shen.mkstr (V12501 V12502) (cond ((string? V12501) (shen.mkstr-l (shen.proc-nl V12501) V12502)) (true (shen.mkstr-r (cons shen.proc-nl (cons V12501 ())) V12502))))

(defun shen.mkstr-l (V12507 V12508) (cond ((= () V12508) V12507) ((cons? V12508) (shen.mkstr-l (shen.insert-l (hd V12508) V12507) (tl V12508))) (true (simple-error "implementation error in shen.mkstr-l"))))

(defun shen.insert-l (V12515 V12516) (cond ((= "" V12516) "") ((and (shen.+string? V12516) (and (= "~" (hdstr V12516)) (and (shen.+string? (tlstr V12516)) (= "A" (hdstr (tlstr V12516)))))) (cons shen.app (cons V12515 (cons (tlstr (tlstr V12516)) (cons shen.a ()))))) ((and (shen.+string? V12516) (and (= "~" (hdstr V12516)) (and (shen.+string? (tlstr V12516)) (= "R" (hdstr (tlstr V12516)))))) (cons shen.app (cons V12515 (cons (tlstr (tlstr V12516)) (cons shen.r ()))))) ((and (shen.+string? V12516) (and (= "~" (hdstr V12516)) (and (shen.+string? (tlstr V12516)) (= "S" (hdstr (tlstr V12516)))))) (cons shen.app (cons V12515 (cons (tlstr (tlstr V12516)) (cons shen.s ()))))) ((shen.+string? V12516) (shen.factor-cn (cons cn (cons (hdstr V12516) (cons (shen.insert-l V12515 (tlstr V12516)) ()))))) ((and (cons? V12516) (and (= cn (hd V12516)) (and (cons? (tl V12516)) (and (cons? (tl (tl V12516))) (= () (tl (tl (tl V12516)))))))) (cons cn (cons (hd (tl V12516)) (cons (shen.insert-l V12515 (hd (tl (tl V12516)))) ())))) ((and (cons? V12516) (and (= shen.app (hd V12516)) (and (cons? (tl V12516)) (and (cons? (tl (tl V12516))) (and (cons? (tl (tl (tl V12516)))) (= () (tl (tl (tl (tl V12516)))))))))) (cons shen.app (cons (hd (tl V12516)) (cons (shen.insert-l V12515 (hd (tl (tl V12516)))) (tl (tl (tl V12516))))))) (true (simple-error "implementation error in shen.insert-l"))))

(defun shen.factor-cn (V12517) (cond ((and (cons? V12517) (and (= cn (hd V12517)) (and (cons? (tl V12517)) (and (cons? (tl (tl V12517))) (and (cons? (hd (tl (tl V12517)))) (and (= cn (hd (hd (tl (tl V12517))))) (and (cons? (tl (hd (tl (tl V12517))))) (and (cons? (tl (tl (hd (tl (tl V12517)))))) (and (= () (tl (tl (tl (hd (tl (tl V12517))))))) (and (= () (tl (tl (tl V12517)))) (and (string? (hd (tl V12517))) (string? (hd (tl (hd (tl (tl V12517))))))))))))))))) (cons cn (cons (cn (hd (tl V12517)) (hd (tl (hd (tl (tl V12517)))))) (tl (tl (hd (tl (tl V12517)))))))) (true V12517)))

(defun shen.proc-nl (V12520) (cond ((= "" V12520) "") ((and (shen.+string? V12520) (and (= "~" (hdstr V12520)) (and (shen.+string? (tlstr V12520)) (= "%" (hdstr (tlstr V12520)))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V12520))))) ((shen.+string? V12520) (cn (hdstr V12520) (shen.proc-nl (tlstr V12520)))) (true (simple-error "implementation error in shen.proc-nl"))))

(defun shen.mkstr-r (V12525 V12526) (cond ((= () V12526) V12525) ((cons? V12526) (shen.mkstr-r (cons shen.insert (cons (hd V12526) (cons V12525 ()))) (tl V12526))) (true (simple-error "implementation error in shen.mkstr-r"))))

(defun shen.insert (V12527 V12528) (shen.insert-h V12527 V12528 ""))

(defun shen.insert-h (V12537 V12538 V12539) (cond ((= "" V12538) V12539) ((and (shen.+string? V12538) (and (= "~" (hdstr V12538)) (and (shen.+string? (tlstr V12538)) (= "A" (hdstr (tlstr V12538)))))) (cn V12539 (shen.app V12537 (tlstr (tlstr V12538)) shen.a))) ((and (shen.+string? V12538) (and (= "~" (hdstr V12538)) (and (shen.+string? (tlstr V12538)) (= "R" (hdstr (tlstr V12538)))))) (cn V12539 (shen.app V12537 (tlstr (tlstr V12538)) shen.r))) ((and (shen.+string? V12538) (and (= "~" (hdstr V12538)) (and (shen.+string? (tlstr V12538)) (= "S" (hdstr (tlstr V12538)))))) (cn V12539 (shen.app V12537 (tlstr (tlstr V12538)) shen.s))) ((shen.+string? V12538) (shen.insert-h V12537 (tlstr V12538) (cn V12539 (hdstr V12538)))) (true (simple-error "implementation error in shen.insert-h"))))

(defun shen.app (V12540 V12541 V12542) (cn (shen.arg->str V12540 V12542) V12541))

(defun shen.arg->str (V12546 V12547) (cond ((= V12546 (fail)) "...") ((shen.list? V12546) (shen.list->str V12546 V12547)) ((string? V12546) (shen.str->str V12546 V12547)) ((absvector? V12546) (shen.vector->str V12546 V12547)) (true (shen.atom->str V12546))))

(defun shen.list->str (V12548 V12549) (cond ((= shen.r V12549) (@s "(" (@s (shen.iter-list V12548 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V12548 V12549 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V12560 V12561 V12562) (cond ((= () V12560) "") ((= 0 V12562) "... etc") ((and (cons? V12560) (= () (tl V12560))) (shen.arg->str (hd V12560) V12561)) ((cons? V12560) (@s (shen.arg->str (hd V12560) V12561) (@s " " (shen.iter-list (tl V12560) V12561 (- V12562 1))))) (true (@s "|" (@s " " (shen.arg->str V12560 V12561))))))

(defun shen.str->str (V12565 V12566) (cond ((= shen.a V12566) V12565) (true (@s (n->string 34) (@s V12565 (n->string 34))))))

(defun shen.vector->str (V12567 V12568) (if (shen.print-vector? V12567) ((fn (<-address V12567 0)) V12567) (if (vector? V12567) (@s "<" (@s (shen.iter-vector V12567 1 V12568 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V12567 0 V12568 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V12569) (let W12570 (<-address V12569 0) (if (= W12570 shen.tuple) true (if (= W12570 shen.pvar) true (if (not (number? W12570)) (shen.fbound? W12570) false)))))

(defun shen.fbound? (V12571) (not (= (arity V12571) -1)))

(defun shen.tuple (V12572) (cn "(@p " (shen.app (<-address V12572 1) (cn " " (shen.app (<-address V12572 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V12579 V12580 V12581 V12582) (cond ((= 0 V12582) "... etc") (true (let W12583 (trap-error (<-address V12579 V12580) (lambda Z12584 shen.out-of-bounds)) (let W12585 (trap-error (<-address V12579 (+ V12580 1)) (lambda Z12586 shen.out-of-bounds)) (if (= W12583 shen.out-of-bounds) "" (if (= W12585 shen.out-of-bounds) (shen.arg->str W12583 V12581) (@s (shen.arg->str W12583 V12581) (@s " " (shen.iter-vector V12579 (+ V12580 1) V12581 (- V12582 1)))))))))))

(defun shen.atom->str (V12587) (trap-error (str V12587) (lambda Z12588 (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V12589) (or (empty? V12589) (cons? V12589)))

