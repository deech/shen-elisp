(defun prolog-memory (V861) (set shen.*prolog-memory* V861))

(defun arity (V862) (trap-error (get V862 arity (value *property-vector*)) (lambda Z863 -1)))

(defun shen.initialise-arity-table (V866) (cond ((= () V866) ()) ((and (cons? V866) (cons? (tl V866))) (let W867 (put (hd V866) arity (hd (tl V866)) (value *property-vector*)) (shen.initialise-arity-table (tl (tl V866))))) (true (simple-error "implementation error in shen.initialise-arity-table"))))

(defun systemf (V868) (let W869 (get shen shen.external-symbols (value *property-vector*)) (let W870 (put shen shen.external-symbols (adjoin V868 W869) (value *property-vector*)) V868)))

(defun adjoin (V871 V872) (if (element? V871 V872) V872 (cons V871 V872)))

(defun shen.lambda-entry (V873) (let W874 (arity V873) (if (or (= W874 -1) (= W874 0)) () (cons V873 (eval-kl (shen.lambda-function (cons V873 ()) W874))))))

(defun shen.set-lambda-form-entry (V875) (cond ((cons? V875) (put (hd V875) shen.lambda-form (tl V875) (value *property-vector*))) (true (shen.f-error shen.set-lambda-form-entry))))

(defun shen.build-lambda-table (V876) (let W877 (map (lambda Z878 (shen.lambda-entry Z878)) V876) (shen.for-each (lambda Z879 (shen.set-lambda-form-entry Z879)) (cons (cons shen.tuple (lambda Z880 (shen.tuple Z880))) (cons (cons shen.pvar (lambda Z881 (shen.pvar Z881))) (cons (cons shen.dictionary (lambda Z882 (shen.dictionary Z882))) (cons (cons shen.print-prolog-vector (lambda Z883 (shen.print-prolog-vector Z883))) (cons (cons shen.print-freshterm (lambda Z884 (shen.print-freshterm Z884))) (cons (cons shen.printF (lambda Z885 (shen.printF Z885))) W877)))))))))

